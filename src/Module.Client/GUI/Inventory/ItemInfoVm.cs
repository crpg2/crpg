using System.Drawing;
using System.Runtime.Remoting.Messaging;
using Crpg.Module.Api.Models.Items;
using Crpg.Module.Common;
using Crpg.Module.Common.HotConstants;
using NetworkMessages.FromServer;
using TaleWorlds.Core;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.GauntletUI.AutoGenerated1;
using TaleWorlds.ObjectSystem;

namespace Crpg.Module.GUI.Inventory;

public class ItemInfoVm : ViewModel
{
    private string _name = string.Empty;
    private MBBindingList<ItemInfoTupleVM> _tuples = new();
    private CrpgConstants? _constants;
    private bool _isVisible;



    [DataSourceProperty]
    public MBBindingList<ItemInfoTupleVM> Tuples
    {
        get => _tuples;
        set => SetField(ref _tuples, value, nameof(Tuples));
    }

    private MBBindingList<ItemInfoRowVM> _rows = new();

    [DataSourceProperty]
    public MBBindingList<ItemInfoRowVM> Rows
    {
        get => _rows;
        set => SetField(ref _rows, value, nameof(Rows));
    }

    private ImageIdentifierVM _imageIdentifier;
    public ItemObject ItemObj { get; }

    public ItemInfoVm(ItemObject item)
    {
        ItemObj = item;
        _imageIdentifier = new ImageIdentifierVM(item);
        _name = item.Name.ToString();

        var behavior = Mission.Current?.GetMissionBehavior<CrpgCharacterLoadoutBehaviorClient>();
        if (behavior == null)
        {
            InformationManager.DisplayMessage(new InformationMessage("CrpgCharacterLoadoutBehaviorClient is required but not found in current mission", Colors.Red));
            return;
        }

        _constants = behavior.Constants;
    }

    [DataSourceProperty]
    public ImageIdentifierVM ImageIdentifier
    {
        get => _imageIdentifier;
        set => SetField(ref _imageIdentifier, value, nameof(ImageIdentifier));
    }

    [DataSourceProperty]
    public string Name
    {
        get => _name;
        set => SetField(ref _name, value, nameof(Name));
    }

    [DataSourceProperty]
    public bool IsVisible
    {
        get => _isVisible;
        set => SetField(ref _isVisible, value, nameof(IsVisible));
    }

    private void GenerateItemInfo(ItemObject item)
    {
        if (item == null)
        {
            return;
        }

        // Name = item.Name;
        ImageIdentifier = new ImageIdentifierVM(item);

        // Type/Class

        GenerateTuplesFromItem();
        GenerateRowsFromTuples();
    }

    private void GenerateTuplesFromItem()
    {
        Tuples.Clear();

        var crpgItem = DataExport.ItemExporter.MbToCrpgItemPub(ItemObj);

        // General Type/Class
        var tup = new ItemInfoTupleVM
        {
            CategoryName = "Type/Class",
            BrushOne = GetItemTypeIconString(crpgItem),
            BrushTwo = GetItemWeaponClassIconString(crpgItem),
        };
        Tuples.Add(tup);

        // Armor Only
        if (crpgItem.Armor != null)
        {
            if (crpgItem.Armor.FamilyType > 0)
            {
                string famTypeStr = string.Empty;
                if (crpgItem.Armor.FamilyType == 3)
                {
                    famTypeStr = "EBA";
                }

                tup = new ItemInfoTupleVM
                {
                    CategoryName = "Armor set",
                    ValueText = famTypeStr,
                };
                Tuples.Add(tup);
            }

            // Culture
            tup = new ItemInfoTupleVM
            {
                CategoryName = "Culture",
                ValueText = crpgItem.Culture.ToString(),
            };
            Tuples.Add(tup);

            // Features
            if ((crpgItem.Flags & CrpgItemFlags.UseTeamColor) != 0)
            {
                // Item has the UseTeamColor flag
                tup = new ItemInfoTupleVM
                {
                    CategoryName = "Features",
                    BrushOne = "ui_crpg_icon_white_useteamcolor",
                };
                Tuples.Add(tup);
            }

            // Material
            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Material",
                ValueText = crpgItem.Armor.MaterialType.ToString(),
            });

            // Weight
            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Weight",
                ValueText = crpgItem.Weight.ToString(),
            });

            // Armor Amounts
            var armorValues = new (string label, int value)[]
            {
                ("Head armor", crpgItem.Armor.HeadArmor),
                ("Body armor", crpgItem.Armor.BodyArmor),
                ("Arm armor",  crpgItem.Armor.ArmArmor),
                ("Leg armor",  crpgItem.Armor.LegArmor),
            };

            foreach (var (label, value) in armorValues)
            {
                if (value > 0)
                {
                    Tuples.Add(new ItemInfoTupleVM
                    {
                        CategoryName = label,
                        ValueText = value.ToString(),
                    });
                }
            }
        }

        if (crpgItem.Mount != null)
        {
            // Mount type (special, since it has a brush)
            // TODO: check for camel/horse later
            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Mount type",
                BrushOne = "ui_crpg_icon_white_mount",
            });

            var mountStats = new (string label, int value)[]
            {
                ("Body length",   crpgItem.Mount.BodyLength),
                ("Charge damage", crpgItem.Mount.ChargeDamage),
                ("Maneuver",      crpgItem.Mount.Maneuver),
                ("Speed",         crpgItem.Mount.Speed),
                ("Hit points",    crpgItem.Mount.HitPoints),
            };

            foreach (var (label, value) in mountStats)
            {
                Tuples.Add(new ItemInfoTupleVM
                {
                    CategoryName = label,
                    ValueText = value.ToString(),
                });
            }
        }

        if (crpgItem.Weapons != null && crpgItem.Weapons.Count > 0)
        {
            // Features for weapons?
            List<string> wFeats = GetWeaponFeatures(crpgItem, ItemObj);
            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Features",
                BrushOne = wFeats.Count > 0 ? wFeats[0] : string.Empty,
                BrushTwo = wFeats.Count > 1 ? wFeats[1] : string.Empty,
                BrushThree = wFeats.Count > 2 ? wFeats[2] : string.Empty,
            });
        }

        var iType = crpgItem.Type;
        // Usage for melee weapons
        if (crpgItem.Weapons != null && crpgItem.Weapons.Count > 0 &&
            (iType == CrpgItemType.OneHandedWeapon ||
             iType == CrpgItemType.TwoHandedWeapon ||
             iType == CrpgItemType.Polearm))
        {
            var weapon = crpgItem.Weapons[0];

            Tuples.Add(new ItemInfoTupleVM { CategoryName = "Weight", ValueText = crpgItem.Weight.ToString() });
            Tuples.Add(new ItemInfoTupleVM { CategoryName = "Reach", ValueText = weapon.Length.ToString() });
            Tuples.Add(new ItemInfoTupleVM { CategoryName = "Handling", ValueText = weapon.Handling.ToString() });

            // Add damage stats if present
            AddWeaponStat("Thrust damage", weapon.ThrustDamage, weapon.ThrustDamageType);
            AddWeaponStat("Thrust speed", weapon.ThrustSpeed, skipIfZero: true);
            AddWeaponStat("Swing damage", weapon.SwingDamage, weapon.SwingDamageType);
            AddWeaponStat("Swing speed", weapon.SwingSpeed, skipIfZero: true);
        }

        if (crpgItem.Weapons != null && crpgItem.Weapons.Count > 0 &&
            (iType == CrpgItemType.Arrows ||
            iType == CrpgItemType.Bolts ||
            iType == CrpgItemType.Bullets))
        {
            var weapon = crpgItem.Weapons[0];

            // Map damage type to brush and suffix
            (string brush, string suffix) = weapon.ThrustDamageType switch
            {
                CrpgDamageType.Cut => ("ui_crpg_icon_white_cut", "c"),
                CrpgDamageType.Pierce => ("ui_crpg_icon_white_pierce", "p"),
                _ => (string.Empty, string.Empty),
            };

            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Damage type",
                BrushOne = brush,
            });

            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Damage",
                ValueText = $"{weapon.ThrustDamage} {suffix}",
            });

            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Stack weight",
                ValueText = $"{crpgItem.Weight * weapon.StackAmount}",
            });

            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Ammo",
                ValueText = $"{weapon.StackAmount}",
            });
        }

        if (crpgItem.Weapons != null && crpgItem.Weapons.Count > 0 &&
            (iType == CrpgItemType.Bow ||
            iType == CrpgItemType.Crossbow ||
            iType == CrpgItemType.Musket ||
            iType == CrpgItemType.Pistol
            ))
        {
            var weapon = crpgItem.Weapons[0];

            // Features

            // Map damage type to brush and suffix
            string suffix = weapon.ThrustDamageType switch
            {
                CrpgDamageType.Cut => "c",
                CrpgDamageType.Pierce => "p",
                _ => string.Empty,
            };

            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Weight",
                ValueText = crpgItem.Weight.ToString(),
            });

            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Damage",
                ValueText = $"{weapon.ThrustDamage} {suffix}",
            });

            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Accuracy",
                ValueText = $"{weapon.Accuracy}",
            });

            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Missile speed",
                ValueText = $"{weapon.MissileSpeed}",
            });

            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Reload speed",
                ValueText = $"{weapon.Handling}",
            });
            Tuples.Add(new ItemInfoTupleVM
            {
                CategoryName = "Aim speed",
                ValueText = $"{weapon.ThrustSpeed}",
            });
        }

        // Upkeep
        Tuples.Add(new ItemInfoTupleVM
        {
            CategoryName = "Upkeep",
            ValueText = $"{ComputeAverageRepairCostPerHour(crpgItem.Price):N0} / h",
            IsGoldVisible = true,
        });

        // Price
        Tuples.Add(new ItemInfoTupleVM
        {
            CategoryName = "Price",
            ValueText = $"{crpgItem.Price:N0}",
            IsGoldVisible = true,
        });
    }

    private int ComputeAverageRepairCostPerHour(int price)
    {
        if (_constants != null)
        {
            return (int)Math.Floor(price * _constants.ItemRepairCostPerSecond * 3600 * _constants.ItemBreakChance);
        }

        return 0;
    }

    private void GenerateRowsFromTuples()
    {
        Rows.Clear();

        for (int i = 0; i < Tuples.Count; i += 2)
        {
            var left = Tuples[i];
            ItemInfoTupleVM? right = null;

            if (i + 1 < Tuples.Count)
            {
                right = Tuples[i + 1];
            }

            Rows.Add(new ItemInfoRowVM
            {
                Left = left,
                Right = right,
            });
        }
    }

    private void AddWeaponStat(string category, int value, CrpgDamageType? damageType = null, bool skipIfZero = true)
    {
        if (skipIfZero && value <= 0)
            return;

        string valText = damageType.HasValue ? $"{value} {GetDamageTypeSuffixString(damageType.Value)}" : value.ToString();

        Tuples.Add(new ItemInfoTupleVM
        {
            CategoryName = category,
            ValueText = valText,
        });
    }

    private string GetDamageTypeSuffixString(CrpgDamageType damageType)
    {
        return damageType switch
        {
            CrpgDamageType.Blunt => "b",
            CrpgDamageType.Cut => "c",
            CrpgDamageType.Pierce => "p",
            _ => string.Empty,
        };
    }

    private string GetItemTypeIconString(CrpgItem crpgItem)
    {
        var itemType = crpgItem.Type;
        return itemType switch
        {
            CrpgItemType.Arrows => "ui_crpg_icon_white_ammo",
            CrpgItemType.Banner => "ui_crpg_icon_white_banner",
            CrpgItemType.BodyArmor => "ui_crpg_icon_white_chestarmor",
            CrpgItemType.Bolts => "ui_crpg_icon_white_ammo",
            CrpgItemType.Bow => "ui_crpg_icon_white_ranged",
            CrpgItemType.Bullets => "ui_crpg_icon_white_ammo",
            CrpgItemType.Crossbow => "ui_crpg_icon_white_ranged",
            CrpgItemType.HandArmor => "ui_crpg_icon_white_handarmor",
            CrpgItemType.HeadArmor => "ui_crpg_icon_white_headarmor",
            CrpgItemType.LegArmor => "i_crpg_icon_white_legarmor",
            CrpgItemType.Mount => "ui_crpg_icon_white_mount",
            CrpgItemType.MountHarness => "ui_crpg_icon_white_mountharness",
            CrpgItemType.Musket => "ui_crpg_icon_white_ranged",
            CrpgItemType.OneHandedWeapon => "ui_crpg_icon_white_onehanded",
            CrpgItemType.Pistol => "ui_crpg_icon_white_ranged",
            CrpgItemType.Polearm => "ui_crpg_icon_white_polearm",
            CrpgItemType.Shield => "ui_crpg_icon_white_shield",
            CrpgItemType.ShoulderArmor => "ui_crpg_icon_white_cape",
            CrpgItemType.Thrown => "ui_crpg_icon_white_thrown",
            CrpgItemType.TwoHandedWeapon => "ui_crpg_icon_white_twohanded",
            CrpgItemType.Undefined => string.Empty,
            _ => string.Empty,
        };
    }

    private List<string> GetWeaponFeatures(CrpgItem crpgItem, ItemObject item)
    {
        var features = new List<string>();
        if (crpgItem.Weapons == null || crpgItem.Weapons.Count == 0)
        {
            return features;
        }

        if (crpgItem.Flags.HasFlag(CrpgItemFlags.DropOnWeaponChange))
        {
            features.Add("ui_crpg_icon_white_droponchange");
        }

        // Map flags to feature names
        var weaponFlagMap = new Dictionary<CrpgWeaponFlags, string>
    {
        { CrpgWeaponFlags.CanCrushThrough, "ui_crpg_icon_white_crushthrough" },
        { CrpgWeaponFlags.BonusAgainstShield, "ui_crpg_icon_white_bonusagainstshield" },
        { CrpgWeaponFlags.CanPenetrateShield, "ui_crpg_icon_white_penetratesshield" },
        { CrpgWeaponFlags.CanDismount, "ui_crpg_icon_white_candismount" },
        { CrpgWeaponFlags.CanKnockDown, "ui_crpg_icon_white_knockdown" },
        { CrpgWeaponFlags.CantReloadOnHorseback, "ui_crpg_icon_white_cantreloadonhorseback" },
    };

        foreach (var weapon in crpgItem.Weapons)
        {
            if (weapon == null)
            {
                continue;
            }

            // Check mapped weapon flags
            foreach (var kvp in weaponFlagMap)
            {
                if (weapon.Flags.HasFlag(kvp.Key) && !features.Contains(kvp.Value))
                {
                    features.Add(kvp.Value);
                }
            }

            // Check ItemUsage-based features
            if (!string.IsNullOrEmpty(weapon.ItemUsage))
            {
                switch (weapon.ItemUsage)
                {
                    case "crossbow_light":
                        features.Add("ui_crpg_icon_white_crossbow_light");
                        break;
                    case "crossbow":
                        features.Add("ui_crpg_icon_white_crossbow_heavy");
                        break;
                    case "long_bow":
                        features.Add("ui_crpg_icon_white_bow_longbow");
                        break;
                    case "bow":
                        features.Add("ui_crpg_icon_white_bow");
                        break;
                    case "polearm_bracing":
                        features.Add("ui_crpg_icon_white_brace");
                        break;
                    case "polearm_pike":
                        features.Add("ui_crpg_icon_white_pike");
                        break;
                }
            }
        }

        // Not in CrpgItem
        foreach (var weapon in item.Weapons)
        {
            if (weapon == null)
            {
                continue;
            }

            if (weapon.WeaponFlags.HasFlag(WeaponFlags.CanHook))
            {
                if (!features.Contains("ui_crpg_icon_white_candismount"))
                {
                    features.Add("ui_crpg_icon_white_candismount"); // TODO: replace with CanHook-specific icon if available
                }
            }
        }

        return features;
    }

    private string GetItemWeaponClassIconString(CrpgItem crpgItem)
    {
        if (crpgItem.Weapons == null || crpgItem.Weapons.Count == 0)
        {
            return string.Empty;
        }

        var weaponClass = crpgItem.Weapons[0].Class;

        return weaponClass switch
        {
            CrpgWeaponClass.Dagger => "ui_crpg_icon_white_dagger",
            CrpgWeaponClass.OneHandedSword => "ui_crpg_icon_white_onehanded_sword",
            CrpgWeaponClass.TwoHandedSword => "ui_crpg_icon_white_twohanded_sword",
            CrpgWeaponClass.OneHandedAxe => "ui_crpg_icon_white_onehanded_axe",
            CrpgWeaponClass.TwoHandedAxe => "ui_crpg_icon_white_twohanded_axe",
            CrpgWeaponClass.Mace => "ui_crpg_icon_white_onehanded_mace",
            CrpgWeaponClass.Pick => "ui_crpg_icon_white_onehanded_mace",
            CrpgWeaponClass.TwoHandedMace => "ui_crpg_icon_white_twohanded_mace",
            CrpgWeaponClass.OneHandedPolearm => "ui_crpg_icon_white_onehanded_polearm",
            CrpgWeaponClass.TwoHandedPolearm => "ui_crpg_icon_white_twohanded_polearm",
            CrpgWeaponClass.LowGripPolearm => "ItemIcon.PolearmLow",
            CrpgWeaponClass.Arrow => "ItemIcon.Arrows",
            CrpgWeaponClass.Bolt => "ItemIcon.Bolts",
            CrpgWeaponClass.Cartridge => "ItemIcon.Cartridge",
            CrpgWeaponClass.Bow => "ItemIcon.Bow",
            CrpgWeaponClass.Crossbow => "ItemIcon.Crossbow",
            CrpgWeaponClass.Stone => "ui_crpg_icon_white_thrown_stone",
            CrpgWeaponClass.Boulder => string.Empty,
            CrpgWeaponClass.ThrowingAxe => "ui_crpg_icon_white_thrown_axe",
            CrpgWeaponClass.ThrowingKnife => "ui_crpg_icon_white_thrown_knife",
            CrpgWeaponClass.Javelin => "ui_crpg_icon_white_thrown_javelin",
            CrpgWeaponClass.Pistol => "ItemIcon.Pistol",
            CrpgWeaponClass.Musket => "ItemIcon.Musket",
            CrpgWeaponClass.SmallShield => "ItemIcon.ShieldSmall",
            CrpgWeaponClass.LargeShield => "ItemIcon.ShieldLarge",
            CrpgWeaponClass.Banner => "ItemIcon.Banner",
            _ => string.Empty,
        };
    }

    public enum ItemFamilyType
    {
        Undefined = 0,
        Horse = 1,
        Camel = 2,
        EBA = 3,
    }
}

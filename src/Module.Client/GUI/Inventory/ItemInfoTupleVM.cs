using Crpg.Module.Api.Models.Items;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.GauntletUI.AutoGenerated1;
using TaleWorlds.ObjectSystem;

namespace Crpg.Module.GUI.Inventory;

public class ItemInfoTupleVM : ViewModel
{
    private string _categoryName = string.Empty;
    private string _valueText = string.Empty;
    private bool _isGoldVisible;
    private string _brushOne = string.Empty;
    private string _brushTwo = string.Empty;
    private string _brushThree = string.Empty;

    [DataSourceProperty]
    public string CategoryName
    {
        get => _categoryName;
        set => SetField(ref _categoryName, value, nameof(CategoryName));
    }

    [DataSourceProperty]
    public string ValueText
    {
        get => _valueText;
        set => SetField(ref _valueText, value, nameof(ValueText));
    }

    [DataSourceProperty]
    public bool IsGoldVisible
    {
        get => _isGoldVisible;
        set => SetField(ref _isGoldVisible, value, nameof(IsGoldVisible));
    }

    [DataSourceProperty]
    public string BrushOne
    {
        get => _brushOne;
        set
        {
            if (SetField(ref _brushOne, value, nameof(BrushOne)))
            {
                OnPropertyChanged(nameof(IsBrushOneVisible));
            }
        }
    }

    [DataSourceProperty]
    public string BrushTwo
    {
        get => _brushTwo;
        set
        {
            if (SetField(ref _brushTwo, value, nameof(BrushTwo)))
            {
                OnPropertyChanged(nameof(IsBrushTwoVisible));
            }
        }
    }

    [DataSourceProperty]
    public string BrushThree
    {
        get => _brushThree;
        set
        {
            if (SetField(ref _brushThree, value, nameof(BrushThree)))
            {
                OnPropertyChanged(nameof(IsBrushThreeVisible));
            }
        }
    }

    [DataSourceProperty]
    public bool IsBrushOneVisible => !string.IsNullOrEmpty(BrushOne);

    [DataSourceProperty]
    public bool IsBrushTwoVisible => !string.IsNullOrEmpty(BrushTwo);

    [DataSourceProperty]
    public bool IsBrushThreeVisible => !string.IsNullOrEmpty(BrushThree);
}

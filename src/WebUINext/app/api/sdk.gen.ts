// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Composable, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import { getActivityLogsResponseTransformer, getBattlesByBattleIdFighterApplicationsResponseTransformer, getBattlesByBattleIdFightersResponseTransformer, getBattlesByBattleIdResponseTransformer, getBattlesResponseTransformer, getClansByClanIdArmoryResponseTransformer, getGamesTournamentUsersResponseTransformer, getGamesUsersResponseTransformer, getItemsResponseTransformer, getItemsUpgradesByBaseIdResponseTransformer, getPartiesSelfUpdateResponseTransformer, getPatchNotesResponseTransformer, getRestrictionsResponseTransformer, getSettlementsBySettlementIdItemsResponseTransformer, getSettlementsBySettlementIdResponseTransformer, getSettlementsBySettlementIdShopItemsResponseTransformer, getSettlementsResponseTransformer, getTerrainsResponseTransformer, getUsersByIdRestrictionsResponseTransformer, getUsersByUserIdResponseTransformer, getUsersResponseTransformer, getUsersSearchResponseTransformer, getUsersSelfCharactersByIdEarningStatisticsResponseTransformer, getUsersSelfCharactersByIdItemsResponseTransformer, getUsersSelfCharactersByIdLimitationsResponseTransformer, getUsersSelfItemsResponseTransformer, getUsersSelfNotificationsResponseTransformer, getUsersSelfRestrictionResponseTransformer, postBattlesByBattleIdFightersResponseTransformer, postGamesRestrictionsResponseTransformer, postPartiesResponseTransformer, postPartiesSelfItemsResponseTransformer, postSettlementsBySettlementIdItemsResponseTransformer, postSettlementsBySettlementIdResponseTransformer, postTerrainsResponseTransformer, postUsersSelfItemsResponseTransformer, putBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponseTransformer, putGamesUsersResponseTransformer, putPartiesSelfStatusResponseTransformer, putTerrainsByIdResponseTransformer, putUsersByUserIdNoteResponseTransformer, putUsersSelfCharactersByIdItemsResponseTransformer, putUsersSelfItemsByIdReforgeResponseTransformer, putUsersSelfItemsByIdRepairResponseTransformer, putUsersSelfItemsByIdUpgradeResponseTransformer, putUsersSelfNotificationsByIdResponseTransformer } from './transformers.gen';
import type { DeleteClansByClanIdArmoryByUserItemIdData, DeleteClansByClanIdArmoryByUserItemIdResponse, DeleteClansByClanIdMembersByUserIdData, DeleteClansByClanIdMembersByUserIdResponse, DeleteTerrainsByIdData, DeleteUsersSelfCharactersByIdData, DeleteUsersSelfCharactersByIdResponse, DeleteUsersSelfData, DeleteUsersSelfItemsByIdData, DeleteUsersSelfItemsByIdResponse, DeleteUsersSelfNotificationsByIdData, DeleteUsersSelfNotificationsByIdResponse, DeleteUsersSelfNotificationsDeleteAllData, DeleteUsersSelfNotificationsDeleteAllResponse, DeleteUsersSelfResponse, GetActivityLogsData, GetActivityLogsResponse, GetBattlesByBattleIdData, GetBattlesByBattleIdFighterApplicationsData, GetBattlesByBattleIdFighterApplicationsResponse, GetBattlesByBattleIdFightersData, GetBattlesByBattleIdFightersResponse, GetBattlesByBattleIdMercenariesData, GetBattlesByBattleIdMercenariesResponse, GetBattlesByBattleIdMercenaryApplicationsData, GetBattlesByBattleIdMercenaryApplicationsResponse, GetBattlesByBattleIdResponse, GetBattlesData, GetBattlesResponse, GetClansByClanIdArmoryData, GetClansByClanIdArmoryResponse, GetClansByClanIdInvitationsData, GetClansByClanIdInvitationsResponse, GetClansByIdData, GetClansByIdMembersData, GetClansByIdMembersResponse, GetClansByIdResponse, GetClansData, GetClansResponse, GetConnectAuthorizeData, GetConnectCallbackEpicGamesData, GetConnectCallbackMicrosoftData, GetConnectLogoutData, GetGamesClansByIdData, GetGamesClansByIdResponse, GetGameServerStatisticsData, GetGameServerStatisticsResponse, GetGamesTournamentUsersData, GetGamesTournamentUsersResponse, GetGamesUsersData, GetGamesUsersResponse, GetItemsData, GetItemsResponse, GetItemsUpgradesByBaseIdData, GetItemsUpgradesByBaseIdResponse, GetLeaderboardLeaderboardData, GetLeaderboardLeaderboardResponse, GetPartiesSelfUpdateData, GetPartiesSelfUpdateResponse, GetPatchNotesData, GetPatchNotesResponse, GetRestrictionsData, GetRestrictionsResponse, GetSettingsData, GetSettingsResponse, GetSettlementsBySettlementIdData, GetSettlementsBySettlementIdItemsData, GetSettlementsBySettlementIdItemsResponse, GetSettlementsBySettlementIdResponse, GetSettlementsBySettlementIdShopItemsData, GetSettlementsBySettlementIdShopItemsResponse, GetSettlementsData, GetSettlementsResponse, GetTerrainsData, GetTerrainsResponse, GetUsersByIdRestrictionsData, GetUsersByIdRestrictionsResponse, GetUsersByUserIdCharactersData, GetUsersByUserIdCharactersResponse, GetUsersByUserIdData, GetUsersByUserIdResponse, GetUsersData, GetUsersResponse, GetUsersRewardRecentData, GetUsersSearchData, GetUsersSearchResponse, GetUsersSelfCharactersByIdCharacteristicsData, GetUsersSelfCharactersByIdCharacteristicsResponse, GetUsersSelfCharactersByIdData, GetUsersSelfCharactersByIdEarningStatisticsData, GetUsersSelfCharactersByIdEarningStatisticsResponse, GetUsersSelfCharactersByIdItemsData, GetUsersSelfCharactersByIdItemsResponse, GetUsersSelfCharactersByIdLimitationsData, GetUsersSelfCharactersByIdLimitationsResponse, GetUsersSelfCharactersByIdResponse, GetUsersSelfCharactersByIdStatisticsData, GetUsersSelfCharactersByIdStatisticsResponse, GetUsersSelfCharactersData, GetUsersSelfCharactersResponse, GetUsersSelfClanData, GetUsersSelfClanResponse, GetUsersSelfData, GetUsersSelfItemsData, GetUsersSelfItemsResponse, GetUsersSelfNotificationsData, GetUsersSelfNotificationsResponse, GetUsersSelfResponse, GetUsersSelfRestrictionData, GetUsersSelfRestrictionResponse, PatchSettingsData, PatchSettingsResponse, PostBattlesByBattleIdFightersData, PostBattlesByBattleIdFightersResponse, PostBattlesByBattleIdMercenaryApplicationsData, PostBattlesByBattleIdMercenaryApplicationsResponse, PostClansByClanIdArmoryData, PostClansByClanIdArmoryResponse, PostClansByClanIdInvitationsData, PostClansByClanIdInvitationsResponse, PostClansData, PostClansResponse, PostConnectAuthorizeData, PostConnectTokenData, PostGamesActivityLogsData, PostGamesRestrictionsData, PostGamesRestrictionsResponse, PostItemsByIdRefundData, PostPartiesData, PostPartiesResponse, PostPartiesSelfItemsData, PostPartiesSelfItemsResponse, PostRestrictionsData, PostRestrictionsResponse, PostSettlementsBySettlementIdData, PostSettlementsBySettlementIdItemsData, PostSettlementsBySettlementIdItemsResponse, PostSettlementsBySettlementIdResponse, PostTerrainsData, PostTerrainsResponse, PostUsersSelfItemsData, PostUsersSelfItemsResponse, PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseData, PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponse, PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseData, PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponse, PutClansByClanIdArmoryByUserItemIdBorrowData, PutClansByClanIdArmoryByUserItemIdBorrowResponse, PutClansByClanIdArmoryByUserItemIdReturnData, PutClansByClanIdData, PutClansByClanIdInvitationsByInvitationIdResponseData, PutClansByClanIdInvitationsByInvitationIdResponseResponse, PutClansByClanIdMembersByUserIdData, PutClansByClanIdMembersByUserIdResponse, PutClansByClanIdResponse, PutGamesUsersData, PutGamesUsersResponse, PutItemsByIdEnableData, PutItemsByIdEnableResponse, PutPartiesSelfStatusData, PutPartiesSelfStatusResponse, PutTerrainsByIdData, PutTerrainsByIdResponse, PutUsersByIdRewardsData, PutUsersByIdRewardsResponse, PutUsersByUserIdCharactersByCharacterIdRewardsData, PutUsersByUserIdCharactersByCharacterIdRewardsResponse, PutUsersByUserIdCharactersByIdRetireData, PutUsersByUserIdCharactersByIdRetireResponse, PutUsersByUserIdNoteData, PutUsersByUserIdNoteResponse, PutUsersCharactersCompetitiveRatingsData, PutUsersCharactersRespecializeData, PutUsersSelfCharactersByIdActiveData, PutUsersSelfCharactersByIdActiveResponse, PutUsersSelfCharactersByIdCharacteristicsConvertData, PutUsersSelfCharactersByIdCharacteristicsConvertResponse, PutUsersSelfCharactersByIdCharacteristicsData, PutUsersSelfCharactersByIdCharacteristicsResponse, PutUsersSelfCharactersByIdData, PutUsersSelfCharactersByIdItemsData, PutUsersSelfCharactersByIdItemsResponse, PutUsersSelfCharactersByIdRespecializeData, PutUsersSelfCharactersByIdRespecializeResponse, PutUsersSelfCharactersByIdResponse, PutUsersSelfCharactersByIdRetireData, PutUsersSelfCharactersByIdRetireResponse, PutUsersSelfCharactersByIdTournamentData, PutUsersSelfCharactersByIdTournamentResponse, PutUsersSelfData, PutUsersSelfItemsByIdReforgeData, PutUsersSelfItemsByIdReforgeResponse, PutUsersSelfItemsByIdRepairData, PutUsersSelfItemsByIdRepairResponse, PutUsersSelfItemsByIdUpgradeData, PutUsersSelfItemsByIdUpgradeResponse, PutUsersSelfNotificationsByIdData, PutUsersSelfNotificationsByIdResponse, PutUsersSelfNotificationsReadAllData, PutUsersSelfNotificationsReadAllResponse, PutUsersSelfResponse } from './types.gen';

export type Options<TComposable extends Composable = '$fetch', TData extends TDataShape = TDataShape, ResT = unknown, DefaultT = undefined> = Options2<TComposable, TData, ResT, DefaultT> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get activity logs. The result is limited too 1000 logs.
 */
export const getActivityLogs = <TComposable extends Composable = '$fetch', DefaultT extends GetActivityLogsResponse = GetActivityLogsResponse>(options: Options<TComposable, GetActivityLogsData, GetActivityLogsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetActivityLogsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getActivityLogsResponseTransformer,
        url: '/activity-logs',
        ...options
    });
};

/**
 * Get strategus battles.
 */
export const getBattles = <TComposable extends Composable = '$fetch', DefaultT extends GetBattlesResponse = GetBattlesResponse>(options: Options<TComposable, GetBattlesData, GetBattlesResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetBattlesResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getBattlesResponseTransformer,
        url: '/Battles',
        ...options
    });
};

/**
 * Get strategus battle.
 */
export const getBattlesByBattleId = <TComposable extends Composable = '$fetch', DefaultT extends GetBattlesByBattleIdResponse = GetBattlesByBattleIdResponse>(options: Options<TComposable, GetBattlesByBattleIdData, GetBattlesByBattleIdResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetBattlesByBattleIdResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getBattlesByBattleIdResponseTransformer,
        url: '/Battles/{battleId}',
        ...options
    });
};

/**
 * Get battle fighters.
 */
export const getBattlesByBattleIdFighters = <TComposable extends Composable = '$fetch', DefaultT extends GetBattlesByBattleIdFightersResponse = GetBattlesByBattleIdFightersResponse>(options: Options<TComposable, GetBattlesByBattleIdFightersData, GetBattlesByBattleIdFightersResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetBattlesByBattleIdFightersResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getBattlesByBattleIdFightersResponseTransformer,
        url: '/Battles/{battleId}/fighters',
        ...options
    });
};

/**
 * Apply as a fighter to a battle.
 */
export const postBattlesByBattleIdFighters = <TComposable extends Composable = '$fetch', DefaultT extends PostBattlesByBattleIdFightersResponse = PostBattlesByBattleIdFightersResponse>(options: Options<TComposable, PostBattlesByBattleIdFightersData, PostBattlesByBattleIdFightersResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostBattlesByBattleIdFightersResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: postBattlesByBattleIdFightersResponseTransformer,
        url: '/Battles/{battleId}/fighters',
        ...options
    });
};

/**
 * Get battle fighter applications.
 */
export const getBattlesByBattleIdFighterApplications = <TComposable extends Composable = '$fetch', DefaultT extends GetBattlesByBattleIdFighterApplicationsResponse = GetBattlesByBattleIdFighterApplicationsResponse>(options: Options<TComposable, GetBattlesByBattleIdFighterApplicationsData, GetBattlesByBattleIdFighterApplicationsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetBattlesByBattleIdFighterApplicationsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getBattlesByBattleIdFighterApplicationsResponseTransformer,
        url: '/Battles/{battleId}/fighter-applications',
        ...options
    });
};

/**
 * Accept/Decline battle fighter application.
 */
export const putBattlesByBattleIdFighterApplicationsByApplicationIdResponse = <TComposable extends Composable = '$fetch', DefaultT extends PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponse = PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponse>(options: Options<TComposable, PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseData, PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: putBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponseTransformer,
        url: '/Battles/{battleId}/fighter-applications/{applicationId}/response',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get battle mercenaries.
 */
export const getBattlesByBattleIdMercenaries = <TComposable extends Composable = '$fetch', DefaultT extends GetBattlesByBattleIdMercenariesResponse = GetBattlesByBattleIdMercenariesResponse>(options: Options<TComposable, GetBattlesByBattleIdMercenariesData, GetBattlesByBattleIdMercenariesResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetBattlesByBattleIdMercenariesResponse | DefaultT, unknown, DefaultT>({
        url: '/Battles/{battleId}/mercenaries',
        ...options
    });
};

/**
 * Get battle mercenary applications.
 */
export const getBattlesByBattleIdMercenaryApplications = <TComposable extends Composable = '$fetch', DefaultT extends GetBattlesByBattleIdMercenaryApplicationsResponse = GetBattlesByBattleIdMercenaryApplicationsResponse>(options: Options<TComposable, GetBattlesByBattleIdMercenaryApplicationsData, GetBattlesByBattleIdMercenaryApplicationsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetBattlesByBattleIdMercenaryApplicationsResponse | DefaultT, unknown, DefaultT>({
        url: '/Battles/{battleId}/mercenary-applications',
        ...options
    });
};

/**
 * Apply as a mercenary to a battle.
 */
export const postBattlesByBattleIdMercenaryApplications = <TComposable extends Composable = '$fetch', DefaultT extends PostBattlesByBattleIdMercenaryApplicationsResponse = PostBattlesByBattleIdMercenaryApplicationsResponse>(options: Options<TComposable, PostBattlesByBattleIdMercenaryApplicationsData, PostBattlesByBattleIdMercenaryApplicationsResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostBattlesByBattleIdMercenaryApplicationsResponse | DefaultT, unknown, DefaultT>({
        url: '/Battles/{battleId}/mercenary-applications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Accept/Decline battle mercenary application.
 */
export const putBattlesByBattleIdMercenaryApplicationsByApplicationIdResponse = <TComposable extends Composable = '$fetch', DefaultT extends PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponse = PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponse>(options: Options<TComposable, PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseData, PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponse | DefaultT, unknown, DefaultT>({
        url: '/Battles/{battleId}/mercenary-applications/{applicationId}/response',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets a clan from its id.
 */
export const getClansById = <TComposable extends Composable = '$fetch', DefaultT extends GetClansByIdResponse = GetClansByIdResponse>(options: Options<TComposable, GetClansByIdData, GetClansByIdResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetClansByIdResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans/{id}',
        ...options
    });
};

/**
 * Gets the members of a clan.
 */
export const getClansByIdMembers = <TComposable extends Composable = '$fetch', DefaultT extends GetClansByIdMembersResponse = GetClansByIdMembersResponse>(options: Options<TComposable, GetClansByIdMembersData, GetClansByIdMembersResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetClansByIdMembersResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans/{id}/members',
        ...options
    });
};

/**
 * Kick a clan member of leave a clan.
 */
export const deleteClansByClanIdMembersByUserId = <TComposable extends Composable = '$fetch', DefaultT extends DeleteClansByClanIdMembersByUserIdResponse = DeleteClansByClanIdMembersByUserIdResponse>(options: Options<TComposable, DeleteClansByClanIdMembersByUserIdData, DeleteClansByClanIdMembersByUserIdResponse, DefaultT>) => {
    return (options.client ?? client).delete<TComposable, DeleteClansByClanIdMembersByUserIdResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans/{clanId}/members/{userId}',
        ...options
    });
};

/**
 * Update a clan member.
 */
export const putClansByClanIdMembersByUserId = <TComposable extends Composable = '$fetch', DefaultT extends PutClansByClanIdMembersByUserIdResponse = PutClansByClanIdMembersByUserIdResponse>(options: Options<TComposable, PutClansByClanIdMembersByUserIdData, PutClansByClanIdMembersByUserIdResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutClansByClanIdMembersByUserIdResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans/{clanId}/members/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets all clans.
 */
export const getClans = <TComposable extends Composable = '$fetch', DefaultT extends GetClansResponse = GetClansResponse>(options: Options<TComposable, GetClansData, GetClansResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetClansResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans',
        ...options
    });
};

/**
 * Creates a clan.
 */
export const postClans = <TComposable extends Composable = '$fetch', DefaultT extends PostClansResponse = PostClansResponse>(options: Options<TComposable, PostClansData, PostClansResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostClansResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Updates a clan.
 */
export const putClansByClanId = <TComposable extends Composable = '$fetch', DefaultT extends PutClansByClanIdResponse = PutClansByClanIdResponse>(options: Options<TComposable, PutClansByClanIdData, PutClansByClanIdResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutClansByClanIdResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans/{clanId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get users invited to the clan or users requesting to join the clan.
 */
export const getClansByClanIdInvitations = <TComposable extends Composable = '$fetch', DefaultT extends GetClansByClanIdInvitationsResponse = GetClansByClanIdInvitationsResponse>(options: Options<TComposable, GetClansByClanIdInvitationsData, GetClansByClanIdInvitationsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetClansByClanIdInvitationsResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans/{clanId}/invitations',
        ...options
    });
};

/**
 * Invite user to clan or request to join a clan.
 */
export const postClansByClanIdInvitations = <TComposable extends Composable = '$fetch', DefaultT extends PostClansByClanIdInvitationsResponse = PostClansByClanIdInvitationsResponse>(options: Options<TComposable, PostClansByClanIdInvitationsData, PostClansByClanIdInvitationsResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostClansByClanIdInvitationsResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans/{clanId}/invitations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Accept/Decline request/offer to join a clan.
 */
export const putClansByClanIdInvitationsByInvitationIdResponse = <TComposable extends Composable = '$fetch', DefaultT extends PutClansByClanIdInvitationsByInvitationIdResponseResponse = PutClansByClanIdInvitationsByInvitationIdResponseResponse>(options: Options<TComposable, PutClansByClanIdInvitationsByInvitationIdResponseData, PutClansByClanIdInvitationsByInvitationIdResponseResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutClansByClanIdInvitationsByInvitationIdResponseResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans/{clanId}/invitations/{invitationId}/response',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets the armory items.
 */
export const getClansByClanIdArmory = <TComposable extends Composable = '$fetch', DefaultT extends GetClansByClanIdArmoryResponse = GetClansByClanIdArmoryResponse>(options: Options<TComposable, GetClansByClanIdArmoryData, GetClansByClanIdArmoryResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetClansByClanIdArmoryResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getClansByClanIdArmoryResponseTransformer,
        url: '/Clans/{clanId}/armory',
        ...options
    });
};

/**
 * Add an item to the armory.
 */
export const postClansByClanIdArmory = <TComposable extends Composable = '$fetch', DefaultT extends PostClansByClanIdArmoryResponse = PostClansByClanIdArmoryResponse>(options: Options<TComposable, PostClansByClanIdArmoryData, PostClansByClanIdArmoryResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostClansByClanIdArmoryResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans/{clanId}/armory',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove an item from the armory.
 */
export const deleteClansByClanIdArmoryByUserItemId = <TComposable extends Composable = '$fetch', DefaultT extends DeleteClansByClanIdArmoryByUserItemIdResponse = DeleteClansByClanIdArmoryByUserItemIdResponse>(options: Options<TComposable, DeleteClansByClanIdArmoryByUserItemIdData, DeleteClansByClanIdArmoryByUserItemIdResponse, DefaultT>) => {
    return (options.client ?? client).delete<TComposable, DeleteClansByClanIdArmoryByUserItemIdResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans/{clanId}/armory/{userItemId}',
        ...options
    });
};

/**
 * Borrow an item from the armory.
 */
export const putClansByClanIdArmoryByUserItemIdBorrow = <TComposable extends Composable = '$fetch', DefaultT extends PutClansByClanIdArmoryByUserItemIdBorrowResponse = PutClansByClanIdArmoryByUserItemIdBorrowResponse>(options: Options<TComposable, PutClansByClanIdArmoryByUserItemIdBorrowData, PutClansByClanIdArmoryByUserItemIdBorrowResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutClansByClanIdArmoryByUserItemIdBorrowResponse | DefaultT, unknown, DefaultT>({
        url: '/Clans/{clanId}/armory/{userItemId}/borrow',
        ...options
    });
};

/**
 * Return an item to the armory.
 */
export const putClansByClanIdArmoryByUserItemIdReturn = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PutClansByClanIdArmoryByUserItemIdReturnData, unknown, DefaultT>) => {
    return (options.client ?? client).put<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/Clans/{clanId}/armory/{userItemId}/return',
        ...options
    });
};

export const getConnectAuthorize = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, GetConnectAuthorizeData, unknown, DefaultT>) => {
    return (options.client ?? client).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/Connect/authorize',
        ...options
    });
};

export const postConnectAuthorize = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PostConnectAuthorizeData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/Connect/authorize',
        ...options
    });
};

export const postConnectToken = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PostConnectTokenData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/Connect/token',
        ...options
    });
};

export const getConnectCallbackEpicGames = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, GetConnectCallbackEpicGamesData, unknown, DefaultT>) => {
    return (options.client ?? client).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/Connect/callback-epic-games',
        ...options
    });
};

export const getConnectCallbackMicrosoft = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, GetConnectCallbackMicrosoftData, unknown, DefaultT>) => {
    return (options.client ?? client).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/Connect/callback-microsoft',
        ...options
    });
};

export const getConnectLogout = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, GetConnectLogoutData, unknown, DefaultT>) => {
    return (options.client ?? client).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/Connect/logout',
        ...options
    });
};

export const getGameServerStatistics = <TComposable extends Composable = '$fetch', DefaultT extends GetGameServerStatisticsResponse = GetGameServerStatisticsResponse>(options: Options<TComposable, GetGameServerStatisticsData, GetGameServerStatisticsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetGameServerStatisticsResponse | DefaultT, unknown, DefaultT>({
        url: '/game-server-statistics',
        ...options
    });
};

/**
 * Get or create user.
 */
export const getGamesUsers = <TComposable extends Composable = '$fetch', DefaultT extends GetGamesUsersResponse = GetGamesUsersResponse>(options: Options<TComposable, GetGamesUsersData, GetGamesUsersResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetGamesUsersResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getGamesUsersResponseTransformer,
        url: '/Games/users',
        ...options
    });
};

/**
 * Give reward to users and break or repair items.
 */
export const putGamesUsers = <TComposable extends Composable = '$fetch', DefaultT extends PutGamesUsersResponse = PutGamesUsersResponse>(options: Options<TComposable, PutGamesUsersData, PutGamesUsersResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutGamesUsersResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: putGamesUsersResponseTransformer,
        url: '/Games/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get tournament user.
 */
export const getGamesTournamentUsers = <TComposable extends Composable = '$fetch', DefaultT extends GetGamesTournamentUsersResponse = GetGamesTournamentUsersResponse>(options: Options<TComposable, GetGamesTournamentUsersData, GetGamesTournamentUsersResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetGamesTournamentUsersResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getGamesTournamentUsersResponseTransformer,
        url: '/Games/tournament-users',
        ...options
    });
};

/**
 * Insert activity logs.
 */
export const postGamesActivityLogs = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PostGamesActivityLogsData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/Games/activity-logs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets a clan from its id.
 */
export const getGamesClansById = <TComposable extends Composable = '$fetch', DefaultT extends GetGamesClansByIdResponse = GetGamesClansByIdResponse>(options: Options<TComposable, GetGamesClansByIdData, GetGamesClansByIdResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetGamesClansByIdResponse | DefaultT, unknown, DefaultT>({
        url: '/Games/clans/{id}',
        ...options
    });
};

export const postGamesRestrictions = <TComposable extends Composable = '$fetch', DefaultT extends PostGamesRestrictionsResponse = PostGamesRestrictionsResponse>(options: Options<TComposable, PostGamesRestrictionsData, PostGamesRestrictionsResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostGamesRestrictionsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: postGamesRestrictionsResponseTransformer,
        url: '/Games/restrictions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets all enabled items of rank 0.
 */
export const getItems = <TComposable extends Composable = '$fetch', DefaultT extends GetItemsResponse = GetItemsResponse>(options: Options<TComposable, GetItemsData, GetItemsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetItemsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getItemsResponseTransformer,
        url: '/Items',
        ...options
    });
};

export const getItemsUpgradesByBaseId = <TComposable extends Composable = '$fetch', DefaultT extends GetItemsUpgradesByBaseIdResponse = GetItemsUpgradesByBaseIdResponse>(options: Options<TComposable, GetItemsUpgradesByBaseIdData, GetItemsUpgradesByBaseIdResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetItemsUpgradesByBaseIdResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getItemsUpgradesByBaseIdResponseTransformer,
        url: '/Items/upgrades/{baseId}',
        ...options
    });
};

/**
 * Enable/Disable item.
 */
export const putItemsByIdEnable = <TComposable extends Composable = '$fetch', DefaultT extends PutItemsByIdEnableResponse = PutItemsByIdEnableResponse>(options: Options<TComposable, PutItemsByIdEnableData, PutItemsByIdEnableResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutItemsByIdEnableResponse | DefaultT, unknown, DefaultT>({
        url: '/Items/{id}/enable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refund item.
 */
export const postItemsByIdRefund = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PostItemsByIdRefundData, unknown, DefaultT>) => {
    return (options.client ?? client).post<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/Items/{id}/refund',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get top character competitive ratings.
 */
export const getLeaderboardLeaderboard = <TComposable extends Composable = '$fetch', DefaultT extends GetLeaderboardLeaderboardResponse = GetLeaderboardLeaderboardResponse>(options: Options<TComposable, GetLeaderboardLeaderboardData, GetLeaderboardLeaderboardResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetLeaderboardLeaderboardResponse | DefaultT, unknown, DefaultT>({
        url: '/Leaderboard/leaderboard',
        ...options
    });
};

/**
 * Get an update of strategus for the current user.
 */
export const getPartiesSelfUpdate = <TComposable extends Composable = '$fetch', DefaultT extends GetPartiesSelfUpdateResponse = GetPartiesSelfUpdateResponse>(options: Options<TComposable, GetPartiesSelfUpdateData, GetPartiesSelfUpdateResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetPartiesSelfUpdateResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getPartiesSelfUpdateResponseTransformer,
        url: '/Parties/self/update',
        ...options
    });
};

/**
 * Register user to strategus.
 */
export const postParties = <TComposable extends Composable = '$fetch', DefaultT extends PostPartiesResponse = PostPartiesResponse>(options: Options<TComposable, PostPartiesData, PostPartiesResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostPartiesResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: postPartiesResponseTransformer,
        url: '/Parties',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update strategus party status.
 */
export const putPartiesSelfStatus = <TComposable extends Composable = '$fetch', DefaultT extends PutPartiesSelfStatusResponse = PutPartiesSelfStatusResponse>(options: Options<TComposable, PutPartiesSelfStatusData, PutPartiesSelfStatusResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutPartiesSelfStatusResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: putPartiesSelfStatusResponseTransformer,
        url: '/Parties/self/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Buy items from a settlement.
 */
export const postPartiesSelfItems = <TComposable extends Composable = '$fetch', DefaultT extends PostPartiesSelfItemsResponse = PostPartiesSelfItemsResponse>(options: Options<TComposable, PostPartiesSelfItemsData, PostPartiesSelfItemsResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostPartiesSelfItemsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: postPartiesSelfItemsResponseTransformer,
        url: '/Parties/self/items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getPatchNotes = <TComposable extends Composable = '$fetch', DefaultT extends GetPatchNotesResponse = GetPatchNotesResponse>(options: Options<TComposable, GetPatchNotesData, GetPatchNotesResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetPatchNotesResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getPatchNotesResponseTransformer,
        url: '/patch-notes',
        ...options
    });
};

/**
 * Get all restrictions.
 */
export const getRestrictions = <TComposable extends Composable = '$fetch', DefaultT extends GetRestrictionsResponse = GetRestrictionsResponse>(options: Options<TComposable, GetRestrictionsData, GetRestrictionsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetRestrictionsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getRestrictionsResponseTransformer,
        url: '/Restrictions',
        ...options
    });
};

/**
 * Restrict a user. If a restriction of the same type already exists for the user, it is overriden. Use a duration
 * of 0 to un-restrict.
 */
export const postRestrictions = <TComposable extends Composable = '$fetch', DefaultT extends PostRestrictionsResponse = PostRestrictionsResponse>(options: Options<TComposable, PostRestrictionsData, PostRestrictionsResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostRestrictionsResponse | DefaultT, unknown, DefaultT>({
        url: '/Restrictions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get settings.
 */
export const getSettings = <TComposable extends Composable = '$fetch', DefaultT extends GetSettingsResponse = GetSettingsResponse>(options: Options<TComposable, GetSettingsData, GetSettingsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetSettingsResponse | DefaultT, unknown, DefaultT>({
        url: '/Settings',
        ...options
    });
};

/**
 * Edit setting.
 */
export const patchSettings = <TComposable extends Composable = '$fetch', DefaultT extends PatchSettingsResponse = PatchSettingsResponse>(options: Options<TComposable, PatchSettingsData, PatchSettingsResponse, DefaultT>) => {
    return (options.client ?? client).patch<TComposable, PatchSettingsResponse | DefaultT, unknown, DefaultT>({
        url: '/Settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Strategus settlements.
 */
export const getSettlements = <TComposable extends Composable = '$fetch', DefaultT extends GetSettlementsResponse = GetSettlementsResponse>(options: Options<TComposable, GetSettlementsData, GetSettlementsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetSettlementsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getSettlementsResponseTransformer,
        url: '/Settlements',
        ...options
    });
};

/**
 * Get settlement details by Id.
 */
export const getSettlementsBySettlementId = <TComposable extends Composable = '$fetch', DefaultT extends GetSettlementsBySettlementIdResponse = GetSettlementsBySettlementIdResponse>(options: Options<TComposable, GetSettlementsBySettlementIdData, GetSettlementsBySettlementIdResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetSettlementsBySettlementIdResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getSettlementsBySettlementIdResponseTransformer,
        url: '/Settlements/{settlementId}',
        ...options
    });
};

/**
 * Give (position count) or take (negative count) garrison troops from a settlement.
 */
export const postSettlementsBySettlementId = <TComposable extends Composable = '$fetch', DefaultT extends PostSettlementsBySettlementIdResponse = PostSettlementsBySettlementIdResponse>(options: Options<TComposable, PostSettlementsBySettlementIdData, PostSettlementsBySettlementIdResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostSettlementsBySettlementIdResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: postSettlementsBySettlementIdResponseTransformer,
        url: '/Settlements/{settlementId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get garrison items from a settlement.
 */
export const getSettlementsBySettlementIdItems = <TComposable extends Composable = '$fetch', DefaultT extends GetSettlementsBySettlementIdItemsResponse = GetSettlementsBySettlementIdItemsResponse>(options: Options<TComposable, GetSettlementsBySettlementIdItemsData, GetSettlementsBySettlementIdItemsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetSettlementsBySettlementIdItemsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getSettlementsBySettlementIdItemsResponseTransformer,
        url: '/Settlements/{settlementId}/items',
        ...options
    });
};

/**
 * Give (position count) or take (negative count) garrison items from a settlement.
 */
export const postSettlementsBySettlementIdItems = <TComposable extends Composable = '$fetch', DefaultT extends PostSettlementsBySettlementIdItemsResponse = PostSettlementsBySettlementIdItemsResponse>(options: Options<TComposable, PostSettlementsBySettlementIdItemsData, PostSettlementsBySettlementIdItemsResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostSettlementsBySettlementIdItemsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: postSettlementsBySettlementIdItemsResponseTransformer,
        url: '/Settlements/{settlementId}/items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get strategus settlement shop items.
 */
export const getSettlementsBySettlementIdShopItems = <TComposable extends Composable = '$fetch', DefaultT extends GetSettlementsBySettlementIdShopItemsResponse = GetSettlementsBySettlementIdShopItemsResponse>(options: Options<TComposable, GetSettlementsBySettlementIdShopItemsData, GetSettlementsBySettlementIdShopItemsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetSettlementsBySettlementIdShopItemsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getSettlementsBySettlementIdShopItemsResponseTransformer,
        url: '/Settlements/{settlementId}/shop/items',
        ...options
    });
};

/**
 * Get Strategus map terrains.
 */
export const getTerrains = <TComposable extends Composable = '$fetch', DefaultT extends GetTerrainsResponse = GetTerrainsResponse>(options: Options<TComposable, GetTerrainsData, GetTerrainsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetTerrainsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getTerrainsResponseTransformer,
        url: '/Terrains',
        ...options
    });
};

/**
 * Create terrain.
 */
export const postTerrains = <TComposable extends Composable = '$fetch', DefaultT extends PostTerrainsResponse = PostTerrainsResponse>(options: Options<TComposable, PostTerrainsData, PostTerrainsResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostTerrainsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: postTerrainsResponseTransformer,
        url: '/Terrains',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete terrain by Id.
 */
export const deleteTerrainsById = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, DeleteTerrainsByIdData, unknown, DefaultT>) => {
    return (options.client ?? client).delete<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/Terrains/{id}',
        ...options
    });
};

/**
 * Update terrain.
 */
export const putTerrainsById = <TComposable extends Composable = '$fetch', DefaultT extends PutTerrainsByIdResponse = PutTerrainsByIdResponse>(options: Options<TComposable, PutTerrainsByIdData, PutTerrainsByIdResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutTerrainsByIdResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: putTerrainsByIdResponseTransformer,
        url: '/Terrains/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Search user. name or the pair (platform, platformUserId)
 * should be not null.
 */
export const getUsersSearch = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSearchResponse = GetUsersSearchResponse>(options: Options<TComposable, GetUsersSearchData, GetUsersSearchResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSearchResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getUsersSearchResponseTransformer,
        url: '/Users/search',
        ...options
    });
};

/**
 * Deletes current user.
 */
export const deleteUsersSelf = <TComposable extends Composable = '$fetch', DefaultT extends DeleteUsersSelfResponse = DeleteUsersSelfResponse>(options: Options<TComposable, DeleteUsersSelfData, DeleteUsersSelfResponse, DefaultT>) => {
    return (options.client ?? client).delete<TComposable, DeleteUsersSelfResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self',
        ...options
    });
};

/**
 * Gets current user information.
 */
export const getUsersSelf = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSelfResponse = GetUsersSelfResponse>(options: Options<TComposable, GetUsersSelfData, GetUsersSelfResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSelfResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self',
        ...options
    });
};

/**
 * Update the current user.
 */
export const putUsersSelf = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfResponse = PutUsersSelfResponse>(options: Options<TComposable, PutUsersSelfData, PutUsersSelfResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get user by id.
 */
export const getUsersByUserId = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersByUserIdResponse = GetUsersByUserIdResponse>(options: Options<TComposable, GetUsersByUserIdData, GetUsersByUserIdResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersByUserIdResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getUsersByUserIdResponseTransformer,
        url: '/Users/{userId}',
        ...options
    });
};

/**
 * Update the user note.
 */
export const putUsersByUserIdNote = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersByUserIdNoteResponse = PutUsersByUserIdNoteResponse>(options: Options<TComposable, PutUsersByUserIdNoteData, PutUsersByUserIdNoteResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersByUserIdNoteResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: putUsersByUserIdNoteResponseTransformer,
        url: '/Users/{userId}/note',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets all characters by user id.
 */
export const getUsersByUserIdCharacters = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersByUserIdCharactersResponse = GetUsersByUserIdCharactersResponse>(options: Options<TComposable, GetUsersByUserIdCharactersData, GetUsersByUserIdCharactersResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersByUserIdCharactersResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/{userId}/characters',
        ...options
    });
};

/**
 * Get user by id.
 */
export const getUsers = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersResponse = GetUsersResponse>(options: Options<TComposable, GetUsersData, GetUsersResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getUsersResponseTransformer,
        url: '/Users',
        ...options
    });
};

/**
 * Get all restrictions for a user.
 */
export const getUsersByIdRestrictions = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersByIdRestrictionsResponse = GetUsersByIdRestrictionsResponse>(options: Options<TComposable, GetUsersByIdRestrictionsData, GetUsersByIdRestrictionsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersByIdRestrictionsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getUsersByIdRestrictionsResponseTransformer,
        url: '/Users/{id}/restrictions',
        ...options
    });
};

/**
 * Get active restriction for a user.
 */
export const getUsersSelfRestriction = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSelfRestrictionResponse = GetUsersSelfRestrictionResponse>(options: Options<TComposable, GetUsersSelfRestrictionData, GetUsersSelfRestrictionResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSelfRestrictionResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getUsersSelfRestrictionResponseTransformer,
        url: '/Users/self/restriction',
        ...options
    });
};

/**
 * Reward user.
 */
export const putUsersByIdRewards = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersByIdRewardsResponse = PutUsersByIdRewardsResponse>(options: Options<TComposable, PutUsersByIdRewardsData, PutUsersByIdRewardsResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersByIdRewardsResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/{id}/rewards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Deletes the specified current user's character.
 */
export const deleteUsersSelfCharactersById = <TComposable extends Composable = '$fetch', DefaultT extends DeleteUsersSelfCharactersByIdResponse = DeleteUsersSelfCharactersByIdResponse>(options: Options<TComposable, DeleteUsersSelfCharactersByIdData, DeleteUsersSelfCharactersByIdResponse, DefaultT>) => {
    return (options.client ?? client).delete<TComposable, DeleteUsersSelfCharactersByIdResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/characters/{id}',
        ...options
    });
};

/**
 * Gets the specified current user's character.
 */
export const getUsersSelfCharactersById = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSelfCharactersByIdResponse = GetUsersSelfCharactersByIdResponse>(options: Options<TComposable, GetUsersSelfCharactersByIdData, GetUsersSelfCharactersByIdResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSelfCharactersByIdResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/characters/{id}',
        ...options
    });
};

/**
 * Updates a character for the current user.
 */
export const putUsersSelfCharactersById = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfCharactersByIdResponse = PutUsersSelfCharactersByIdResponse>(options: Options<TComposable, PutUsersSelfCharactersByIdData, PutUsersSelfCharactersByIdResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfCharactersByIdResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/characters/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets all current user's characters.
 */
export const getUsersSelfCharacters = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSelfCharactersResponse = GetUsersSelfCharactersResponse>(options: Options<TComposable, GetUsersSelfCharactersData, GetUsersSelfCharactersResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSelfCharactersResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/characters',
        ...options
    });
};

/**
 * Get character characteristics for the current user.
 */
export const getUsersSelfCharactersByIdCharacteristics = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSelfCharactersByIdCharacteristicsResponse = GetUsersSelfCharactersByIdCharacteristicsResponse>(options: Options<TComposable, GetUsersSelfCharactersByIdCharacteristicsData, GetUsersSelfCharactersByIdCharacteristicsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSelfCharactersByIdCharacteristicsResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/characters/{id}/characteristics',
        ...options
    });
};

/**
 * Updates character characteristics for the current user.
 */
export const putUsersSelfCharactersByIdCharacteristics = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfCharactersByIdCharacteristicsResponse = PutUsersSelfCharactersByIdCharacteristicsResponse>(options: Options<TComposable, PutUsersSelfCharactersByIdCharacteristicsData, PutUsersSelfCharactersByIdCharacteristicsResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfCharactersByIdCharacteristicsResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/characters/{id}/characteristics',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Updates every character competitive rating.
 */
export const putUsersCharactersCompetitiveRatings = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PutUsersCharactersCompetitiveRatingsData, unknown, DefaultT>) => {
    return (options.client ?? client).put<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/Users/characters/competitive-ratings',
        ...options
    });
};

/**
 * Respecializes every character.
 */
export const putUsersCharactersRespecialize = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, PutUsersCharactersRespecializeData, unknown, DefaultT>) => {
    return (options.client ?? client).put<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/Users/characters/respecialize',
        ...options
    });
};

/**
 * Convert character characteristics for the current user.
 */
export const putUsersSelfCharactersByIdCharacteristicsConvert = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfCharactersByIdCharacteristicsConvertResponse = PutUsersSelfCharactersByIdCharacteristicsConvertResponse>(options: Options<TComposable, PutUsersSelfCharactersByIdCharacteristicsConvertData, PutUsersSelfCharactersByIdCharacteristicsConvertResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfCharactersByIdCharacteristicsConvertResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/characters/{id}/characteristics/convert',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get character items for the current user.
 */
export const getUsersSelfCharactersByIdItems = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSelfCharactersByIdItemsResponse = GetUsersSelfCharactersByIdItemsResponse>(options: Options<TComposable, GetUsersSelfCharactersByIdItemsData, GetUsersSelfCharactersByIdItemsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSelfCharactersByIdItemsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getUsersSelfCharactersByIdItemsResponseTransformer,
        url: '/Users/self/characters/{id}/items',
        ...options
    });
};

/**
 * Updates a character's items for the current user.
 */
export const putUsersSelfCharactersByIdItems = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfCharactersByIdItemsResponse = PutUsersSelfCharactersByIdItemsResponse>(options: Options<TComposable, PutUsersSelfCharactersByIdItemsData, PutUsersSelfCharactersByIdItemsResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfCharactersByIdItemsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: putUsersSelfCharactersByIdItemsResponseTransformer,
        url: '/Users/self/characters/{id}/items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Activate/deactivate character.
 */
export const putUsersSelfCharactersByIdActive = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfCharactersByIdActiveResponse = PutUsersSelfCharactersByIdActiveResponse>(options: Options<TComposable, PutUsersSelfCharactersByIdActiveData, PutUsersSelfCharactersByIdActiveResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfCharactersByIdActiveResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/characters/{id}/active',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get character statistics for the current user.
 */
export const getUsersSelfCharactersByIdStatistics = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSelfCharactersByIdStatisticsResponse = GetUsersSelfCharactersByIdStatisticsResponse>(options: Options<TComposable, GetUsersSelfCharactersByIdStatisticsData, GetUsersSelfCharactersByIdStatisticsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSelfCharactersByIdStatisticsResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/characters/{id}/statistics',
        ...options
    });
};

/**
 * Get character exp/gold stats for the current user.
 */
export const getUsersSelfCharactersByIdEarningStatistics = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSelfCharactersByIdEarningStatisticsResponse = GetUsersSelfCharactersByIdEarningStatisticsResponse>(options: Options<TComposable, GetUsersSelfCharactersByIdEarningStatisticsData, GetUsersSelfCharactersByIdEarningStatisticsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSelfCharactersByIdEarningStatisticsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getUsersSelfCharactersByIdEarningStatisticsResponseTransformer,
        url: '/Users/self/characters/{id}/earning-statistics',
        ...options
    });
};

/**
 * Get character limitations for the current user.
 */
export const getUsersSelfCharactersByIdLimitations = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSelfCharactersByIdLimitationsResponse = GetUsersSelfCharactersByIdLimitationsResponse>(options: Options<TComposable, GetUsersSelfCharactersByIdLimitationsData, GetUsersSelfCharactersByIdLimitationsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSelfCharactersByIdLimitationsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getUsersSelfCharactersByIdLimitationsResponseTransformer,
        url: '/Users/self/characters/{id}/limitations',
        ...options
    });
};

/**
 * Resets a character rating.
 */
export const putUsersByUserIdCharactersByIdRetire = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersByUserIdCharactersByIdRetireResponse = PutUsersByUserIdCharactersByIdRetireResponse>(options: Options<TComposable, PutUsersByUserIdCharactersByIdRetireData, PutUsersByUserIdCharactersByIdRetireResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersByUserIdCharactersByIdRetireResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/{userId}/characters/{id}/retire',
        ...options
    });
};

/**
 * Retires character.
 */
export const putUsersSelfCharactersByIdRetire = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfCharactersByIdRetireResponse = PutUsersSelfCharactersByIdRetireResponse>(options: Options<TComposable, PutUsersSelfCharactersByIdRetireData, PutUsersSelfCharactersByIdRetireResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfCharactersByIdRetireResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/characters/{id}/retire',
        ...options
    });
};

/**
 * Respecializes character.
 */
export const putUsersSelfCharactersByIdRespecialize = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfCharactersByIdRespecializeResponse = PutUsersSelfCharactersByIdRespecializeResponse>(options: Options<TComposable, PutUsersSelfCharactersByIdRespecializeData, PutUsersSelfCharactersByIdRespecializeResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfCharactersByIdRespecializeResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/characters/{id}/respecialize',
        ...options
    });
};

/**
 * Set the character as tournament character.
 */
export const putUsersSelfCharactersByIdTournament = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfCharactersByIdTournamentResponse = PutUsersSelfCharactersByIdTournamentResponse>(options: Options<TComposable, PutUsersSelfCharactersByIdTournamentData, PutUsersSelfCharactersByIdTournamentResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfCharactersByIdTournamentResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/characters/{id}/tournament',
        ...options
    });
};

/**
 * Reward character.
 */
export const putUsersByUserIdCharactersByCharacterIdRewards = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersByUserIdCharactersByCharacterIdRewardsResponse = PutUsersByUserIdCharactersByCharacterIdRewardsResponse>(options: Options<TComposable, PutUsersByUserIdCharactersByCharacterIdRewardsData, PutUsersByUserIdCharactersByCharacterIdRewardsResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersByUserIdCharactersByCharacterIdRewardsResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/{userId}/characters/{characterId}/rewards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Gets owned items.
 */
export const getUsersSelfItems = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSelfItemsResponse = GetUsersSelfItemsResponse>(options: Options<TComposable, GetUsersSelfItemsData, GetUsersSelfItemsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSelfItemsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getUsersSelfItemsResponseTransformer,
        url: '/Users/self/items',
        ...options
    });
};

/**
 * Buys item for the current user.
 */
export const postUsersSelfItems = <TComposable extends Composable = '$fetch', DefaultT extends PostUsersSelfItemsResponse = PostUsersSelfItemsResponse>(options: Options<TComposable, PostUsersSelfItemsData, PostUsersSelfItemsResponse, DefaultT>) => {
    return (options.client ?? client).post<TComposable, PostUsersSelfItemsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: postUsersSelfItemsResponseTransformer,
        url: '/Users/self/items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reforge item.
 */
export const putUsersSelfItemsByIdReforge = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfItemsByIdReforgeResponse = PutUsersSelfItemsByIdReforgeResponse>(options: Options<TComposable, PutUsersSelfItemsByIdReforgeData, PutUsersSelfItemsByIdReforgeResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfItemsByIdReforgeResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: putUsersSelfItemsByIdReforgeResponseTransformer,
        url: '/Users/self/items/{id}/reforge',
        ...options
    });
};

/**
 * Repair item.
 */
export const putUsersSelfItemsByIdRepair = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfItemsByIdRepairResponse = PutUsersSelfItemsByIdRepairResponse>(options: Options<TComposable, PutUsersSelfItemsByIdRepairData, PutUsersSelfItemsByIdRepairResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfItemsByIdRepairResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: putUsersSelfItemsByIdRepairResponseTransformer,
        url: '/Users/self/items/{id}/repair',
        ...options
    });
};

/**
 * Upgrade item.
 */
export const putUsersSelfItemsByIdUpgrade = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfItemsByIdUpgradeResponse = PutUsersSelfItemsByIdUpgradeResponse>(options: Options<TComposable, PutUsersSelfItemsByIdUpgradeData, PutUsersSelfItemsByIdUpgradeResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfItemsByIdUpgradeResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: putUsersSelfItemsByIdUpgradeResponseTransformer,
        url: '/Users/self/items/{id}/upgrade',
        ...options
    });
};

/**
 * Sells item for the current user.
 */
export const deleteUsersSelfItemsById = <TComposable extends Composable = '$fetch', DefaultT extends DeleteUsersSelfItemsByIdResponse = DeleteUsersSelfItemsByIdResponse>(options: Options<TComposable, DeleteUsersSelfItemsByIdData, DeleteUsersSelfItemsByIdResponse, DefaultT>) => {
    return (options.client ?? client).delete<TComposable, DeleteUsersSelfItemsByIdResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/items/{id}',
        ...options
    });
};

/**
 * Gets user clan or null.
 */
export const getUsersSelfClan = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSelfClanResponse = GetUsersSelfClanResponse>(options: Options<TComposable, GetUsersSelfClanData, GetUsersSelfClanResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSelfClanResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/clan',
        ...options
    });
};

export const getUsersRewardRecent = <TComposable extends Composable = '$fetch', DefaultT = undefined>(options: Options<TComposable, GetUsersRewardRecentData, unknown, DefaultT>) => {
    return (options.client ?? client).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/users/reward-recent',
        ...options
    });
};

/**
 * Gets user's notifications.
 */
export const getUsersSelfNotifications = <TComposable extends Composable = '$fetch', DefaultT extends GetUsersSelfNotificationsResponse = GetUsersSelfNotificationsResponse>(options: Options<TComposable, GetUsersSelfNotificationsData, GetUsersSelfNotificationsResponse, DefaultT>) => {
    return (options.client ?? client).get<TComposable, GetUsersSelfNotificationsResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: getUsersSelfNotificationsResponseTransformer,
        url: '/Users/self/notifications',
        ...options
    });
};

/**
 * Delete user's notification.
 */
export const deleteUsersSelfNotificationsById = <TComposable extends Composable = '$fetch', DefaultT extends DeleteUsersSelfNotificationsByIdResponse = DeleteUsersSelfNotificationsByIdResponse>(options: Options<TComposable, DeleteUsersSelfNotificationsByIdData, DeleteUsersSelfNotificationsByIdResponse, DefaultT>) => {
    return (options.client ?? client).delete<TComposable, DeleteUsersSelfNotificationsByIdResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/notifications/{id}',
        ...options
    });
};

/**
 * Read user's notification.
 */
export const putUsersSelfNotificationsById = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfNotificationsByIdResponse = PutUsersSelfNotificationsByIdResponse>(options: Options<TComposable, PutUsersSelfNotificationsByIdData, PutUsersSelfNotificationsByIdResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfNotificationsByIdResponse | DefaultT, unknown, DefaultT>({
        responseTransformer: putUsersSelfNotificationsByIdResponseTransformer,
        url: '/Users/self/notifications/{id}',
        ...options
    });
};

/**
 * Read all user's notifications.
 */
export const putUsersSelfNotificationsReadAll = <TComposable extends Composable = '$fetch', DefaultT extends PutUsersSelfNotificationsReadAllResponse = PutUsersSelfNotificationsReadAllResponse>(options: Options<TComposable, PutUsersSelfNotificationsReadAllData, PutUsersSelfNotificationsReadAllResponse, DefaultT>) => {
    return (options.client ?? client).put<TComposable, PutUsersSelfNotificationsReadAllResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/notifications/readAll',
        ...options
    });
};

/**
 * Delete all user's notifications.
 */
export const deleteUsersSelfNotificationsDeleteAll = <TComposable extends Composable = '$fetch', DefaultT extends DeleteUsersSelfNotificationsDeleteAllResponse = DeleteUsersSelfNotificationsDeleteAllResponse>(options: Options<TComposable, DeleteUsersSelfNotificationsDeleteAllData, DeleteUsersSelfNotificationsDeleteAllResponse, DefaultT>) => {
    return (options.client ?? client).delete<TComposable, DeleteUsersSelfNotificationsDeleteAllResponse | DefaultT, unknown, DefaultT>({
        url: '/Users/self/notifications/deleteAll',
        ...options
    });
};

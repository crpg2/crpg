// This file is auto-generated by @hey-api/openapi-ts

export interface ClientOptions {
  baseURL: 'https://localhost:8000' | (string & {})
}

export interface ActivateCharacterCommand {
  active: boolean
}

export interface ActivityLogMetadataEntitiesDictViewModel {
  clans: Array<ClanPublicViewModel>
  users: Array<UserPublicViewModel>
  characters: Array<CharacterPublicViewModel>
}

export type ActivityLogType = 'UserCreated' | 'UserDeleted' | 'UserRenamed' | 'UserRewarded' | 'ItemBought' | 'ItemSold' | 'ItemBroke' | 'ItemReforged' | 'ItemRepaired' | 'ItemUpgraded' | 'ItemReturned' | 'CharacterCreated' | 'CharacterDeleted' | 'CharacterRatingReset' | 'CharacterRespecialized' | 'CharacterRetired' | 'CharacterRewarded' | 'CharacterEarned' | 'ServerJoined' | 'ChatMessageSent' | 'TeamHit' | 'ClanCreated' | 'ClanDeleted' | 'ClanApplicationCreated' | 'ClanApplicationDeclined' | 'ClanApplicationAccepted' | 'ClanMemberKicked' | 'ClanMemberLeaved' | 'ClanMemberRoleEdited' | 'ClanArmoryAddItem' | 'ClanArmoryRemoveItem' | 'ClanArmoryReturnItem' | 'ClanArmoryBorrowItem'

export interface ActivityLogViewModel {
  id: number
  type: ActivityLogType
  userId: number
  metadata: {
    [key: string]: string
  }
  createdAt: Date
}

export interface ActivityLogViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<ActivityLogViewModel> | null
}

export interface ActivityLogWithDictViewModel {
  activityLogs: Array<ActivityLogViewModel>
  dict: ActivityLogMetadataEntitiesDictViewModel
}

export interface ActivityLogWithDictViewModelResult {
  readonly errors: Array<_Error> | null
  data: ActivityLogWithDictViewModel
}

export interface AddItemToClanArmoryCommand {
  userItemId: number
}

export interface AddSettlementItemCommand {
  partyId: number
  settlementId: number
  itemId: string
  count: number
}

export interface ApplyAsMercenaryToBattleCommand {
  userId: number
  characterId: number
  battleId: number
  side: BattleSide
  wage: number
  note: string
}

export type ArmorMaterialType = 'Undefined' | 'Cloth' | 'Leather' | 'Chainmail' | 'Plate'

export interface BattleDetailedViewModel {
  id: number
  region: Region
  position: Point
  phase: BattlePhase
  attacker: BattleFighterViewModel
  attackerTotalTroops: number
  defender: BattleFighterViewModel
  defenderTotalTroops: number
  createdAt: Date
}

export interface BattleDetailedViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<BattleDetailedViewModel> | null
}

export type BattleFighterApplicationStatus = 'Pending' | 'Declined' | 'Accepted'

export interface BattleFighterApplicationViewModel {
  id: number
  party: PartyVisibleViewModel
  side: BattleSide
  status: BattleFighterApplicationStatus
}

export interface BattleFighterApplicationViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<BattleFighterApplicationViewModel> | null
}

export interface BattleFighterApplicationViewModelResult {
  readonly errors: Array<_Error> | null
  data: BattleFighterApplicationViewModel
}

export interface BattleFighterViewModel {
  id: number
  party: PartyPublicViewModel
  settlement: SettlementPublicViewModel
  side: BattleSide
  commander: boolean
}

export interface BattleFighterViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<BattleFighterViewModel> | null
}

export type BattleMercenaryApplicationStatus = 'Pending' | 'Declined' | 'Accepted'

export interface BattleMercenaryApplicationViewModel {
  id: number
  user: UserPublicViewModel
  character: CharacterPublicViewModel
  side: BattleSide
  wage: number
  note: string
  status: BattleMercenaryApplicationStatus
}

export interface BattleMercenaryApplicationViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<BattleMercenaryApplicationViewModel> | null
}

export interface BattleMercenaryApplicationViewModelResult {
  readonly errors: Array<_Error> | null
  data: BattleMercenaryApplicationViewModel
}

export interface BattleMercenaryViewModel {
  id: number
  user: UserPublicViewModel
  character: CharacterPublicViewModel
  side: BattleSide
}

export interface BattleMercenaryViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<BattleMercenaryViewModel> | null
}

export type BattlePhase = 'Preparation' | 'Hiring' | 'Scheduled' | 'Live' | 'End'

export type BattleSide = 'Attacker' | 'Defender'

export interface BattleViewModel {
  id: number
  region: Region
  position: Point
  phase: BattlePhase
  createdAt: Date
}

export interface BattleViewModelResult {
  readonly errors: Array<_Error> | null
  data: BattleViewModel
}

export interface BuyItemCommand {
  itemId: string
}

export interface BuySettlementItemCommand {
  partyId: number
  itemId: string
  itemCount: number
  settlementId: number
}

export interface CharacterAttributesViewModel {
  points: number
  strength: number
  agility: number
}

export type CharacterCharacteristicConversion = 'AttributesToSkills' | 'SkillsToAttributes'

export interface CharacterCharacteristicsViewModel {
  attributes: CharacterAttributesViewModel
  skills: CharacterSkillsViewModel
  weaponProficiencies: CharacterWeaponProficienciesViewModel
}

export interface CharacterCharacteristicsViewModelResult {
  readonly errors: Array<_Error> | null
  data: CharacterCharacteristicsViewModel
}

export type CharacterClass = 'Peasant' | 'Infantry' | 'ShockInfantry' | 'Skirmisher' | 'Crossbowman' | 'Archer' | 'Cavalry' | 'MountedArcher'

export interface CharacterLimitationsViewModel {
  lastRespecializeAt: Date
}

export interface CharacterLimitationsViewModelResult {
  readonly errors: Array<_Error> | null
  data: CharacterLimitationsViewModel
}

export interface CharacterPublicCompetitiveViewModel {
  id: number
  level: number
  class: CharacterClass
  statistics: Array<CharacterStatisticsViewModel>
  user: UserPublicViewModel
}

export interface CharacterPublicCompetitiveViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<CharacterPublicCompetitiveViewModel> | null
}

export interface CharacterPublicViewModel {
  id: number
  level: number
  name: string
  class: CharacterClass
}

export interface CharacterRatingViewModel {
  value: number
  deviation: number
  volatility: number
  competitiveValue: number
}

export interface CharacterSkillsViewModel {
  points: number
  ironFlesh: number
  powerStrike: number
  powerDraw: number
  powerThrow: number
  athletics: number
  riding: number
  weaponMaster: number
  mountedArchery: number
  shield: number
}

export interface CharacterStatisticsViewModel {
  kills: number
  deaths: number
  assists: number
  playTime: number
  gameMode: GameMode
  rating: CharacterRatingViewModel
}

export interface CharacterViewModel {
  id: number
  name: string
  generation: number
  level: number
  experience: number
  class: CharacterClass
  forTournament: boolean
}

export interface CharacterViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<CharacterViewModel> | null
}

export interface CharacterViewModelResult {
  readonly errors: Array<_Error> | null
  data: CharacterViewModel
}

export interface CharacterWeaponProficienciesViewModel {
  points: number
  oneHanded: number
  twoHanded: number
  polearm: number
  bow: number
  throwing: number
  crossbow: number
}

export interface ClanArmoryBorrowedItemViewModel {
  borrowerUserId: number
  userItemId: number
}

export interface ClanArmoryBorrowedItemViewModelResult {
  readonly errors: Array<_Error> | null
  data: ClanArmoryBorrowedItemViewModel
}

export interface ClanArmoryItemViewModel {
  userItemId: number
  userId: number
  borrowerUserId: number
  item: ItemViewModel
}

export interface ClanArmoryItemViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<ClanArmoryItemViewModel> | null
}

export interface ClanArmoryItemViewModelResult {
  readonly errors: Array<_Error> | null
  data: ClanArmoryItemViewModel
}

export type ClanInvitationStatus = 'Pending' | 'Declined' | 'Accepted'

export type ClanInvitationType = 'Request' | 'Offer'

export interface ClanInvitationViewModel {
  id: number
  invitee: UserPublicViewModel
  inviter: UserPublicViewModel
  type: ClanInvitationType
  status: ClanInvitationStatus
}

export interface ClanInvitationViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<ClanInvitationViewModel> | null
}

export interface ClanInvitationViewModelResult {
  readonly errors: Array<_Error> | null
  data: ClanInvitationViewModel
}

export type ClanMemberRole = 'Member' | 'Officer' | 'Leader'

export interface ClanMemberViewModel {
  user: UserPublicViewModel
  role: ClanMemberRole
}

export interface ClanMemberViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<ClanMemberViewModel> | null
}

export interface ClanMemberViewModelResult {
  readonly errors: Array<_Error> | null
  data: ClanMemberViewModel
}

export interface ClanPublicViewModel {
  id: number
  tag: string
  primaryColor: number
  secondaryColor: number
  name: string
  bannerKey: string
  region: Region
  languages: Array<Languages>
}

export interface ClanViewModel {
  id: number
  tag: string
  primaryColor: number
  secondaryColor: number
  name: string
  description: string
  bannerKey: string
  region: Region
  languages: Array<Languages>
  discord: string | null
  armoryTimeout: number
}

export interface ClanViewModelResult {
  readonly errors: Array<_Error> | null
  data: ClanViewModel
}

export interface ClanWithMemberCountViewModel {
  clan: ClanViewModel
  memberCount: number
}

export interface ClanWithMemberCountViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<ClanWithMemberCountViewModel> | null
}

export interface ConvertCharacterCharacteristicsCommand {
  conversion: CharacterCharacteristicConversion
}

export interface Coordinate {
  x: number
  y: number
  z: number
  m: number
  coordinateValue: Coordinate
  readonly isValid: boolean
}

export interface CoordinateEqualityComparer {
  [key: string]: never
}

export interface CoordinateSequence {
  readonly dimension: number
  readonly measures: number
  readonly spatial: number
  ordinates: Ordinates
  readonly hasZ: boolean
  readonly hasM: boolean
  readonly zOrdinateIndex: number
  readonly mOrdinateIndex: number
  first: Coordinate
  last: Coordinate
  readonly count: number
}

export interface CoordinateSequenceFactory {
  ordinates: Ordinates
}

export interface CreateClanCommand {
  tag: string
  name: string
  description: string
  primaryColor: number
  secondaryColor: number
  bannerKey: string
  region: Region
  languages: Array<Languages>
  discord: string | null
  armoryTimeout: number
}

export interface CreatePartyCommand {
  userId: number
}

export interface CreateTerrainCommand {
  type: TerrainType
  boundary: Polygon
}

export type Culture = 'Neutral' | 'Aserai' | 'Battania' | 'Empire' | 'Khuzait' | 'Looters' | 'Sturgia' | 'Vlandia'

export type DamageType = 'Undefined' | 'Cut' | 'Pierce' | 'Blunt'

export type Dimension = 'Point' | 'Curve' | 'Surface' | 'Collapse' | 'Dontcare' | 'True' | 'False'

export interface EditSettingsCommand {
  discord?: string | null
  steam?: string | null
  patreon?: string | null
  github?: string | null
  reddit?: string | null
  modDb?: string | null
}

export interface EnableItemCommand {
  itemId: string
  enable: boolean
  userId: number
}

export interface Envelope {
  readonly isNull: boolean
  readonly width: number
  readonly height: number
  readonly diameter: number
  readonly minX: number
  readonly maxX: number
  readonly minY: number
  readonly maxY: number
  readonly area: number
  readonly minExtent: number
  readonly maxExtent: number
  centre: Coordinate
}

export interface EquippedItemIdViewModel {
  slot: ItemSlot
  userItemId: number | null
}

export interface EquippedItemViewModel {
  slot: ItemSlot
  userItem: UserItemViewModel
}

export interface EquippedItemViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<EquippedItemViewModel> | null
}

export interface _Error {
  traceId?: string | null
  type: ErrorType
  code: ErrorCode
  title?: string | null
  detail?: string | null
  source: ErrorSource
  stackTrace?: string | null
}

export type ErrorCode = 'ApplicationClosed' | 'ApplicationNotFound' | 'BattleInvalidPhase' | 'BattleNotFound' | 'BattleTooFar' | 'CharacterForTournament' | 'CharacterForTournamentNotFound' | 'CharacterGenerationRequirement' | 'CharacterLevelRequirementNotMet' | 'CharacterNotFound' | 'CharacterRecentlyCreated' | 'CharacteristicDecreased' | 'ClanInvitationClosed' | 'ClanInvitationNotFound' | 'ClanMemberRoleNotMet' | 'ClanNameAlreadyUsed' | 'ClanNeedLeader' | 'ClanNotFound' | 'ClanLeaderFound' | 'ClanTagAlreadyUsed' | 'Conflict' | 'FighterNotACommander' | 'InternalError' | 'InvalidField' | 'ItemAlreadyOwned' | 'ItemBadSlot' | 'ItemBroken' | 'ItemDisabled' | 'ItemNotBuyable' | 'ItemNotFound' | 'ItemNotOwned' | 'ItemNotReforgeable' | 'ItemNotSellable' | 'ItemNotUpgradable' | 'NotEnoughAttributePoints' | 'NotEnoughGold' | 'NotEnoughHeirloomPoints' | 'NotEnoughSkillPoints' | 'NotEnoughWeaponProficiencyPoints' | 'PartiesNotOnTheSameSide' | 'PartyFighter' | 'PartyInBattle' | 'PartyNotAFighter' | 'PartyNotEnoughTroops' | 'PartyNotFound' | 'PartyNotInASettlement' | 'PartyNotInSight' | 'PartyNotSettlementOwner' | 'SettlementNotFound' | 'SettlementTooFar' | 'SkillRequirementNotMet' | 'UserAlreadyInAClan' | 'UserAlreadyInTheClan' | 'UserAlreadyRegisteredToStrategus' | 'UserItemIsNotBroken' | 'UserItemMaxRankReached' | 'UserItemNotFound' | 'UserNotAClanMember' | 'UserNotFound' | 'UserNotificationNotFound' | 'UserNotInAClan' | 'UserRoleNotMet' | 'PersonalItemAlreadyExist' | 'SettingNotFound' | 'TerrainNotFound'

export interface ErrorSource {
  pointer?: string | null
  parameter?: string | null
}

export type ErrorType = 'InternalError' | 'Forbidden' | 'Conflict' | 'NotFound' | 'Validation'

export interface GameCharacterViewModel {
  id: number
  name: string
  generation: number
  level: number
  experience: number
  class: CharacterClass
  forTournament: boolean
  characteristics: CharacterCharacteristicsViewModel
  statistics: CharacterStatisticsViewModel
  equippedItems: Array<GameEquippedItemViewModel>
}

export interface GameClanMemberViewModel {
  clanId: number
  role: ClanMemberRole
}

export interface GameEquippedItemViewModel {
  slot: ItemSlot
  userItem: GameUserItemViewModel
}

export type GameMode = 'CRPGBattle' | 'CRPGConquest' | 'CRPGDTV' | 'CRPGDuel' | 'CRPGSiege' | 'CRPGTeamDeathmatch' | 'CRPGSkirmish' | 'CRPGUnknownGameMode' | 'CRPGCaptain'

export interface GameModeCharacterStatisticsViewModelDictionaryResult {
  readonly errors: Array<_Error> | null
  data: {
    CRPGBattle: CharacterStatisticsViewModel
    CRPGConquest: CharacterStatisticsViewModel
    CRPGDTV: CharacterStatisticsViewModel
    CRPGDuel: CharacterStatisticsViewModel
    CRPGSiege: CharacterStatisticsViewModel
    CRPGTeamDeathmatch: CharacterStatisticsViewModel
    CRPGSkirmish: CharacterStatisticsViewModel
    CRPGUnknownGameMode: CharacterStatisticsViewModel
    CRPGCaptain: CharacterStatisticsViewModel
  } | null
}

export interface GameRepairedItem {
  itemId: string
  repairCost: number
  broke: boolean
}

export interface GameServerStats {
  total: GameStats
  regions: {
    Eu: {
      CRPGBattle: GameStats
      CRPGConquest: GameStats
      CRPGDTV: GameStats
      CRPGDuel: GameStats
      CRPGSiege: GameStats
      CRPGTeamDeathmatch: GameStats
      CRPGSkirmish: GameStats
      CRPGUnknownGameMode: GameStats
      CRPGCaptain: GameStats
    }
    Na: {
      CRPGBattle: GameStats
      CRPGConquest: GameStats
      CRPGDTV: GameStats
      CRPGDuel: GameStats
      CRPGSiege: GameStats
      CRPGTeamDeathmatch: GameStats
      CRPGSkirmish: GameStats
      CRPGUnknownGameMode: GameStats
      CRPGCaptain: GameStats
    }
    As: {
      CRPGBattle: GameStats
      CRPGConquest: GameStats
      CRPGDTV: GameStats
      CRPGDuel: GameStats
      CRPGSiege: GameStats
      CRPGTeamDeathmatch: GameStats
      CRPGSkirmish: GameStats
      CRPGUnknownGameMode: GameStats
      CRPGCaptain: GameStats
    }
    Oc: {
      CRPGBattle: GameStats
      CRPGConquest: GameStats
      CRPGDTV: GameStats
      CRPGDuel: GameStats
      CRPGSiege: GameStats
      CRPGTeamDeathmatch: GameStats
      CRPGSkirmish: GameStats
      CRPGUnknownGameMode: GameStats
      CRPGCaptain: GameStats
    }
  }
}

export interface GameServerStatsResult {
  readonly errors: Array<_Error> | null
  data: GameServerStats
}

export interface GameStats {
  playingCount: number
}

export interface GameUserDamagedItem {
  userItemId: number
  repairCost: number
}

export interface GameUserEffectiveReward {
  gold: number
  experience: number
  levelUp: boolean
}

export interface GameUserItemViewModel {
  id: number
  itemId: string
}

export interface GameUserReward {
  gold: number
  experience: number
}

export interface GameUserUpdate {
  userId: number
  characterId: number
  reward: GameUserReward
  statistics: CharacterStatisticsViewModel
  brokenItems: Array<GameUserDamagedItem>
  instance: string
}

export interface GameUserViewModel {
  id: number
  platform: Platform
  platformUserId: string
  name: string
  gold: number
  heirloomPoints: number
  experienceMultiplier: number
  role: Role
  region: Region
  createdAt: Date
  character: GameCharacterViewModel
  restrictions: Array<RestrictionViewModel>
  clanMembership: GameClanMemberViewModel
}

export interface GameUserViewModelResult {
  readonly errors: Array<_Error> | null
  data: GameUserViewModel
}

export interface Geometry {
  factory: GeometryFactory
  userData?: unknown
  srid: number
  readonly geometryType?: string | null
  ogcGeometryType: OgcGeometryType
  precisionModel: PrecisionModel
  coordinate: Coordinate
  readonly coordinates?: Array<Coordinate> | null
  readonly numPoints: number
  readonly numGeometries: number
  readonly isSimple: boolean
  readonly isValid: boolean
  readonly isEmpty: boolean
  readonly area: number
  readonly length: number
  centroid: Point
  interiorPoint: Point
  pointOnSurface: Point
  dimension: Dimension
  boundary: Geometry
  boundaryDimension: Dimension
  envelope: Geometry
  envelopeInternal: Envelope
  readonly isRectangle: boolean
}

export interface GeometryFactory {
  precisionModel: PrecisionModel
  coordinateSequenceFactory: CoordinateSequenceFactory
  readonly srid: number
  geometryServices: NtsGeometryServices
}

export interface GeometryOverlay {
  [key: string]: never
}

export interface InviteClanMemberCommand {
  inviteeId: number
}

export interface ItemArmorComponentViewModel {
  headArmor: number
  bodyArmor: number
  armArmor: number
  legArmor: number
  materialType: ArmorMaterialType
  familyType: 0 | 1 | 2 | 3
}

export type ItemFlags = 'ForceAttachOffHandPrimaryItemBone' | 'ForceAttachOffHandSecondaryItemBone' | 'NotUsableByFemale' | 'NotUsableByMale' | 'DropOnWeaponChange' | 'DropOnAnyAction' | 'CannotBePickedUp' | 'CanBePickedUpFromCorpse' | 'QuickFadeOut' | 'WoodenAttack' | 'WoodenParry' | 'HeldInOffHand' | 'HasToBeHeldUp' | 'UseTeamColor' | 'Civilian' | 'DoNotScaleBodyAccordingToWeaponLength' | 'DoesNotHideChest' | 'NotStackable'

export interface ItemMountComponentViewModel {
  bodyLength: number
  chargeDamage: number
  maneuver: number
  speed: number
  hitPoints: number
  familyType: 0 | 1 | 2 | 3
}

export type ItemSlot = 'Head' | 'Shoulder' | 'Body' | 'Hand' | 'Leg' | 'MountHarness' | 'Mount' | 'Weapon0' | 'Weapon1' | 'Weapon2' | 'Weapon3' | 'WeaponExtra'

export interface ItemStack {
  item: ItemViewModel
  count: number
}

export interface ItemStackIListResult {
  readonly errors: Array<_Error> | null
  data: Array<ItemStack> | null
}

export interface ItemStackResult {
  readonly errors: Array<_Error> | null
  data: ItemStack
}

export type ItemType = 'Undefined' | 'HeadArmor' | 'ShoulderArmor' | 'BodyArmor' | 'HandArmor' | 'LegArmor' | 'MountHarness' | 'Mount' | 'Shield' | 'Bow' | 'Crossbow' | 'OneHandedWeapon' | 'TwoHandedWeapon' | 'Polearm' | 'Thrown' | 'Arrows' | 'Bolts' | 'Pistol' | 'Musket' | 'Bullets' | 'Banner' | 'Ranged' | 'Ammo'

export interface ItemViewModel {
  id: string
  baseId: string
  name: string
  culture: Culture
  type: ItemType
  price: number
  tier: number
  rank: number
  requirement: number
  weight: number
  flags: Array<ItemFlags>
  createdAt: Date
  armor: ItemArmorComponentViewModel
  mount: ItemMountComponentViewModel
  weapons: Array<ItemWeaponComponentViewModel>
  enabled: boolean
}

export interface ItemViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<ItemViewModel> | null
}

export interface ItemWeaponComponentViewModel {
  class: WeaponClass
  itemUsage: 'long_bow' | 'bow' | 'crossbow' | 'crossbow_light' | 'polearm_couch' | 'polearm_bracing' | 'polearm_pike' | 'polearm'
  accuracy: number
  missileSpeed: number
  stackAmount: number
  length: number
  balance: number
  handling: number
  bodyArmor: number
  flags: Array<WeaponFlags>
  thrustDamage: number
  thrustDamageType: DamageType
  thrustSpeed: number
  swingDamage: number
  swingDamageType: DamageType
  swingSpeed: number
}

export type Languages = 'En' | 'Zh' | 'Ru' | 'De' | 'Fr' | 'It' | 'Es' | 'Pl' | 'Uk' | 'Ro' | 'Nl' | 'Tr' | 'El' | 'Hu' | 'Sv' | 'Cs' | 'Pt' | 'Sr' | 'Bg' | 'Hr' | 'Da' | 'Fi' | 'No' | 'Be' | 'Lv'

export interface LineString {
  factory: GeometryFactory
  userData?: unknown
  srid: number
  precisionModel: PrecisionModel
  readonly numGeometries: number
  readonly isSimple: boolean
  readonly isValid: boolean
  readonly area: number
  centroid: Point
  interiorPoint: Point
  pointOnSurface: Point
  envelope: Geometry
  envelopeInternal: Envelope
  readonly isRectangle: boolean
  readonly coordinates?: Array<Coordinate> | null
  coordinateSequence: CoordinateSequence
  coordinate: Coordinate
  dimension: Dimension
  boundaryDimension: Dimension
  readonly isEmpty: boolean
  readonly numPoints: number
  startPoint: Point
  endPoint: Point
  readonly isClosed: boolean
  readonly isRing: boolean
  readonly geometryType?: string | null
  ogcGeometryType: OgcGeometryType
  readonly length: number
  boundary: Geometry
  readonly count: number
}

export interface LinearRing {
  factory: GeometryFactory
  userData?: unknown
  srid: number
  precisionModel: PrecisionModel
  readonly numGeometries: number
  readonly isSimple: boolean
  readonly isValid: boolean
  readonly area: number
  centroid: Point
  interiorPoint: Point
  pointOnSurface: Point
  envelope: Geometry
  envelopeInternal: Envelope
  readonly isRectangle: boolean
  readonly coordinates?: Array<Coordinate> | null
  coordinateSequence: CoordinateSequence
  coordinate: Coordinate
  dimension: Dimension
  readonly isEmpty: boolean
  readonly numPoints: number
  startPoint: Point
  endPoint: Point
  readonly isRing: boolean
  ogcGeometryType: OgcGeometryType
  readonly length: number
  boundary: Geometry
  readonly count: number
  boundaryDimension: Dimension
  readonly isClosed: boolean
  readonly geometryType?: string | null
  readonly isCCW: boolean
}

export type NotificationState = 'Unread' | 'Read'

export type NotificationType = 'UserRewardedToUser' | 'CharacterRewardedToUser' | 'ItemReturned' | 'ClanApplicationCreatedToUser' | 'ClanApplicationCreatedToOfficers' | 'ClanApplicationAcceptedToUser' | 'ClanApplicationDeclinedToUser' | 'ClanMemberRoleChangedToUser' | 'ClanMemberLeavedToLeader' | 'ClanMemberKickedToExMember' | 'ClanArmoryBorrowItemToLender' | 'ClanArmoryRemoveItemToBorrower'

export interface NtsGeometryServices {
  geometryOverlay: GeometryOverlay
  coordinateEqualityComparer: CoordinateEqualityComparer
  readonly defaultSRID: number
  defaultCoordinateSequenceFactory: CoordinateSequenceFactory
  defaultPrecisionModel: PrecisionModel
}

export type OgcGeometryType = 'Point' | 'LineString' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'CircularString' | 'CompoundCurve' | 'CurvePolygon' | 'MultiCurve' | 'MultiSurface' | 'Curve' | 'Surface' | 'PolyhedralSurface' | 'TIN'

export type Ordinates = 'None' | 'Spatial1' | 'Spatial2' | 'XY' | 'Spatial3' | 'XYZ' | 'Spatial4' | 'Spatial5' | 'Spatial6' | 'Spatial7' | 'Spatial8' | 'Spatial9' | 'Spatial10' | 'Spatial11' | 'Spatial12' | 'Spatial13' | 'Spatial14' | 'Spatial15' | 'Spatial16' | 'AllSpatialOrdinates' | 'Measure1' | 'XYM' | 'XYZM' | 'Measure2' | 'Measure3' | 'Measure4' | 'Measure5' | 'Measure6' | 'Measure7' | 'Measure8' | 'Measure9' | 'Measure10' | 'Measure11' | 'Measure12' | 'Measure13' | 'Measure14' | 'Measure15' | 'Measure16' | 'AllMeasureOrdinates' | 'AllOrdinates'

export interface PartyPublicViewModel {
  id: number
  user: UserPublicViewModel
}

export type PartyStatus = 'Idle' | 'IdleInSettlement' | 'RecruitingInSettlement' | 'MovingToPoint' | 'FollowingParty' | 'MovingToSettlement' | 'MovingToAttackParty' | 'MovingToAttackSettlement' | 'InBattle'

export interface PartyViewModel {
  id: number
  gold: number
  troops: number
  position: Point
  status: PartyStatus
  waypoints: Array<Geometry>
  targetedParty: PartyVisibleViewModel
  targetedSettlement: SettlementPublicViewModel
  user: UserPublicViewModel
}

export interface PartyViewModelResult {
  readonly errors: Array<_Error> | null
  data: PartyViewModel
}

export interface PartyVisibleViewModel {
  id: number
  troops: number
  position: Point
  user: UserPublicViewModel
}

export interface PatchNotes {
  id: string
  title: string
  tagName: string
  url: string
  createdAt: Date
}

export interface PatchNotesIListResult {
  readonly errors: Array<_Error> | null
  data: Array<PatchNotes> | null
}

export type Platform = 'Steam' | 'EpicGames' | 'Microsoft'

export interface Point {
  factory: GeometryFactory
  userData?: unknown
  srid: number
  precisionModel: PrecisionModel
  readonly numGeometries: number
  readonly isSimple: boolean
  readonly isValid: boolean
  readonly area: number
  readonly length: number
  centroid: Point
  interiorPoint: Point
  pointOnSurface: Point
  envelope: Geometry
  envelopeInternal: Envelope
  readonly isRectangle: boolean
  coordinateSequence: CoordinateSequence
  readonly coordinates?: Array<Coordinate> | null
  readonly numPoints: number
  readonly isEmpty: boolean
  dimension: Dimension
  boundaryDimension: Dimension
  x: number
  y: number
  coordinate: Coordinate
  readonly geometryType?: string | null
  ogcGeometryType: OgcGeometryType
  boundary: Geometry
  z: number
  m: number
}

export interface Polygon {
  factory: GeometryFactory
  userData?: unknown
  srid: number
  precisionModel: PrecisionModel
  readonly numGeometries: number
  readonly isSimple: boolean
  readonly isValid: boolean
  centroid: Point
  interiorPoint: Point
  pointOnSurface: Point
  envelope: Geometry
  envelopeInternal: Envelope
  coordinate: Coordinate
  readonly coordinates?: Array<Coordinate> | null
  readonly numPoints: number
  dimension: Dimension
  boundaryDimension: Dimension
  readonly isEmpty: boolean
  exteriorRing: LineString
  readonly numInteriorRings: number
  readonly interiorRings?: Array<LineString> | null
  readonly geometryType?: string | null
  ogcGeometryType: OgcGeometryType
  readonly area: number
  readonly length: number
  boundary: Geometry
  readonly isRectangle: boolean
  shell: LinearRing
  holes?: Array<LinearRing> | null
}

export interface PrecisionModel {
  readonly isFloating: boolean
  readonly maximumSignificantDigits: number
  scale: number
  readonly gridSize: number
  precisionModelType: PrecisionModels
}

export type PrecisionModels = 'Floating' | 'FloatingSingle' | 'Fixed'

export interface RefundItemCommand {
  itemId: string
  userId: number
}

export type Region = 'Eu' | 'Na' | 'As' | 'Oc'

export interface RespondClanInvitationCommand {
  accept: boolean
}

export interface RespondToBattleFighterApplicationCommand {
  partyId: number
  fighterApplicationId: number
  accept: boolean
}

export interface RespondToBattleMercenaryApplicationCommand {
  partyId: number
  mercenaryApplicationId: number
  accept: boolean
}

export interface RestrictCommand {
  restrictedUserId: number
  duration: number
  type: RestrictionType
  reason: string
  publicReason: string
}

export interface RestrictionPublicViewModel {
  id: number
  duration: number
  reason: string
  createdAt: Date
}

export interface RestrictionPublicViewModelResult {
  readonly errors: Array<_Error> | null
  data: RestrictionPublicViewModel
}

export type RestrictionType = 'All' | 'Join' | 'Chat'

export interface RestrictionViewModel {
  id: number
  restrictedUser: UserPrivateViewModel
  duration: number
  type: RestrictionType
  reason: string
  publicReason: string
  restrictedByUser: UserPublicViewModel
  createdAt: Date
}

export interface RestrictionViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<RestrictionViewModel> | null
}

export interface RestrictionViewModelResult {
  readonly errors: Array<_Error> | null
  data: RestrictionViewModel
}

export interface RewardCharacterCommand {
  experience: number
  autoRetire: boolean
}

export interface RewardUserCommand {
  gold: number
  heirloomPoints: number
  itemId: string
}

export type Role = 'User' | 'Moderator' | 'GameAdmin' | 'Admin'

export interface SettingsViewModel {
  discord: string
  steam: string
  patreon: string
  github: string
  reddit: string
  modDb: string
}

export interface SettingsViewModelResult {
  readonly errors: Array<_Error> | null
  data: SettingsViewModel
}

export interface SettlementPublicViewModel {
  id: number
  name: string
  type: SettlementType
  position: Point
  culture: Culture
  region: Region
  troops: number
  owner: UserPublicViewModel
}

export interface SettlementPublicViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<SettlementPublicViewModel> | null
}

export interface SettlementPublicViewModelResult {
  readonly errors: Array<_Error> | null
  data: SettlementPublicViewModel
}

export type SettlementType = 'Village' | 'Castle' | 'Town'

export interface StrategusUpdate {
  party: PartyViewModel
  visibleParties: Array<PartyVisibleViewModel>
  visibleSettlements: Array<SettlementPublicViewModel>
  visibleBattles: Array<BattleViewModel>
}

export interface StrategusUpdateResult {
  readonly errors: Array<_Error> | null
  data: StrategusUpdate
}

export type TerrainType = 'Barrier' | 'ThickForest' | 'SparseForest' | 'ShallowWater' | 'DeepWater'

export interface TerrainViewModel {
  id: number
  type: TerrainType
  boundary: Polygon
}

export interface TerrainViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<TerrainViewModel> | null
}

export interface TerrainViewModelResult {
  readonly errors: Array<_Error> | null
  data: TerrainViewModel
}

export interface UpdateCharacterCommand {
  name: string
}

export interface UpdateCharacterItemsCommand {
  items: Array<EquippedItemIdViewModel>
}

export interface UpdateClanCommand {
  tag: string
  name: string
  description: string
  primaryColor: number
  secondaryColor: number
  bannerKey: string
  region: Region
  languages: Array<Languages>
  discord: string | null
  armoryTimeout: number
}

export interface UpdateClanMemberCommand {
  role: ClanMemberRole
}

export interface UpdateGameUserResult {
  user: GameUserViewModel
  effectiveReward: GameUserEffectiveReward
  repairedItems: Array<GameRepairedItem>
}

export interface UpdateGameUsersCommand {
  updates: Array<GameUserUpdate>
  key: string
}

export interface UpdateGameUsersResult {
  updateResults: Array<UpdateGameUserResult>
}

export interface UpdateGameUsersResultResult {
  readonly errors: Array<_Error> | null
  data: UpdateGameUsersResult
}

export interface UpdatePartyStatusCommand {
  partyId: number
  status: PartyStatus
  waypoints: Array<Geometry>
  targetedPartyId: number
  targetedSettlementId: number
}

export interface UpdateSettlementCommand {
  partyId: number
  settlementId: number
  troops: number
}

export interface UpdateTerrainCommand {
  id: number
  boundary: Polygon
}

export interface UpdateUserCommand {
  userId: number
}

export interface UpdateUserNoteCommand {
  note: string
}

export interface UserClanViewModel {
  clan: ClanViewModel
  role: ClanMemberRole
}

export interface UserClanViewModelResult {
  readonly errors: Array<_Error> | null
  data: UserClanViewModel
}

export interface UserItemViewModel {
  id: number
  userId: number
  item: ItemViewModel
  isBroken: boolean
  createdAt: Date
  isArmoryItem: boolean
  isPersonal: boolean
}

export interface UserItemViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<UserItemViewModel> | null
}

export interface UserItemViewModelResult {
  readonly errors: Array<_Error> | null
  data: UserItemViewModel
}

export interface UserNotificationMetadataEntitiesDictViewModel {
  clans: Array<ClanPublicViewModel>
  users: Array<UserPublicViewModel>
  characters: Array<CharacterPublicViewModel>
}

export interface UserNotificationViewModel {
  id: number
  state: NotificationState
  type: NotificationType
  metadata: {
    [key: string]: string
  }
  createdAt: Date
}

export interface UserNotificationViewModelResult {
  readonly errors: Array<_Error> | null
  data: UserNotificationViewModel
}

export interface UserNotificationsWithDictViewModel {
  notifications: Array<UserNotificationViewModel>
  dict: UserNotificationMetadataEntitiesDictViewModel
}

export interface UserNotificationsWithDictViewModelResult {
  readonly errors: Array<_Error> | null
  data: UserNotificationsWithDictViewModel
}

export interface UserPrivateViewModel {
  id: number
  platform: Platform
  gold: number
  heirloomPoints: number
  experienceMultiplier: number
  platformUserId: string
  name: string
  avatar: string | null
  region: Region
  updatedAt: Date
  createdAt: Date
  isDonor: boolean
  note: string
  activeCharacterId: number | null
  clanMembership: UserClanViewModel
}

export interface UserPrivateViewModelArrayResult {
  readonly errors: Array<_Error> | null
  data: Array<UserPrivateViewModel> | null
}

export interface UserPrivateViewModelIListResult {
  readonly errors: Array<_Error> | null
  data: Array<UserPrivateViewModel> | null
}

export interface UserPrivateViewModelResult {
  readonly errors: Array<_Error> | null
  data: UserPrivateViewModel
}

export interface UserPublicViewModel {
  id: number
  platform: Platform
  platformUserId: string
  name: string
  avatar: string | null
  region: Region
  clanMembership: UserClanViewModel
}

export interface UserViewModel {
  id: number
  platform: Platform
  platformUserId: string
  name: string
  gold: number
  heirloomPoints: number
  experienceMultiplier: number
  role: Role
  region: Region
  isDonor: boolean
  avatar: string | null
  activeCharacterId: number | null
  unreadNotificationsCount: number
  clanMembership: UserClanViewModel
}

export interface UserViewModelResult {
  readonly errors: Array<_Error> | null
  data: UserViewModel
}

export type WeaponClass = 'Undefined' | 'Dagger' | 'OneHandedSword' | 'TwoHandedSword' | 'OneHandedAxe' | 'TwoHandedAxe' | 'Mace' | 'Pick' | 'TwoHandedMace' | 'OneHandedPolearm' | 'TwoHandedPolearm' | 'LowGripPolearm' | 'Arrow' | 'Bolt' | 'Cartridge' | 'Bow' | 'Crossbow' | 'Stone' | 'Boulder' | 'ThrowingAxe' | 'ThrowingKnife' | 'Javelin' | 'Pistol' | 'Musket' | 'SmallShield' | 'LargeShield' | 'Banner'

export type WeaponFlags = 'MeleeWeapon' | 'RangedWeapon' | 'FirearmAmmo' | 'NotUsableWithOneHand' | 'NotUsableWithTwoHand' | 'WideGrip' | 'AttachAmmoToVisual' | 'Consumable' | 'HasHitPoints' | 'HasString' | 'StringHeldByHand' | 'UnloadWhenSheathed' | 'AffectsArea' | 'AffectsAreaBig' | 'Burning' | 'BonusAgainstShield' | 'CanPenetrateShield' | 'CantReloadOnHorseback' | 'AutoReload' | 'TwoHandIdleOnMount' | 'NoBlood' | 'PenaltyWithShield' | 'CanDismount' | 'CanHook' | 'CanKnockDown' | 'CanCrushThrough' | 'CanBlockRanged' | 'MissileWithPhysics' | 'MultiplePenetration' | 'LeavesTrail' | 'UseHandAsThrowBase' | 'AmmoBreaksOnBounceBack' | 'AmmoCanBreakOnBounceBack' | 'AmmoSticksWhenShot' | 'CanReloadOnHorseback' | 'CantUseOnHorseback'

export interface ActivityLogViewModelIListResultWritable {
  data: Array<ActivityLogViewModel> | null
}

export interface ActivityLogWithDictViewModelResultWritable {
  data: ActivityLogWithDictViewModel
}

export interface BattleDetailedViewModelIListResultWritable {
  data: Array<BattleDetailedViewModel> | null
}

export interface BattleFighterApplicationViewModelIListResultWritable {
  data: Array<BattleFighterApplicationViewModel> | null
}

export interface BattleFighterApplicationViewModelResultWritable {
  data: BattleFighterApplicationViewModel
}

export interface BattleFighterViewModelIListResultWritable {
  data: Array<BattleFighterViewModel> | null
}

export interface BattleMercenaryApplicationViewModelIListResultWritable {
  data: Array<BattleMercenaryApplicationViewModel> | null
}

export interface BattleMercenaryApplicationViewModelResultWritable {
  data: BattleMercenaryApplicationViewModel
}

export interface BattleMercenaryViewModelIListResultWritable {
  data: Array<BattleMercenaryViewModel> | null
}

export interface BattleViewModelResultWritable {
  data: BattleViewModel
}

export interface CharacterCharacteristicsViewModelResultWritable {
  data: CharacterCharacteristicsViewModel
}

export interface CharacterLimitationsViewModelResultWritable {
  data: CharacterLimitationsViewModel
}

export interface CharacterPublicCompetitiveViewModelIListResultWritable {
  data: Array<CharacterPublicCompetitiveViewModel> | null
}

export interface CharacterViewModelIListResultWritable {
  data: Array<CharacterViewModel> | null
}

export interface CharacterViewModelResultWritable {
  data: CharacterViewModel
}

export interface ClanArmoryBorrowedItemViewModelResultWritable {
  data: ClanArmoryBorrowedItemViewModel
}

export interface ClanArmoryItemViewModelIListResultWritable {
  data: Array<ClanArmoryItemViewModel> | null
}

export interface ClanArmoryItemViewModelResultWritable {
  data: ClanArmoryItemViewModel
}

export interface ClanInvitationViewModelIListResultWritable {
  data: Array<ClanInvitationViewModel> | null
}

export interface ClanInvitationViewModelResultWritable {
  data: ClanInvitationViewModel
}

export interface ClanMemberViewModelIListResultWritable {
  data: Array<ClanMemberViewModel> | null
}

export interface ClanMemberViewModelResultWritable {
  data: ClanMemberViewModel
}

export interface ClanViewModelResultWritable {
  data: ClanViewModel
}

export interface ClanWithMemberCountViewModelIListResultWritable {
  data: Array<ClanWithMemberCountViewModel> | null
}

export interface CoordinateWritable {
  x: number
  y: number
  z: number
  m: number
  coordinateValue: CoordinateWritable
}

export interface CoordinateSequenceWritable {
  ordinates: Ordinates
  first: CoordinateWritable
  last: CoordinateWritable
}

export interface EnvelopeWritable {
  centre: CoordinateWritable
}

export interface EquippedItemViewModelIListResultWritable {
  data: Array<EquippedItemViewModel> | null
}

export interface GameModeCharacterStatisticsViewModelDictionaryResultWritable {
  data: {
    CRPGBattle: CharacterStatisticsViewModel
    CRPGConquest: CharacterStatisticsViewModel
    CRPGDTV: CharacterStatisticsViewModel
    CRPGDuel: CharacterStatisticsViewModel
    CRPGSiege: CharacterStatisticsViewModel
    CRPGTeamDeathmatch: CharacterStatisticsViewModel
    CRPGSkirmish: CharacterStatisticsViewModel
    CRPGUnknownGameMode: CharacterStatisticsViewModel
    CRPGCaptain: CharacterStatisticsViewModel
  } | null
}

export interface GameServerStatsResultWritable {
  data: GameServerStats
}

export interface GameUserViewModelResultWritable {
  data: GameUserViewModel
}

export interface GeometryWritable {
  factory: GeometryFactoryWritable
  userData?: unknown
  srid: number
  ogcGeometryType: OgcGeometryType
  precisionModel: PrecisionModelWritable
  coordinate: CoordinateWritable
  centroid: PointWritable
  interiorPoint: PointWritable
  pointOnSurface: PointWritable
  dimension: Dimension
  boundary: GeometryWritable
  boundaryDimension: Dimension
  envelope: GeometryWritable
  envelopeInternal: EnvelopeWritable
}

export interface GeometryFactoryWritable {
  precisionModel: PrecisionModelWritable
  coordinateSequenceFactory: CoordinateSequenceFactory
  geometryServices: NtsGeometryServicesWritable
}

export interface ItemStackIListResultWritable {
  data: Array<ItemStack> | null
}

export interface ItemStackResultWritable {
  data: ItemStack
}

export interface ItemViewModelIListResultWritable {
  data: Array<ItemViewModel> | null
}

export interface LineStringWritable {
  factory: GeometryFactoryWritable
  userData?: unknown
  srid: number
  precisionModel: PrecisionModelWritable
  centroid: PointWritable
  interiorPoint: PointWritable
  pointOnSurface: PointWritable
  envelope: GeometryWritable
  envelopeInternal: EnvelopeWritable
  coordinateSequence: CoordinateSequenceWritable
  coordinate: CoordinateWritable
  dimension: Dimension
  boundaryDimension: Dimension
  startPoint: PointWritable
  endPoint: PointWritable
  ogcGeometryType: OgcGeometryType
  boundary: GeometryWritable
}

export interface LinearRingWritable {
  factory: GeometryFactoryWritable
  userData?: unknown
  srid: number
  precisionModel: PrecisionModelWritable
  centroid: PointWritable
  interiorPoint: PointWritable
  pointOnSurface: PointWritable
  envelope: GeometryWritable
  envelopeInternal: EnvelopeWritable
  coordinateSequence: CoordinateSequenceWritable
  coordinate: CoordinateWritable
  dimension: Dimension
  startPoint: PointWritable
  endPoint: PointWritable
  ogcGeometryType: OgcGeometryType
  boundary: GeometryWritable
  boundaryDimension: Dimension
}

export interface NtsGeometryServicesWritable {
  geometryOverlay: GeometryOverlay
  coordinateEqualityComparer: CoordinateEqualityComparer
  defaultCoordinateSequenceFactory: CoordinateSequenceFactory
  defaultPrecisionModel: PrecisionModelWritable
}

export interface PartyViewModelResultWritable {
  data: PartyViewModel
}

export interface PatchNotesIListResultWritable {
  data: Array<PatchNotes> | null
}

export interface PointWritable {
  factory: GeometryFactoryWritable
  userData?: unknown
  srid: number
  precisionModel: PrecisionModelWritable
  centroid: PointWritable
  interiorPoint: PointWritable
  pointOnSurface: PointWritable
  envelope: GeometryWritable
  envelopeInternal: EnvelopeWritable
  coordinateSequence: CoordinateSequenceWritable
  dimension: Dimension
  boundaryDimension: Dimension
  x: number
  y: number
  coordinate: CoordinateWritable
  ogcGeometryType: OgcGeometryType
  boundary: GeometryWritable
  z: number
  m: number
}

export interface PolygonWritable {
  factory: GeometryFactoryWritable
  userData?: unknown
  srid: number
  precisionModel: PrecisionModelWritable
  centroid: PointWritable
  interiorPoint: PointWritable
  pointOnSurface: PointWritable
  envelope: GeometryWritable
  envelopeInternal: EnvelopeWritable
  coordinate: CoordinateWritable
  dimension: Dimension
  boundaryDimension: Dimension
  exteriorRing: LineStringWritable
  ogcGeometryType: OgcGeometryType
  boundary: GeometryWritable
  shell: LinearRingWritable
  holes?: Array<LinearRingWritable> | null
}

export interface PrecisionModelWritable {
  scale: number
  precisionModelType: PrecisionModels
}

export interface RestrictionPublicViewModelResultWritable {
  data: RestrictionPublicViewModel
}

export interface RestrictionViewModelIListResultWritable {
  data: Array<RestrictionViewModel> | null
}

export interface RestrictionViewModelResultWritable {
  data: RestrictionViewModel
}

export interface SettingsViewModelResultWritable {
  data: SettingsViewModel
}

export interface SettlementPublicViewModelIListResultWritable {
  data: Array<SettlementPublicViewModel> | null
}

export interface SettlementPublicViewModelResultWritable {
  data: SettlementPublicViewModel
}

export interface StrategusUpdateResultWritable {
  data: StrategusUpdate
}

export interface TerrainViewModelIListResultWritable {
  data: Array<TerrainViewModel> | null
}

export interface TerrainViewModelResultWritable {
  data: TerrainViewModel
}

export interface UpdateGameUsersResultResultWritable {
  data: UpdateGameUsersResult
}

export interface UserClanViewModelResultWritable {
  data: UserClanViewModel
}

export interface UserItemViewModelIListResultWritable {
  data: Array<UserItemViewModel> | null
}

export interface UserItemViewModelResultWritable {
  data: UserItemViewModel
}

export interface UserNotificationViewModelResultWritable {
  data: UserNotificationViewModel
}

export interface UserNotificationsWithDictViewModelResultWritable {
  data: UserNotificationsWithDictViewModel
}

export interface UserPrivateViewModelArrayResultWritable {
  data: Array<UserPrivateViewModel> | null
}

export interface UserPrivateViewModelIListResultWritable {
  data: Array<UserPrivateViewModel> | null
}

export interface UserPrivateViewModelResultWritable {
  data: UserPrivateViewModel
}

export interface UserViewModelResultWritable {
  data: UserViewModel
}

export interface GetActivityLogsData {
  body?: never
  path?: never
  query: {
    'from': Date
    'to': Date
    'userId[]'?: Array<number>
    'type[]'?: Array<ActivityLogType>
  }
  url: '/activity-logs'
}

export interface GetActivityLogsErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface GetActivityLogsResponses {
  /**
   * Ok.
   */
  200: ActivityLogWithDictViewModelResult
}

export type GetActivityLogsResponse = GetActivityLogsResponses[keyof GetActivityLogsResponses]

export interface GetBattlesData {
  body?: never
  path?: never
  query: {
    'region': Region
    'phase[]'?: Array<BattlePhase>
  }
  url: '/Battles'
}

export interface GetBattlesResponses {
  /**
   * OK
   */
  200: BattleDetailedViewModelIListResult
}

export type GetBattlesResponse = GetBattlesResponses[keyof GetBattlesResponses]

export interface GetBattlesByBattleIdData {
  body?: never
  path: {
    battleId: number
  }
  query?: never
  url: '/Battles/{battleId}'
}

export interface GetBattlesByBattleIdResponses {
  /**
   * OK
   */
  200: BattleViewModelResult
}

export type GetBattlesByBattleIdResponse = GetBattlesByBattleIdResponses[keyof GetBattlesByBattleIdResponses]

export interface GetBattlesByBattleIdFightersData {
  body?: never
  path: {
    battleId: number
  }
  query?: never
  url: '/Battles/{battleId}/fighters'
}

export interface GetBattlesByBattleIdFightersErrors {
  /**
   * Bad request.
   */
  400: unknown
}

export interface GetBattlesByBattleIdFightersResponses {
  /**
   * Ok.
   */
  200: BattleFighterViewModelIListResult
}

export type GetBattlesByBattleIdFightersResponse = GetBattlesByBattleIdFightersResponses[keyof GetBattlesByBattleIdFightersResponses]

export interface PostBattlesByBattleIdFightersData {
  body?: never
  path: {
    battleId: number
  }
  query?: never
  url: '/Battles/{battleId}/fighters'
}

export interface PostBattlesByBattleIdFightersErrors {
  /**
   * Too far from the battle, ...
   */
  400: unknown
}

export interface PostBattlesByBattleIdFightersResponses {
  /**
   * Applied.
   */
  200: BattleFighterApplicationViewModelResult
}

export type PostBattlesByBattleIdFightersResponse = PostBattlesByBattleIdFightersResponses[keyof PostBattlesByBattleIdFightersResponses]

export interface GetBattlesByBattleIdFighterApplicationsData {
  body?: never
  path: {
    battleId: number
  }
  query?: {
    'status[]'?: Array<BattleFighterApplicationStatus>
  }
  url: '/Battles/{battleId}/fighter-applications'
}

export interface GetBattlesByBattleIdFighterApplicationsErrors {
  /**
   * Bad request.
   */
  400: unknown
}

export interface GetBattlesByBattleIdFighterApplicationsResponses {
  /**
   * Ok.
   */
  200: BattleFighterApplicationViewModelIListResult
}

export type GetBattlesByBattleIdFighterApplicationsResponse = GetBattlesByBattleIdFighterApplicationsResponses[keyof GetBattlesByBattleIdFighterApplicationsResponses]

export interface PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseData {
  body?: RespondToBattleFighterApplicationCommand
  path: {
    battleId: number
    applicationId: number
  }
  query?: never
  url: '/Battles/{battleId}/fighter-applications/{applicationId}/response'
}

export interface PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseErrors {
  /**
   * Bad request.
   */
  400: unknown
}

export interface PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponses {
  /**
   * Ok.
   */
  200: BattleFighterApplicationViewModelResult
}

export type PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponse = PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponses[keyof PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponses]

export interface GetBattlesByBattleIdMercenariesData {
  body?: never
  path: {
    battleId: number
  }
  query?: never
  url: '/Battles/{battleId}/mercenaries'
}

export interface GetBattlesByBattleIdMercenariesErrors {
  /**
   * Bad request.
   */
  400: unknown
}

export interface GetBattlesByBattleIdMercenariesResponses {
  /**
   * Ok.
   */
  200: BattleMercenaryViewModelIListResult
}

export type GetBattlesByBattleIdMercenariesResponse = GetBattlesByBattleIdMercenariesResponses[keyof GetBattlesByBattleIdMercenariesResponses]

export interface GetBattlesByBattleIdMercenaryApplicationsData {
  body?: never
  path: {
    battleId: number
  }
  query?: {
    'status[]'?: Array<BattleMercenaryApplicationStatus>
  }
  url: '/Battles/{battleId}/mercenary-applications'
}

export interface GetBattlesByBattleIdMercenaryApplicationsErrors {
  /**
   * Bad request.
   */
  400: unknown
}

export interface GetBattlesByBattleIdMercenaryApplicationsResponses {
  /**
   * Ok.
   */
  200: BattleMercenaryApplicationViewModelIListResult
}

export type GetBattlesByBattleIdMercenaryApplicationsResponse = GetBattlesByBattleIdMercenaryApplicationsResponses[keyof GetBattlesByBattleIdMercenaryApplicationsResponses]

export interface PostBattlesByBattleIdMercenaryApplicationsData {
  body?: ApplyAsMercenaryToBattleCommand
  path: {
    battleId: number
  }
  query?: never
  url: '/Battles/{battleId}/mercenary-applications'
}

export interface PostBattlesByBattleIdMercenaryApplicationsErrors {
  /**
   * Bad request.
   */
  400: unknown
}

export interface PostBattlesByBattleIdMercenaryApplicationsResponses {
  /**
   * Applied.
   */
  200: BattleMercenaryApplicationViewModelResult
}

export type PostBattlesByBattleIdMercenaryApplicationsResponse = PostBattlesByBattleIdMercenaryApplicationsResponses[keyof PostBattlesByBattleIdMercenaryApplicationsResponses]

export interface PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseData {
  body?: RespondToBattleMercenaryApplicationCommand
  path: {
    battleId: number
    applicationId: number
  }
  query?: never
  url: '/Battles/{battleId}/mercenary-applications/{applicationId}/response'
}

export interface PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseErrors {
  /**
   * Bad request.
   */
  400: unknown
}

export interface PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponses {
  /**
   * Ok.
   */
  200: BattleMercenaryApplicationViewModelResult
}

export type PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponse = PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponses[keyof PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponses]

export interface GetClansByIdData {
  body?: never
  path: {
    id: number
  }
  query?: never
  url: '/Clans/{id}'
}

export interface GetClansByIdErrors {
  /**
   * Clan was not found.
   */
  404: unknown
}

export interface GetClansByIdResponses {
  /**
   * Ok.
   */
  200: ClanViewModelResult
}

export type GetClansByIdResponse = GetClansByIdResponses[keyof GetClansByIdResponses]

export interface GetClansByIdMembersData {
  body?: never
  path: {
    id: number
  }
  query?: never
  url: '/Clans/{id}/members'
}

export interface GetClansByIdMembersErrors {
  /**
   * Clan was not found.
   */
  404: unknown
}

export interface GetClansByIdMembersResponses {
  /**
   * Ok.
   */
  200: ClanMemberViewModelIListResult
}

export type GetClansByIdMembersResponse = GetClansByIdMembersResponses[keyof GetClansByIdMembersResponses]

export interface DeleteClansByClanIdMembersByUserIdData {
  body?: never
  path: {
    clanId: number
    userId: number
  }
  query?: never
  url: '/Clans/{clanId}/members/{userId}'
}

export interface DeleteClansByClanIdMembersByUserIdErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface DeleteClansByClanIdMembersByUserIdResponses {
  /**
   * OK
   */
  200: unknown
  /**
   * Kicked or left.
   */
  204: void
}

export type DeleteClansByClanIdMembersByUserIdResponse = DeleteClansByClanIdMembersByUserIdResponses[keyof DeleteClansByClanIdMembersByUserIdResponses]

export interface PutClansByClanIdMembersByUserIdData {
  /**
   * The entire member with the updated values.
   */
  body?: UpdateClanMemberCommand
  path: {
    /**
     * Clan id.
     */
    clanId: number
    /**
     * User id.
     */
    userId: number
  }
  query?: never
  url: '/Clans/{clanId}/members/{userId}'
}

export interface PutClansByClanIdMembersByUserIdErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutClansByClanIdMembersByUserIdResponses {
  /**
   * Updated.
   */
  200: ClanMemberViewModelResult
}

export type PutClansByClanIdMembersByUserIdResponse = PutClansByClanIdMembersByUserIdResponses[keyof PutClansByClanIdMembersByUserIdResponses]

export interface GetClansData {
  body?: never
  path?: never
  query?: never
  url: '/Clans'
}

export interface GetClansResponses {
  /**
   * Ok.
   */
  200: ClanWithMemberCountViewModelIListResult
}

export type GetClansResponse = GetClansResponses[keyof GetClansResponses]

export interface PostClansData {
  /**
   * Clan info.
   */
  body?: CreateClanCommand
  path?: never
  query?: never
  url: '/Clans'
}

export interface PostClansErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PostClansResponses {
  /**
   * OK
   */
  200: ClanViewModelResult
}

export type PostClansResponse = PostClansResponses[keyof PostClansResponses]

export interface PutClansByClanIdData {
  /**
   * The clan update.
   */
  body?: UpdateClanCommand
  path: {
    /**
     * Clan id.
     */
    clanId: number
  }
  query?: never
  url: '/Clans/{clanId}'
}

export interface PutClansByClanIdErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutClansByClanIdResponses {
  /**
   * Updated.
   */
  200: ClanViewModelResult
}

export type PutClansByClanIdResponse = PutClansByClanIdResponses[keyof PutClansByClanIdResponses]

export interface GetClansByClanIdInvitationsData {
  body?: never
  path: {
    clanId: number
  }
  query?: {
    'type[]'?: Array<ClanInvitationType>
    'status[]'?: Array<ClanInvitationStatus>
  }
  url: '/Clans/{clanId}/invitations'
}

export interface GetClansByClanIdInvitationsErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface GetClansByClanIdInvitationsResponses {
  /**
   * Ok.
   */
  200: ClanInvitationViewModelIListResult
}

export type GetClansByClanIdInvitationsResponse = GetClansByClanIdInvitationsResponses[keyof GetClansByClanIdInvitationsResponses]

export interface PostClansByClanIdInvitationsData {
  body?: InviteClanMemberCommand
  path: {
    clanId: number
  }
  query?: never
  url: '/Clans/{clanId}/invitations'
}

export interface PostClansByClanIdInvitationsErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PostClansByClanIdInvitationsResponses {
  /**
   * OK
   */
  200: ClanInvitationViewModelResult
  /**
   * Invitation created.
   */
  201: unknown
}

export type PostClansByClanIdInvitationsResponse = PostClansByClanIdInvitationsResponses[keyof PostClansByClanIdInvitationsResponses]

export interface PutClansByClanIdInvitationsByInvitationIdResponseData {
  body?: RespondClanInvitationCommand
  path: {
    clanId: number
    invitationId: number
  }
  query?: never
  url: '/Clans/{clanId}/invitations/{invitationId}/response'
}

export interface PutClansByClanIdInvitationsByInvitationIdResponseErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutClansByClanIdInvitationsByInvitationIdResponseResponses {
  /**
   * Responded successfully.
   */
  200: ClanInvitationViewModelResult
}

export type PutClansByClanIdInvitationsByInvitationIdResponseResponse = PutClansByClanIdInvitationsByInvitationIdResponseResponses[keyof PutClansByClanIdInvitationsByInvitationIdResponseResponses]

export interface GetClansByClanIdArmoryData {
  body?: never
  path: {
    /**
     * Clan id.
     */
    clanId: number
  }
  query?: never
  url: '/Clans/{clanId}/armory'
}

export interface GetClansByClanIdArmoryErrors {
  /**
   * Clan was not found.
   */
  404: unknown
}

export interface GetClansByClanIdArmoryResponses {
  /**
   * Ok.
   */
  200: ClanArmoryItemViewModelIListResult
}

export type GetClansByClanIdArmoryResponse = GetClansByClanIdArmoryResponses[keyof GetClansByClanIdArmoryResponses]

export interface PostClansByClanIdArmoryData {
  /**
   * Item id.
   */
  body?: AddItemToClanArmoryCommand
  path: {
    /**
     * Clan id.
     */
    clanId: number
  }
  query?: never
  url: '/Clans/{clanId}/armory'
}

export interface PostClansByClanIdArmoryErrors {
  /**
   * Bad request.
   */
  400: unknown
  /**
   * Conflict.
   */
  409: unknown
}

export interface PostClansByClanIdArmoryResponses {
  /**
   * OK
   */
  200: ClanArmoryItemViewModelResult
  /**
   * Item added to clan armory.
   */
  201: unknown
}

export type PostClansByClanIdArmoryResponse = PostClansByClanIdArmoryResponses[keyof PostClansByClanIdArmoryResponses]

export interface DeleteClansByClanIdArmoryByUserItemIdData {
  body?: never
  path: {
    /**
     * Clan id.
     */
    clanId: number
    /**
     * Item id.
     */
    userItemId: number
  }
  query?: never
  url: '/Clans/{clanId}/armory/{userItemId}'
}

export interface DeleteClansByClanIdArmoryByUserItemIdErrors {
  /**
   * Bad request.
   */
  400: unknown
}

export interface DeleteClansByClanIdArmoryByUserItemIdResponses {
  /**
   * OK
   */
  200: unknown
  /**
   * Item removed from clan armory.
   */
  204: void
}

export type DeleteClansByClanIdArmoryByUserItemIdResponse = DeleteClansByClanIdArmoryByUserItemIdResponses[keyof DeleteClansByClanIdArmoryByUserItemIdResponses]

export interface PutClansByClanIdArmoryByUserItemIdBorrowData {
  body?: never
  path: {
    /**
     * Clan id.
     */
    clanId: number
    /**
     * Item id.
     */
    userItemId: number
  }
  query?: never
  url: '/Clans/{clanId}/armory/{userItemId}/borrow'
}

export interface PutClansByClanIdArmoryByUserItemIdBorrowErrors {
  /**
   * Bad request.
   */
  400: unknown
}

export interface PutClansByClanIdArmoryByUserItemIdBorrowResponses {
  /**
   * Ok.
   */
  200: ClanArmoryBorrowedItemViewModelResult
}

export type PutClansByClanIdArmoryByUserItemIdBorrowResponse = PutClansByClanIdArmoryByUserItemIdBorrowResponses[keyof PutClansByClanIdArmoryByUserItemIdBorrowResponses]

export interface PutClansByClanIdArmoryByUserItemIdReturnData {
  body?: never
  path: {
    /**
     * Clan id.
     */
    clanId: number
    /**
     * Item id.
     */
    userItemId: number
  }
  query?: never
  url: '/Clans/{clanId}/armory/{userItemId}/return'
}

export interface PutClansByClanIdArmoryByUserItemIdReturnErrors {
  /**
   * Bad request.
   */
  400: unknown
}

export interface PutClansByClanIdArmoryByUserItemIdReturnResponses {
  /**
   * Ok.
   */
  200: unknown
}

export interface GetConnectAuthorizeData {
  body?: never
  path?: never
  query?: never
  url: '/Connect/authorize'
}

export interface GetConnectAuthorizeResponses {
  /**
   * OK
   */
  200: unknown
}

export interface PostConnectAuthorizeData {
  body?: never
  path?: never
  query?: never
  url: '/Connect/authorize'
}

export interface PostConnectAuthorizeResponses {
  /**
   * OK
   */
  200: unknown
}

export interface PostConnectTokenData {
  body?: never
  path?: never
  query?: never
  url: '/Connect/token'
}

export interface PostConnectTokenResponses {
  /**
   * OK
   */
  200: unknown
}

export interface GetConnectCallbackEpicGamesData {
  body?: never
  path?: never
  query?: never
  url: '/Connect/callback-epic-games'
}

export interface GetConnectCallbackEpicGamesResponses {
  /**
   * OK
   */
  200: unknown
}

export interface GetConnectCallbackMicrosoftData {
  body?: never
  path?: never
  query?: never
  url: '/Connect/callback-microsoft'
}

export interface GetConnectCallbackMicrosoftResponses {
  /**
   * OK
   */
  200: unknown
}

export interface GetConnectLogoutData {
  body?: never
  path?: never
  query?: never
  url: '/Connect/logout'
}

export interface GetConnectLogoutResponses {
  /**
   * OK
   */
  200: unknown
}

export interface GetGameServerStatisticsData {
  body?: never
  path?: never
  query?: never
  url: '/game-server-statistics'
}

export interface GetGameServerStatisticsResponses {
  /**
   * OK
   */
  200: GameServerStatsResult
}

export type GetGameServerStatisticsResponse = GetGameServerStatisticsResponses[keyof GetGameServerStatisticsResponses]

export interface GetGamesUsersData {
  body?: never
  path?: never
  query: {
    platform: Platform
    platformUserId?: string
    region: Region
    instance?: string
  }
  url: '/Games/users'
}

export interface GetGamesUsersResponses {
  /**
   * OK
   */
  200: GameUserViewModelResult
}

export type GetGamesUsersResponse = GetGamesUsersResponses[keyof GetGamesUsersResponses]

export interface PutGamesUsersData {
  body?: UpdateGameUsersCommand
  path?: never
  query?: never
  url: '/Games/users'
}

export interface PutGamesUsersResponses {
  /**
   * OK
   */
  200: UpdateGameUsersResultResult
}

export type PutGamesUsersResponse = PutGamesUsersResponses[keyof PutGamesUsersResponses]

export interface GetGamesTournamentUsersData {
  body?: never
  path?: never
  query: {
    platform: Platform
    platformUserId?: string
  }
  url: '/Games/tournament-users'
}

export interface GetGamesTournamentUsersResponses {
  /**
   * OK
   */
  200: GameUserViewModelResult
}

export type GetGamesTournamentUsersResponse = GetGamesTournamentUsersResponses[keyof GetGamesTournamentUsersResponses]

export interface PostGamesActivityLogsData {
  /**
   * The activity logs to insert.
   */
  body?: Array<ActivityLogViewModel>
  path?: never
  query?: never
  url: '/Games/activity-logs'
}

export interface PostGamesActivityLogsErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PostGamesActivityLogsResponses {
  /**
   * Inserted.
   */
  200: unknown
}

export interface GetGamesClansByIdData {
  body?: never
  path: {
    id: number
  }
  query?: never
  url: '/Games/clans/{id}'
}

export interface GetGamesClansByIdErrors {
  /**
   * Clan was not found.
   */
  404: unknown
}

export interface GetGamesClansByIdResponses {
  /**
   * Ok.
   */
  200: ClanViewModelResult
}

export type GetGamesClansByIdResponse = GetGamesClansByIdResponses[keyof GetGamesClansByIdResponses]

export interface PostGamesRestrictionsData {
  body?: RestrictCommand
  path?: never
  query?: never
  url: '/Games/restrictions'
}

export interface PostGamesRestrictionsResponses {
  /**
   * OK
   */
  200: RestrictionViewModelResult
}

export type PostGamesRestrictionsResponse = PostGamesRestrictionsResponses[keyof PostGamesRestrictionsResponses]

export interface GetItemsData {
  body?: never
  path?: never
  query?: never
  url: '/Items'
}

export interface GetItemsResponses {
  /**
   * Ok.
   */
  200: ItemViewModelIListResult
}

export type GetItemsResponse = GetItemsResponses[keyof GetItemsResponses]

export interface GetItemsUpgradesByBaseIdData {
  body?: never
  path?: {
    baseId?: string
  }
  query?: never
  url: '/Items/upgrades/{baseId}'
}

export interface GetItemsUpgradesByBaseIdResponses {
  /**
   * OK
   */
  200: ItemViewModelIListResult
}

export type GetItemsUpgradesByBaseIdResponse = GetItemsUpgradesByBaseIdResponses[keyof GetItemsUpgradesByBaseIdResponses]

export interface PutItemsByIdEnableData {
  /**
   * Enabling value.
   */
  body?: EnableItemCommand
  path?: {
    /**
     * Item id.
     */
    id?: string
  }
  query?: never
  url: '/Items/{id}/enable'
}

export interface PutItemsByIdEnableErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutItemsByIdEnableResponses {
  /**
   * OK
   */
  200: unknown
  /**
   * Updated.
   */
  204: void
}

export type PutItemsByIdEnableResponse = PutItemsByIdEnableResponses[keyof PutItemsByIdEnableResponses]

export interface PostItemsByIdRefundData {
  /**
   * Value.
   */
  body?: RefundItemCommand
  path?: {
    /**
     * Item id.
     */
    id?: string
  }
  query?: never
  url: '/Items/{id}/refund'
}

export interface PostItemsByIdRefundErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PostItemsByIdRefundResponses {
  /**
   * OK.
   */
  200: unknown
}

export interface GetLeaderboardLeaderboardData {
  body?: never
  path?: never
  query?: {
    region?: Region
    characterClass?: CharacterClass
    gameMode?: GameMode
  }
  url: '/Leaderboard/leaderboard'
}

export interface GetLeaderboardLeaderboardResponses {
  /**
   * Ok.
   */
  200: CharacterPublicCompetitiveViewModelIListResult
}

export type GetLeaderboardLeaderboardResponse = GetLeaderboardLeaderboardResponses[keyof GetLeaderboardLeaderboardResponses]

export interface GetPartiesSelfUpdateData {
  body?: never
  path?: never
  query?: never
  url: '/Parties/self/update'
}

export interface GetPartiesSelfUpdateErrors {
  /**
   * User was not registered to strategus.
   */
  404: unknown
}

export interface GetPartiesSelfUpdateResponses {
  /**
   * Ok.
   */
  200: StrategusUpdateResult
}

export type GetPartiesSelfUpdateResponse = GetPartiesSelfUpdateResponses[keyof GetPartiesSelfUpdateResponses]

export interface PostPartiesData {
  body?: CreatePartyCommand
  path?: never
  query?: never
  url: '/Parties'
}

export interface PostPartiesErrors {
  /**
   * Already registered.
   */
  400: unknown
}

export interface PostPartiesResponses {
  /**
   * Registered.
   */
  201: PartyViewModelResult
}

export type PostPartiesResponse = PostPartiesResponses[keyof PostPartiesResponses]

export interface PutPartiesSelfStatusData {
  body?: UpdatePartyStatusCommand
  path?: never
  query?: never
  url: '/Parties/self/status'
}

export interface PutPartiesSelfStatusResponses {
  /**
   * Updated.
   */
  200: PartyViewModelResult
}

export type PutPartiesSelfStatusResponse = PutPartiesSelfStatusResponses[keyof PutPartiesSelfStatusResponses]

export interface PostPartiesSelfItemsData {
  body?: BuySettlementItemCommand
  path?: never
  query?: never
  url: '/Parties/self/items'
}

export interface PostPartiesSelfItemsErrors {
  /**
   * Too far from the settlement, item not available, ...
   */
  400: unknown
}

export interface PostPartiesSelfItemsResponses {
  /**
   * Bought.
   */
  200: ItemStackResult
}

export type PostPartiesSelfItemsResponse = PostPartiesSelfItemsResponses[keyof PostPartiesSelfItemsResponses]

export interface GetPatchNotesData {
  body?: never
  path?: never
  query?: never
  url: '/patch-notes'
}

export interface GetPatchNotesResponses {
  /**
   * OK
   */
  200: PatchNotesIListResult
}

export type GetPatchNotesResponse = GetPatchNotesResponses[keyof GetPatchNotesResponses]

export interface GetRestrictionsData {
  body?: never
  path?: never
  query?: never
  url: '/Restrictions'
}

export interface GetRestrictionsResponses {
  /**
   * Ok.
   */
  200: RestrictionViewModelIListResult
}

export type GetRestrictionsResponse = GetRestrictionsResponses[keyof GetRestrictionsResponses]

export interface PostRestrictionsData {
  /**
   * Restriction info.
   */
  body?: RestrictCommand
  path?: never
  query?: never
  url: '/Restrictions'
}

export interface PostRestrictionsErrors {
  /**
   * Bad Request.
   */
  400: unknown
  /**
   * User was not found.
   */
  404: unknown
}

export interface PostRestrictionsResponses {
  /**
   * OK
   */
  200: RestrictionViewModelResult
  /**
   * Restricted.
   */
  201: unknown
}

export type PostRestrictionsResponse = PostRestrictionsResponses[keyof PostRestrictionsResponses]

export interface GetSettingsData {
  body?: never
  path?: never
  query?: never
  url: '/Settings'
}

export interface GetSettingsResponses {
  /**
   * Ok.
   */
  200: SettingsViewModelResult
}

export type GetSettingsResponse = GetSettingsResponses[keyof GetSettingsResponses]

export interface PatchSettingsData {
  body?: EditSettingsCommand
  path?: never
  query?: never
  url: '/Settings'
}

export interface PatchSettingsErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PatchSettingsResponses {
  /**
   * OK
   */
  200: SettingsViewModelResult
  /**
   * Created.
   */
  201: unknown
}

export type PatchSettingsResponse = PatchSettingsResponses[keyof PatchSettingsResponses]

export interface GetSettlementsData {
  body?: never
  path?: never
  query?: never
  url: '/Settlements'
}

export interface GetSettlementsResponses {
  /**
   * OK
   */
  200: SettlementPublicViewModelIListResult
}

export type GetSettlementsResponse = GetSettlementsResponses[keyof GetSettlementsResponses]

export interface GetSettlementsBySettlementIdData {
  body?: never
  path: {
    settlementId: number
  }
  query?: never
  url: '/Settlements/{settlementId}'
}

export interface GetSettlementsBySettlementIdResponses {
  /**
   * OK
   */
  200: SettlementPublicViewModelResult
}

export type GetSettlementsBySettlementIdResponse = GetSettlementsBySettlementIdResponses[keyof GetSettlementsBySettlementIdResponses]

export interface PostSettlementsBySettlementIdData {
  body?: UpdateSettlementCommand
  path: {
    settlementId: number
  }
  query?: never
  url: '/Settlements/{settlementId}'
}

export interface PostSettlementsBySettlementIdResponses {
  /**
   * OK
   */
  200: SettlementPublicViewModelResult
}

export type PostSettlementsBySettlementIdResponse = PostSettlementsBySettlementIdResponses[keyof PostSettlementsBySettlementIdResponses]

export interface GetSettlementsBySettlementIdItemsData {
  body?: never
  path: {
    settlementId: number
  }
  query?: never
  url: '/Settlements/{settlementId}/items'
}

export interface GetSettlementsBySettlementIdItemsResponses {
  /**
   * OK
   */
  200: ItemStackIListResult
}

export type GetSettlementsBySettlementIdItemsResponse = GetSettlementsBySettlementIdItemsResponses[keyof GetSettlementsBySettlementIdItemsResponses]

export interface PostSettlementsBySettlementIdItemsData {
  body?: AddSettlementItemCommand
  path: {
    settlementId: number
  }
  query?: never
  url: '/Settlements/{settlementId}/items'
}

export interface PostSettlementsBySettlementIdItemsResponses {
  /**
   * OK
   */
  200: ItemStackResult
}

export type PostSettlementsBySettlementIdItemsResponse = PostSettlementsBySettlementIdItemsResponses[keyof PostSettlementsBySettlementIdItemsResponses]

export interface GetSettlementsBySettlementIdShopItemsData {
  body?: never
  path: {
    settlementId: number
  }
  query?: never
  url: '/Settlements/{settlementId}/shop/items'
}

export interface GetSettlementsBySettlementIdShopItemsResponses {
  /**
   * OK
   */
  200: ItemViewModelIListResult
}

export type GetSettlementsBySettlementIdShopItemsResponse = GetSettlementsBySettlementIdShopItemsResponses[keyof GetSettlementsBySettlementIdShopItemsResponses]

export interface GetTerrainsData {
  body?: never
  path?: never
  query?: never
  url: '/Terrains'
}

export interface GetTerrainsResponses {
  /**
   * OK
   */
  200: TerrainViewModelIListResult
}

export type GetTerrainsResponse = GetTerrainsResponses[keyof GetTerrainsResponses]

export interface PostTerrainsData {
  body?: CreateTerrainCommand
  path?: never
  query?: never
  url: '/Terrains'
}

export interface PostTerrainsResponses {
  /**
   * OK
   */
  200: TerrainViewModelResult
}

export type PostTerrainsResponse = PostTerrainsResponses[keyof PostTerrainsResponses]

export interface DeleteTerrainsByIdData {
  body?: never
  path: {
    id: number
  }
  query?: never
  url: '/Terrains/{id}'
}

export interface DeleteTerrainsByIdResponses {
  /**
   * OK
   */
  200: unknown
}

export interface PutTerrainsByIdData {
  body?: UpdateTerrainCommand
  path: {
    id: number
  }
  query?: never
  url: '/Terrains/{id}'
}

export interface PutTerrainsByIdResponses {
  /**
   * OK
   */
  200: TerrainViewModelResult
}

export type PutTerrainsByIdResponse = PutTerrainsByIdResponses[keyof PutTerrainsByIdResponses]

export interface GetUsersSearchData {
  body?: never
  path?: never
  query?: {
    platform?: Platform
    platformUserId?: string
    name?: string
  }
  url: '/Users/search'
}

export interface GetUsersSearchErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface GetUsersSearchResponses {
  /**
   * Ok.
   */
  200: UserPrivateViewModelArrayResult
}

export type GetUsersSearchResponse = GetUsersSearchResponses[keyof GetUsersSearchResponses]

export interface DeleteUsersSelfData {
  body?: never
  path?: never
  query?: never
  url: '/Users/self'
}

export interface DeleteUsersSelfErrors {
  /**
   * User not found.
   */
  404: unknown
}

export interface DeleteUsersSelfResponses {
  /**
   * Deleted.
   */
  204: void
}

export type DeleteUsersSelfResponse = DeleteUsersSelfResponses[keyof DeleteUsersSelfResponses]

export interface GetUsersSelfData {
  body?: never
  path?: never
  query?: never
  url: '/Users/self'
}

export interface GetUsersSelfResponses {
  /**
   * OK
   */
  200: UserViewModelResult
}

export type GetUsersSelfResponse = GetUsersSelfResponses[keyof GetUsersSelfResponses]

export interface PutUsersSelfData {
  /**
   * The user with the updated values.
   */
  body?: UpdateUserCommand
  path?: never
  query?: never
  url: '/Users/self'
}

export interface PutUsersSelfErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersSelfResponses {
  /**
   * Updated.
   */
  200: UserViewModelResult
}

export type PutUsersSelfResponse = PutUsersSelfResponses[keyof PutUsersSelfResponses]

export interface GetUsersByUserIdData {
  body?: never
  path: {
    /**
     * The user id.
     */
    userId: number
  }
  query?: never
  url: '/Users/{userId}'
}

export interface GetUsersByUserIdErrors {
  /**
   * Bad Request.
   */
  400: unknown
  /**
   * User was not found.
   */
  404: unknown
}

export interface GetUsersByUserIdResponses {
  /**
   * Ok.
   */
  200: UserPrivateViewModelResult
}

export type GetUsersByUserIdResponse = GetUsersByUserIdResponses[keyof GetUsersByUserIdResponses]

export interface PutUsersByUserIdNoteData {
  /**
   * The user note update.
   */
  body?: UpdateUserNoteCommand
  path: {
    /**
     * User id.
     */
    userId: number
  }
  query?: never
  url: '/Users/{userId}/note'
}

export interface PutUsersByUserIdNoteErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersByUserIdNoteResponses {
  /**
   * Updated.
   */
  200: UserPrivateViewModelResult
}

export type PutUsersByUserIdNoteResponse = PutUsersByUserIdNoteResponses[keyof PutUsersByUserIdNoteResponses]

export interface GetUsersByUserIdCharactersData {
  body?: never
  path: {
    /**
     * The user id.
     */
    userId: number
  }
  query?: never
  url: '/Users/{userId}/characters'
}

export interface GetUsersByUserIdCharactersResponses {
  /**
   * Ok.
   */
  200: CharacterViewModelIListResult
}

export type GetUsersByUserIdCharactersResponse = GetUsersByUserIdCharactersResponses[keyof GetUsersByUserIdCharactersResponses]

export interface GetUsersData {
  body?: never
  path?: never
  query?: {
    /**
     * The user ids.
     */
    'id[]'?: Array<number>
  }
  url: '/Users'
}

export interface GetUsersErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface GetUsersResponses {
  /**
   * Ok.
   */
  200: UserPrivateViewModelIListResult
}

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses]

export interface GetUsersByIdRestrictionsData {
  body?: never
  path: {
    /**
     * The user id.
     */
    id: number
  }
  query?: never
  url: '/Users/{id}/restrictions'
}

export interface GetUsersByIdRestrictionsErrors {
  /**
   * Bad Request.
   */
  400: unknown
  /**
   * User was not found.
   */
  404: unknown
}

export interface GetUsersByIdRestrictionsResponses {
  /**
   * Ok.
   */
  200: RestrictionViewModelIListResult
}

export type GetUsersByIdRestrictionsResponse = GetUsersByIdRestrictionsResponses[keyof GetUsersByIdRestrictionsResponses]

export interface GetUsersSelfRestrictionData {
  body?: never
  path?: never
  query?: never
  url: '/Users/self/restriction'
}

export interface GetUsersSelfRestrictionErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface GetUsersSelfRestrictionResponses {
  /**
   * Ok.
   */
  200: RestrictionPublicViewModelResult
}

export type GetUsersSelfRestrictionResponse = GetUsersSelfRestrictionResponses[keyof GetUsersSelfRestrictionResponses]

export interface PutUsersByIdRewardsData {
  /**
   * The reward.
   */
  body?: RewardUserCommand
  path: {
    /**
     * User id.
     */
    id: number
  }
  query?: never
  url: '/Users/{id}/rewards'
}

export interface PutUsersByIdRewardsErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersByIdRewardsResponses {
  /**
   * Done.
   */
  200: UserViewModelResult
}

export type PutUsersByIdRewardsResponse = PutUsersByIdRewardsResponses[keyof PutUsersByIdRewardsResponses]

export interface DeleteUsersSelfCharactersByIdData {
  body?: never
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}'
}

export interface DeleteUsersSelfCharactersByIdErrors {
  /**
   * Character not found.
   */
  404: unknown
}

export interface DeleteUsersSelfCharactersByIdResponses {
  /**
   * Deleted.
   */
  204: void
}

export type DeleteUsersSelfCharactersByIdResponse = DeleteUsersSelfCharactersByIdResponses[keyof DeleteUsersSelfCharactersByIdResponses]

export interface GetUsersSelfCharactersByIdData {
  body?: never
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}'
}

export interface GetUsersSelfCharactersByIdErrors {
  /**
   * Character not found.
   */
  404: unknown
}

export interface GetUsersSelfCharactersByIdResponses {
  /**
   * Ok.
   */
  200: CharacterViewModelResult
}

export type GetUsersSelfCharactersByIdResponse = GetUsersSelfCharactersByIdResponses[keyof GetUsersSelfCharactersByIdResponses]

export interface PutUsersSelfCharactersByIdData {
  /**
   * The entire character with the updated values.
   */
  body?: UpdateCharacterCommand
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}'
}

export interface PutUsersSelfCharactersByIdErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersSelfCharactersByIdResponses {
  /**
   * Updated.
   */
  200: CharacterViewModelResult
}

export type PutUsersSelfCharactersByIdResponse = PutUsersSelfCharactersByIdResponses[keyof PutUsersSelfCharactersByIdResponses]

export interface GetUsersSelfCharactersData {
  body?: never
  path?: never
  query?: never
  url: '/Users/self/characters'
}

export interface GetUsersSelfCharactersResponses {
  /**
   * Ok.
   */
  200: CharacterViewModelIListResult
}

export type GetUsersSelfCharactersResponse = GetUsersSelfCharactersResponses[keyof GetUsersSelfCharactersResponses]

export interface GetUsersSelfCharactersByIdCharacteristicsData {
  body?: never
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}/characteristics'
}

export interface GetUsersSelfCharactersByIdCharacteristicsResponses {
  /**
   * Ok.
   */
  200: CharacterCharacteristicsViewModelResult
}

export type GetUsersSelfCharactersByIdCharacteristicsResponse = GetUsersSelfCharactersByIdCharacteristicsResponses[keyof GetUsersSelfCharactersByIdCharacteristicsResponses]

export interface PutUsersSelfCharactersByIdCharacteristicsData {
  /**
   * The character characteristics with the updated values.
   */
  body?: CharacterCharacteristicsViewModel
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}/characteristics'
}

export interface PutUsersSelfCharactersByIdCharacteristicsErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersSelfCharactersByIdCharacteristicsResponses {
  /**
   * Updated.
   */
  200: CharacterCharacteristicsViewModelResult
}

export type PutUsersSelfCharactersByIdCharacteristicsResponse = PutUsersSelfCharactersByIdCharacteristicsResponses[keyof PutUsersSelfCharactersByIdCharacteristicsResponses]

export interface PutUsersCharactersCompetitiveRatingsData {
  body?: never
  path?: never
  query?: never
  url: '/Users/characters/competitive-ratings'
}

export interface PutUsersCharactersCompetitiveRatingsErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersCharactersCompetitiveRatingsResponses {
  /**
   * Updated.
   */
  200: unknown
}

export interface PutUsersCharactersRespecializeData {
  body?: never
  path?: never
  query?: never
  url: '/Users/characters/respecialize'
}

export interface PutUsersCharactersRespecializeErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersCharactersRespecializeResponses {
  /**
   * Updated.
   */
  200: unknown
}

export interface PutUsersSelfCharactersByIdCharacteristicsConvertData {
  /**
   * The conversion to perform.
   */
  body?: ConvertCharacterCharacteristicsCommand
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}/characteristics/convert'
}

export interface PutUsersSelfCharactersByIdCharacteristicsConvertErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersSelfCharactersByIdCharacteristicsConvertResponses {
  /**
   * Conversion performed.
   */
  200: CharacterCharacteristicsViewModelResult
}

export type PutUsersSelfCharactersByIdCharacteristicsConvertResponse = PutUsersSelfCharactersByIdCharacteristicsConvertResponses[keyof PutUsersSelfCharactersByIdCharacteristicsConvertResponses]

export interface GetUsersSelfCharactersByIdItemsData {
  body?: never
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}/items'
}

export interface GetUsersSelfCharactersByIdItemsResponses {
  /**
   * Ok.
   */
  200: EquippedItemViewModelIListResult
}

export type GetUsersSelfCharactersByIdItemsResponse = GetUsersSelfCharactersByIdItemsResponses[keyof GetUsersSelfCharactersByIdItemsResponses]

export interface PutUsersSelfCharactersByIdItemsData {
  /**
   * Item slots that changed.
   */
  body?: UpdateCharacterItemsCommand
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}/items'
}

export interface PutUsersSelfCharactersByIdItemsErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersSelfCharactersByIdItemsResponses {
  /**
   * Updated.
   */
  200: EquippedItemViewModelIListResult
}

export type PutUsersSelfCharactersByIdItemsResponse = PutUsersSelfCharactersByIdItemsResponses[keyof PutUsersSelfCharactersByIdItemsResponses]

export interface PutUsersSelfCharactersByIdActiveData {
  /**
   * Activation value.
   */
  body?: ActivateCharacterCommand
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}/active'
}

export interface PutUsersSelfCharactersByIdActiveErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersSelfCharactersByIdActiveResponses {
  /**
   * OK
   */
  200: unknown
  /**
   * Updated.
   */
  204: void
}

export type PutUsersSelfCharactersByIdActiveResponse = PutUsersSelfCharactersByIdActiveResponses[keyof PutUsersSelfCharactersByIdActiveResponses]

export interface GetUsersSelfCharactersByIdStatisticsData {
  body?: never
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}/statistics'
}

export interface GetUsersSelfCharactersByIdStatisticsResponses {
  /**
   * Ok.
   */
  200: GameModeCharacterStatisticsViewModelDictionaryResult
}

export type GetUsersSelfCharactersByIdStatisticsResponse = GetUsersSelfCharactersByIdStatisticsResponses[keyof GetUsersSelfCharactersByIdStatisticsResponses]

export interface GetUsersSelfCharactersByIdEarningStatisticsData {
  body?: never
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query: {
    /**
     * Start of the queried time period.
     */
    from: Date
    /**
     * End of the queried time period. This parameter is optional.
     */
    to?: Date
  }
  url: '/Users/self/characters/{id}/earning-statistics'
}

export interface GetUsersSelfCharactersByIdEarningStatisticsResponses {
  /**
   * Ok.
   */
  200: ActivityLogViewModelIListResult
}

export type GetUsersSelfCharactersByIdEarningStatisticsResponse = GetUsersSelfCharactersByIdEarningStatisticsResponses[keyof GetUsersSelfCharactersByIdEarningStatisticsResponses]

export interface GetUsersSelfCharactersByIdLimitationsData {
  body?: never
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}/limitations'
}

export interface GetUsersSelfCharactersByIdLimitationsResponses {
  /**
   * Ok.
   */
  200: CharacterLimitationsViewModelResult
}

export type GetUsersSelfCharactersByIdLimitationsResponse = GetUsersSelfCharactersByIdLimitationsResponses[keyof GetUsersSelfCharactersByIdLimitationsResponses]

export interface PutUsersByUserIdCharactersByIdRetireData {
  body?: never
  path: {
    /**
     * User id of the character owner.
     */
    userId: number
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/{userId}/characters/{id}/retire'
}

export interface PutUsersByUserIdCharactersByIdRetireErrors {
  /**
   * Bad Request.
   */
  400: unknown
  /**
   * Character not found.
   */
  404: unknown
}

export interface PutUsersByUserIdCharactersByIdRetireResponses {
  /**
   * Character rating reset.
   */
  200: CharacterViewModelResult
}

export type PutUsersByUserIdCharactersByIdRetireResponse = PutUsersByUserIdCharactersByIdRetireResponses[keyof PutUsersByUserIdCharactersByIdRetireResponses]

export interface PutUsersSelfCharactersByIdRetireData {
  body?: never
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}/retire'
}

export interface PutUsersSelfCharactersByIdRetireErrors {
  /**
   * Bad Request.
   */
  400: unknown
  /**
   * Character not found.
   */
  404: unknown
}

export interface PutUsersSelfCharactersByIdRetireResponses {
  /**
   * Retired.
   */
  200: CharacterViewModelResult
}

export type PutUsersSelfCharactersByIdRetireResponse = PutUsersSelfCharactersByIdRetireResponses[keyof PutUsersSelfCharactersByIdRetireResponses]

export interface PutUsersSelfCharactersByIdRespecializeData {
  body?: never
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}/respecialize'
}

export interface PutUsersSelfCharactersByIdRespecializeErrors {
  /**
   * Bad Request.
   */
  400: unknown
  /**
   * Character not found.
   */
  404: unknown
}

export interface PutUsersSelfCharactersByIdRespecializeResponses {
  /**
   * Respecialized.
   */
  200: CharacterViewModelResult
}

export type PutUsersSelfCharactersByIdRespecializeResponse = PutUsersSelfCharactersByIdRespecializeResponses[keyof PutUsersSelfCharactersByIdRespecializeResponses]

export interface PutUsersSelfCharactersByIdTournamentData {
  body?: never
  path: {
    /**
     * Character id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/characters/{id}/tournament'
}

export interface PutUsersSelfCharactersByIdTournamentErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersSelfCharactersByIdTournamentResponses {
  /**
   * Done.
   */
  200: CharacterViewModelResult
}

export type PutUsersSelfCharactersByIdTournamentResponse = PutUsersSelfCharactersByIdTournamentResponses[keyof PutUsersSelfCharactersByIdTournamentResponses]

export interface PutUsersByUserIdCharactersByCharacterIdRewardsData {
  /**
   * The reward.
   */
  body?: RewardCharacterCommand
  path: {
    /**
     * User id.
     */
    userId: number
    /**
     * Character id.
     */
    characterId: number
  }
  query?: never
  url: '/Users/{userId}/characters/{characterId}/rewards'
}

export interface PutUsersByUserIdCharactersByCharacterIdRewardsErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersByUserIdCharactersByCharacterIdRewardsResponses {
  /**
   * Done.
   */
  200: CharacterViewModelResult
}

export type PutUsersByUserIdCharactersByCharacterIdRewardsResponse = PutUsersByUserIdCharactersByCharacterIdRewardsResponses[keyof PutUsersByUserIdCharactersByCharacterIdRewardsResponses]

export interface GetUsersSelfItemsData {
  body?: never
  path?: never
  query?: never
  url: '/Users/self/items'
}

export interface GetUsersSelfItemsResponses {
  /**
   * OK
   */
  200: UserItemViewModelIListResult
}

export type GetUsersSelfItemsResponse = GetUsersSelfItemsResponses[keyof GetUsersSelfItemsResponses]

export interface PostUsersSelfItemsData {
  /**
   * The item to buy.
   */
  body?: BuyItemCommand
  path?: never
  query?: never
  url: '/Users/self/items'
}

export interface PostUsersSelfItemsErrors {
  /**
   * Bad Request.
   */
  400: unknown
  /**
   * Item was not found.
   */
  404: unknown
}

export interface PostUsersSelfItemsResponses {
  /**
   * Bought.
   */
  201: UserItemViewModelResult
}

export type PostUsersSelfItemsResponse = PostUsersSelfItemsResponses[keyof PostUsersSelfItemsResponses]

export interface PutUsersSelfItemsByIdReforgeData {
  body?: never
  path: {
    /**
     * User item id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/items/{id}/reforge'
}

export interface PutUsersSelfItemsByIdReforgeErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersSelfItemsByIdReforgeResponses {
  /**
   * Reforged.
   */
  200: UserItemViewModelResult
}

export type PutUsersSelfItemsByIdReforgeResponse = PutUsersSelfItemsByIdReforgeResponses[keyof PutUsersSelfItemsByIdReforgeResponses]

export interface PutUsersSelfItemsByIdRepairData {
  body?: never
  path: {
    /**
     * User item id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/items/{id}/repair'
}

export interface PutUsersSelfItemsByIdRepairErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersSelfItemsByIdRepairResponses {
  /**
   * repaired.
   */
  200: UserItemViewModelResult
}

export type PutUsersSelfItemsByIdRepairResponse = PutUsersSelfItemsByIdRepairResponses[keyof PutUsersSelfItemsByIdRepairResponses]

export interface PutUsersSelfItemsByIdUpgradeData {
  body?: never
  path: {
    /**
     * User item id.
     */
    id: number
  }
  query?: never
  url: '/Users/self/items/{id}/upgrade'
}

export interface PutUsersSelfItemsByIdUpgradeErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersSelfItemsByIdUpgradeResponses {
  /**
   * Upgraded.
   */
  200: UserItemViewModelResult
}

export type PutUsersSelfItemsByIdUpgradeResponse = PutUsersSelfItemsByIdUpgradeResponses[keyof PutUsersSelfItemsByIdUpgradeResponses]

export interface DeleteUsersSelfItemsByIdData {
  body?: never
  path: {
    /**
     * The id of the user item to sell.
     */
    id: number
  }
  query?: never
  url: '/Users/self/items/{id}'
}

export interface DeleteUsersSelfItemsByIdErrors {
  /**
   * Bad Request.
   */
  400: unknown
  /**
   * Item was not found.
   */
  404: unknown
}

export interface DeleteUsersSelfItemsByIdResponses {
  /**
   * Sold.
   */
  204: void
}

export type DeleteUsersSelfItemsByIdResponse = DeleteUsersSelfItemsByIdResponses[keyof DeleteUsersSelfItemsByIdResponses]

export interface GetUsersSelfClanData {
  body?: never
  path?: never
  query?: never
  url: '/Users/self/clan'
}

export interface GetUsersSelfClanResponses {
  /**
   * OK
   */
  200: UserClanViewModelResult
}

export type GetUsersSelfClanResponse = GetUsersSelfClanResponses[keyof GetUsersSelfClanResponses]

export interface GetUsersRewardRecentData {
  body?: never
  path?: never
  query?: never
  url: '/users/reward-recent'
}

export interface GetUsersRewardRecentResponses {
  /**
   * OK
   */
  200: unknown
}

export interface GetUsersSelfNotificationsData {
  body?: never
  path?: never
  query?: never
  url: '/Users/self/notifications'
}

export interface GetUsersSelfNotificationsResponses {
  /**
   * Ok.
   */
  200: UserNotificationsWithDictViewModelResult
}

export type GetUsersSelfNotificationsResponse = GetUsersSelfNotificationsResponses[keyof GetUsersSelfNotificationsResponses]

export interface DeleteUsersSelfNotificationsByIdData {
  body?: never
  path: {
    id: number
  }
  query?: never
  url: '/Users/self/notifications/{id}'
}

export interface DeleteUsersSelfNotificationsByIdErrors {
  /**
   * Bad Request.
   */
  400: unknown
  /**
   * Notification was not found.
   */
  404: unknown
}

export interface DeleteUsersSelfNotificationsByIdResponses {
  /**
   * Deleted.
   */
  204: void
}

export type DeleteUsersSelfNotificationsByIdResponse = DeleteUsersSelfNotificationsByIdResponses[keyof DeleteUsersSelfNotificationsByIdResponses]

export interface PutUsersSelfNotificationsByIdData {
  body?: never
  path: {
    id: number
  }
  query?: never
  url: '/Users/self/notifications/{id}'
}

export interface PutUsersSelfNotificationsByIdErrors {
  /**
   * Bad Request.
   */
  400: unknown
  /**
   * Notification was not found.
   */
  404: unknown
}

export interface PutUsersSelfNotificationsByIdResponses {
  /**
   * Read.
   */
  200: UserNotificationViewModelResult
}

export type PutUsersSelfNotificationsByIdResponse = PutUsersSelfNotificationsByIdResponses[keyof PutUsersSelfNotificationsByIdResponses]

export interface PutUsersSelfNotificationsReadAllData {
  body?: never
  path?: never
  query?: never
  url: '/Users/self/notifications/readAll'
}

export interface PutUsersSelfNotificationsReadAllErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface PutUsersSelfNotificationsReadAllResponses {
  /**
   * Read.
   */
  204: void
}

export type PutUsersSelfNotificationsReadAllResponse = PutUsersSelfNotificationsReadAllResponses[keyof PutUsersSelfNotificationsReadAllResponses]

export interface DeleteUsersSelfNotificationsDeleteAllData {
  body?: never
  path?: never
  query?: never
  url: '/Users/self/notifications/deleteAll'
}

export interface DeleteUsersSelfNotificationsDeleteAllErrors {
  /**
   * Bad Request.
   */
  400: unknown
}

export interface DeleteUsersSelfNotificationsDeleteAllResponses {
  /**
   * Deleted.
   */
  204: void
}

export type DeleteUsersSelfNotificationsDeleteAllResponse = DeleteUsersSelfNotificationsDeleteAllResponses[keyof DeleteUsersSelfNotificationsDeleteAllResponses]

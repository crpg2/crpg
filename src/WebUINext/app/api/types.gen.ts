// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseURL: 'https://localhost:8000' | (string & {});
};

export type ActivateCharacterCommand = {
    active: boolean;
};

export type ActivityLogMetadataEntitiesDictViewModel = {
    clans: Array<ClanPublicViewModel>;
    users: Array<UserPublicViewModel>;
    characters: Array<CharacterPublicViewModel>;
};

export type ActivityLogType = 'UserCreated' | 'UserDeleted' | 'UserRenamed' | 'UserRewarded' | 'ItemBought' | 'ItemSold' | 'ItemBroke' | 'ItemReforged' | 'ItemRepaired' | 'ItemUpgraded' | 'ItemReturned' | 'CharacterCreated' | 'CharacterDeleted' | 'CharacterRatingReset' | 'CharacterRespecialized' | 'CharacterRetired' | 'CharacterRewarded' | 'CharacterEarned' | 'ServerJoined' | 'ChatMessageSent' | 'TeamHit' | 'ClanCreated' | 'ClanDeleted' | 'ClanApplicationCreated' | 'ClanApplicationDeclined' | 'ClanApplicationAccepted' | 'ClanMemberKicked' | 'ClanMemberLeaved' | 'ClanMemberRoleEdited' | 'ClanArmoryAddItem' | 'ClanArmoryRemoveItem' | 'ClanArmoryReturnItem' | 'ClanArmoryBorrowItem';

export type ActivityLogViewModel = {
    id: number;
    type: ActivityLogType;
    userId: number;
    metadata: {
        [key: string]: string;
    };
    createdAt: Date;
};

export type ActivityLogViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<ActivityLogViewModel> | null;
};

export type ActivityLogWithDictViewModel = {
    activityLogs: Array<ActivityLogViewModel>;
    dict: ActivityLogMetadataEntitiesDictViewModel;
};

export type ActivityLogWithDictViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: ActivityLogWithDictViewModel;
};

export type AddItemToClanArmoryCommand = {
    userItemId: number;
};

export type AddSettlementItemCommand = {
    partyId: number;
    settlementId: number;
    itemId: string;
    count: number;
};

export type ApplyAsMercenaryToBattleCommand = {
    userId: number;
    characterId: number;
    battleId: number;
    side: BattleSide;
    wage: number;
    note: string;
};

export type ArmorMaterialType = 'Undefined' | 'Cloth' | 'Leather' | 'Chainmail' | 'Plate';

export type BattleDetailedViewModel = {
    id: number;
    region: Region;
    position: Point;
    phase: BattlePhase;
    attacker: BattleFighterViewModel;
    attackerTotalTroops: number;
    defender: BattleFighterViewModel;
    defenderTotalTroops: number;
    createdAt: Date;
};

export type BattleDetailedViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<BattleDetailedViewModel> | null;
};

export type BattleFighterApplicationStatus = 'Pending' | 'Declined' | 'Accepted';

export type BattleFighterApplicationViewModel = {
    id: number;
    party: PartyVisibleViewModel;
    side: BattleSide;
    status: BattleFighterApplicationStatus;
};

export type BattleFighterApplicationViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<BattleFighterApplicationViewModel> | null;
};

export type BattleFighterApplicationViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: BattleFighterApplicationViewModel;
};

export type BattleFighterViewModel = {
    id: number;
    party: PartyPublicViewModel;
    settlement: SettlementPublicViewModel;
    side: BattleSide;
    commander: boolean;
};

export type BattleFighterViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<BattleFighterViewModel> | null;
};

export type BattleMercenaryApplicationStatus = 'Pending' | 'Declined' | 'Accepted';

export type BattleMercenaryApplicationViewModel = {
    id: number;
    user: UserPublicViewModel;
    character: CharacterPublicViewModel;
    side: BattleSide;
    wage: number;
    note: string;
    status: BattleMercenaryApplicationStatus;
};

export type BattleMercenaryApplicationViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<BattleMercenaryApplicationViewModel> | null;
};

export type BattleMercenaryApplicationViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: BattleMercenaryApplicationViewModel;
};

export type BattleMercenaryViewModel = {
    id: number;
    user: UserPublicViewModel;
    character: CharacterPublicViewModel;
    side: BattleSide;
};

export type BattleMercenaryViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<BattleMercenaryViewModel> | null;
};

export type BattlePhase = 'Preparation' | 'Hiring' | 'Scheduled' | 'Live' | 'End';

export type BattleSide = 'Attacker' | 'Defender';

export type BattleViewModel = {
    id: number;
    region: Region;
    position: Point;
    phase: BattlePhase;
    createdAt: Date;
};

export type BattleViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: BattleViewModel;
};

export type BuyItemCommand = {
    itemId: string;
};

export type BuySettlementItemCommand = {
    partyId: number;
    itemId: string;
    itemCount: number;
    settlementId: number;
};

export type CharacterAttributesViewModel = {
    points: number;
    strength: number;
    agility: number;
};

export type CharacterCharacteristicConversion = 'AttributesToSkills' | 'SkillsToAttributes';

export type CharacterCharacteristicsViewModel = {
    attributes: CharacterAttributesViewModel;
    skills: CharacterSkillsViewModel;
    weaponProficiencies: CharacterWeaponProficienciesViewModel;
};

export type CharacterCharacteristicsViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: CharacterCharacteristicsViewModel;
};

export type CharacterClass = 'Peasant' | 'Infantry' | 'ShockInfantry' | 'Skirmisher' | 'Crossbowman' | 'Archer' | 'Cavalry' | 'MountedArcher';

export type CharacterLimitationsViewModel = {
    lastRespecializeAt: Date;
};

export type CharacterLimitationsViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: CharacterLimitationsViewModel;
};

export type CharacterPublicCompetitiveViewModel = {
    id: number;
    level: number;
    class: CharacterClass;
    statistics: Array<CharacterStatisticsViewModel>;
    user: UserPublicViewModel;
};

export type CharacterPublicCompetitiveViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<CharacterPublicCompetitiveViewModel> | null;
};

export type CharacterPublicViewModel = {
    id: number;
    level: number;
    name: string;
    class: CharacterClass;
};

export type CharacterRatingViewModel = {
    value: number;
    deviation: number;
    volatility: number;
    competitiveValue: number;
};

export type CharacterSkillsViewModel = {
    points: number;
    ironFlesh: number;
    powerStrike: number;
    powerDraw: number;
    powerThrow: number;
    athletics: number;
    riding: number;
    weaponMaster: number;
    mountedArchery: number;
    shield: number;
};

export type CharacterStatisticsViewModel = {
    kills: number;
    deaths: number;
    assists: number;
    playTime: number;
    gameMode: GameMode;
    rating: CharacterRatingViewModel;
};

export type CharacterViewModel = {
    id: number;
    name: string;
    generation: number;
    level: number;
    experience: number;
    class: CharacterClass;
    forTournament: boolean;
};

export type CharacterViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<CharacterViewModel> | null;
};

export type CharacterViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: CharacterViewModel;
};

export type CharacterWeaponProficienciesViewModel = {
    points: number;
    oneHanded: number;
    twoHanded: number;
    polearm: number;
    bow: number;
    throwing: number;
    crossbow: number;
};

export type ClanArmoryBorrowedItemViewModel = {
    borrowerUserId: number;
    userItemId: number;
};

export type ClanArmoryBorrowedItemViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: ClanArmoryBorrowedItemViewModel;
};

export type ClanArmoryItemViewModel = {
    userItemId: number;
    userId: number;
    borrowerUserId: number;
    item: ItemViewModel;
};

export type ClanArmoryItemViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<ClanArmoryItemViewModel> | null;
};

export type ClanArmoryItemViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: ClanArmoryItemViewModel;
};

export type ClanInvitationStatus = 'Pending' | 'Declined' | 'Accepted';

export type ClanInvitationType = 'Request' | 'Offer';

export type ClanInvitationViewModel = {
    id: number;
    invitee: UserPublicViewModel;
    inviter: UserPublicViewModel;
    type: ClanInvitationType;
    status: ClanInvitationStatus;
};

export type ClanInvitationViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<ClanInvitationViewModel> | null;
};

export type ClanInvitationViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: ClanInvitationViewModel;
};

export type ClanMemberRole = 'Member' | 'Officer' | 'Leader';

export type ClanMemberViewModel = {
    user: UserPublicViewModel;
    role: ClanMemberRole;
};

export type ClanMemberViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<ClanMemberViewModel> | null;
};

export type ClanMemberViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: ClanMemberViewModel;
};

export type ClanPublicViewModel = {
    id: number;
    tag: string;
    primaryColor: number;
    secondaryColor: number;
    name: string;
    bannerKey: string;
    region: Region;
    languages: Array<Languages>;
};

export type ClanViewModel = {
    id: number;
    tag: string;
    primaryColor: number;
    secondaryColor: number;
    name: string;
    description: string;
    bannerKey: string;
    region: Region;
    languages: Array<Languages>;
    discord: string | null;
    armoryTimeout: number;
};

export type ClanViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: ClanViewModel;
};

export type ClanWithMemberCountViewModel = {
    clan: ClanViewModel;
    memberCount: number;
};

export type ClanWithMemberCountViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<ClanWithMemberCountViewModel> | null;
};

export type ConvertCharacterCharacteristicsCommand = {
    conversion: CharacterCharacteristicConversion;
};

export type Coordinate = {
    x: number;
    y: number;
    z: number;
    m: number;
    coordinateValue: Coordinate;
    readonly isValid: boolean;
};

export type CoordinateEqualityComparer = {
    [key: string]: never;
};

export type CoordinateSequence = {
    readonly dimension: number;
    readonly measures: number;
    readonly spatial: number;
    ordinates: Ordinates;
    readonly hasZ: boolean;
    readonly hasM: boolean;
    readonly zOrdinateIndex: number;
    readonly mOrdinateIndex: number;
    first: Coordinate;
    last: Coordinate;
    readonly count: number;
};

export type CoordinateSequenceFactory = {
    ordinates: Ordinates;
};

export type CreateClanCommand = {
    tag: string;
    name: string;
    description: string;
    primaryColor: number;
    secondaryColor: number;
    bannerKey: string;
    region: Region;
    languages: Array<Languages>;
    discord: string | null;
    armoryTimeout: number;
};

export type CreatePartyCommand = {
    userId: number;
};

export type CreateTerrainCommand = {
    type: TerrainType;
    boundary: Polygon;
};

export type Culture = 'Neutral' | 'Aserai' | 'Battania' | 'Empire' | 'Khuzait' | 'Looters' | 'Sturgia' | 'Vlandia';

export type DamageType = 'Undefined' | 'Cut' | 'Pierce' | 'Blunt';

export type Dimension = 'Point' | 'Curve' | 'Surface' | 'Collapse' | 'Dontcare' | 'True' | 'False';

export type EditSettingsCommand = {
    discord?: string | null;
    steam?: string | null;
    patreon?: string | null;
    github?: string | null;
    reddit?: string | null;
    modDb?: string | null;
};

export type EnableItemCommand = {
    itemId: string;
    enable: boolean;
    userId: number;
};

export type Envelope = {
    readonly isNull: boolean;
    readonly width: number;
    readonly height: number;
    readonly diameter: number;
    readonly minX: number;
    readonly maxX: number;
    readonly minY: number;
    readonly maxY: number;
    readonly area: number;
    readonly minExtent: number;
    readonly maxExtent: number;
    centre: Coordinate;
};

export type EquippedItemIdViewModel = {
    slot: ItemSlot;
    userItemId: number | null;
};

export type EquippedItemViewModel = {
    slot: ItemSlot;
    userItem: UserItemViewModel;
};

export type EquippedItemViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<EquippedItemViewModel> | null;
};

export type _Error = {
    traceId?: string | null;
    type: ErrorType;
    code: ErrorCode;
    title?: string | null;
    detail?: string | null;
    source: ErrorSource;
    stackTrace?: string | null;
};

export type ErrorCode = 'ApplicationClosed' | 'ApplicationNotFound' | 'BattleInvalidPhase' | 'BattleNotFound' | 'BattleTooFar' | 'CharacterForTournament' | 'CharacterForTournamentNotFound' | 'CharacterGenerationRequirement' | 'CharacterLevelRequirementNotMet' | 'CharacterNotFound' | 'CharacterRecentlyCreated' | 'CharacteristicDecreased' | 'ClanInvitationClosed' | 'ClanInvitationNotFound' | 'ClanMemberRoleNotMet' | 'ClanNameAlreadyUsed' | 'ClanNeedLeader' | 'ClanNotFound' | 'ClanLeaderFound' | 'ClanTagAlreadyUsed' | 'Conflict' | 'FighterNotACommander' | 'InternalError' | 'InvalidField' | 'ItemAlreadyOwned' | 'ItemBadSlot' | 'ItemBroken' | 'ItemDisabled' | 'ItemNotBuyable' | 'ItemNotFound' | 'ItemNotOwned' | 'ItemNotReforgeable' | 'ItemNotSellable' | 'ItemNotUpgradable' | 'NotEnoughAttributePoints' | 'NotEnoughGold' | 'NotEnoughHeirloomPoints' | 'NotEnoughSkillPoints' | 'NotEnoughWeaponProficiencyPoints' | 'PartiesNotOnTheSameSide' | 'PartyFighter' | 'PartyInBattle' | 'PartyNotAFighter' | 'PartyNotEnoughTroops' | 'PartyNotFound' | 'PartyNotInASettlement' | 'PartyNotInSight' | 'PartyNotSettlementOwner' | 'SettlementNotFound' | 'SettlementTooFar' | 'SkillRequirementNotMet' | 'UserAlreadyInAClan' | 'UserAlreadyInTheClan' | 'UserAlreadyRegisteredToStrategus' | 'UserItemIsNotBroken' | 'UserItemMaxRankReached' | 'UserItemNotFound' | 'UserNotAClanMember' | 'UserNotFound' | 'UserNotificationNotFound' | 'UserNotInAClan' | 'UserRoleNotMet' | 'PersonalItemAlreadyExist' | 'SettingNotFound' | 'TerrainNotFound';

export type ErrorSource = {
    pointer?: string | null;
    parameter?: string | null;
};

export type ErrorType = 'InternalError' | 'Forbidden' | 'Conflict' | 'NotFound' | 'Validation';

export type GameCharacterViewModel = {
    id: number;
    name: string;
    generation: number;
    level: number;
    experience: number;
    class: CharacterClass;
    forTournament: boolean;
    characteristics: CharacterCharacteristicsViewModel;
    statistics: CharacterStatisticsViewModel;
    equippedItems: Array<GameEquippedItemViewModel>;
};

export type GameClanMemberViewModel = {
    clanId: number;
    role: ClanMemberRole;
};

export type GameEquippedItemViewModel = {
    slot: ItemSlot;
    userItem: GameUserItemViewModel;
};

export type GameMode = 'CRPGBattle' | 'CRPGConquest' | 'CRPGDTV' | 'CRPGDuel' | 'CRPGSiege' | 'CRPGTeamDeathmatch' | 'CRPGSkirmish' | 'CRPGUnknownGameMode' | 'CRPGCaptain';

export type GameModeCharacterStatisticsViewModelDictionaryResult = {
    readonly errors: Array<_Error> | null;
    data: {
        CRPGBattle: CharacterStatisticsViewModel;
        CRPGConquest: CharacterStatisticsViewModel;
        CRPGDTV: CharacterStatisticsViewModel;
        CRPGDuel: CharacterStatisticsViewModel;
        CRPGSiege: CharacterStatisticsViewModel;
        CRPGTeamDeathmatch: CharacterStatisticsViewModel;
        CRPGSkirmish: CharacterStatisticsViewModel;
        CRPGUnknownGameMode: CharacterStatisticsViewModel;
        CRPGCaptain: CharacterStatisticsViewModel;
    } | null;
};

export type GameRepairedItem = {
    itemId: string;
    repairCost: number;
    broke: boolean;
};

export type GameServerStats = {
    total: GameStats;
    regions: {
        Eu: {
            CRPGBattle: GameStats;
            CRPGConquest: GameStats;
            CRPGDTV: GameStats;
            CRPGDuel: GameStats;
            CRPGSiege: GameStats;
            CRPGTeamDeathmatch: GameStats;
            CRPGSkirmish: GameStats;
            CRPGUnknownGameMode: GameStats;
            CRPGCaptain: GameStats;
        };
        Na: {
            CRPGBattle: GameStats;
            CRPGConquest: GameStats;
            CRPGDTV: GameStats;
            CRPGDuel: GameStats;
            CRPGSiege: GameStats;
            CRPGTeamDeathmatch: GameStats;
            CRPGSkirmish: GameStats;
            CRPGUnknownGameMode: GameStats;
            CRPGCaptain: GameStats;
        };
        As: {
            CRPGBattle: GameStats;
            CRPGConquest: GameStats;
            CRPGDTV: GameStats;
            CRPGDuel: GameStats;
            CRPGSiege: GameStats;
            CRPGTeamDeathmatch: GameStats;
            CRPGSkirmish: GameStats;
            CRPGUnknownGameMode: GameStats;
            CRPGCaptain: GameStats;
        };
        Oc: {
            CRPGBattle: GameStats;
            CRPGConquest: GameStats;
            CRPGDTV: GameStats;
            CRPGDuel: GameStats;
            CRPGSiege: GameStats;
            CRPGTeamDeathmatch: GameStats;
            CRPGSkirmish: GameStats;
            CRPGUnknownGameMode: GameStats;
            CRPGCaptain: GameStats;
        };
    };
};

export type GameServerStatsResult = {
    readonly errors: Array<_Error> | null;
    data: GameServerStats;
};

export type GameStats = {
    playingCount: number;
};

export type GameUserDamagedItem = {
    userItemId: number;
    repairCost: number;
};

export type GameUserEffectiveReward = {
    gold: number;
    experience: number;
    levelUp: boolean;
};

export type GameUserItemViewModel = {
    id: number;
    itemId: string;
};

export type GameUserReward = {
    gold: number;
    experience: number;
};

export type GameUserUpdate = {
    userId: number;
    characterId: number;
    reward: GameUserReward;
    statistics: CharacterStatisticsViewModel;
    brokenItems: Array<GameUserDamagedItem>;
    instance: string;
};

export type GameUserViewModel = {
    id: number;
    platform: Platform;
    platformUserId: string;
    name: string;
    gold: number;
    heirloomPoints: number;
    experienceMultiplier: number;
    role: Role;
    region: Region;
    createdAt: Date;
    character: GameCharacterViewModel;
    restrictions: Array<RestrictionViewModel>;
    clanMembership: GameClanMemberViewModel;
};

export type GameUserViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: GameUserViewModel;
};

export type Geometry = {
    factory: GeometryFactory;
    userData?: unknown;
    srid: number;
    readonly geometryType?: string | null;
    ogcGeometryType: OgcGeometryType;
    precisionModel: PrecisionModel;
    coordinate: Coordinate;
    readonly coordinates?: Array<Coordinate> | null;
    readonly numPoints: number;
    readonly numGeometries: number;
    readonly isSimple: boolean;
    readonly isValid: boolean;
    readonly isEmpty: boolean;
    readonly area: number;
    readonly length: number;
    centroid: Point;
    interiorPoint: Point;
    pointOnSurface: Point;
    dimension: Dimension;
    boundary: Geometry;
    boundaryDimension: Dimension;
    envelope: Geometry;
    envelopeInternal: Envelope;
    readonly isRectangle: boolean;
};

export type GeometryFactory = {
    precisionModel: PrecisionModel;
    coordinateSequenceFactory: CoordinateSequenceFactory;
    readonly srid: number;
    geometryServices: NtsGeometryServices;
};

export type GeometryOverlay = {
    [key: string]: never;
};

export type InviteClanMemberCommand = {
    inviteeId: number;
};

export type ItemArmorComponentViewModel = {
    headArmor: number;
    bodyArmor: number;
    armArmor: number;
    legArmor: number;
    materialType: ArmorMaterialType;
    familyType: 0 | 1 | 2 | 3;
};

export type ItemFlags = 'ForceAttachOffHandPrimaryItemBone' | 'ForceAttachOffHandSecondaryItemBone' | 'NotUsableByFemale' | 'NotUsableByMale' | 'DropOnWeaponChange' | 'DropOnAnyAction' | 'CannotBePickedUp' | 'CanBePickedUpFromCorpse' | 'QuickFadeOut' | 'WoodenAttack' | 'WoodenParry' | 'HeldInOffHand' | 'HasToBeHeldUp' | 'UseTeamColor' | 'Civilian' | 'DoNotScaleBodyAccordingToWeaponLength' | 'DoesNotHideChest' | 'NotStackable';

export type ItemMountComponentViewModel = {
    bodyLength: number;
    chargeDamage: number;
    maneuver: number;
    speed: number;
    hitPoints: number;
    familyType: 0 | 1 | 2 | 3;
};

export type ItemSlot = 'Head' | 'Shoulder' | 'Body' | 'Hand' | 'Leg' | 'MountHarness' | 'Mount' | 'Weapon0' | 'Weapon1' | 'Weapon2' | 'Weapon3' | 'WeaponExtra';

export type ItemStack = {
    item: ItemViewModel;
    count: number;
};

export type ItemStackIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<ItemStack> | null;
};

export type ItemStackResult = {
    readonly errors: Array<_Error> | null;
    data: ItemStack;
};

export type ItemType = 'Undefined' | 'HeadArmor' | 'ShoulderArmor' | 'BodyArmor' | 'HandArmor' | 'LegArmor' | 'MountHarness' | 'Mount' | 'Shield' | 'Bow' | 'Crossbow' | 'OneHandedWeapon' | 'TwoHandedWeapon' | 'Polearm' | 'Thrown' | 'Arrows' | 'Bolts' | 'Pistol' | 'Musket' | 'Bullets' | 'Banner' | 'Ranged' | 'Ammo';

export type ItemViewModel = {
    id: string;
    baseId: string;
    name: string;
    culture: Culture;
    type: ItemType;
    price: number;
    tier: number;
    rank: number;
    requirement: number;
    weight: number;
    flags: Array<ItemFlags>;
    createdAt: Date;
    armor: ItemArmorComponentViewModel;
    mount: ItemMountComponentViewModel;
    weapons: Array<ItemWeaponComponentViewModel>;
    enabled: boolean;
};

export type ItemViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<ItemViewModel> | null;
};

export type ItemWeaponComponentViewModel = {
    class: WeaponClass;
    itemUsage: 'long_bow' | 'bow' | 'crossbow' | 'crossbow_light' | 'polearm_couch' | 'polearm_bracing' | 'polearm_pike' | 'polearm';
    accuracy: number;
    missileSpeed: number;
    stackAmount: number;
    length: number;
    balance: number;
    handling: number;
    bodyArmor: number;
    flags: Array<WeaponFlags>;
    thrustDamage: number;
    thrustDamageType: DamageType;
    thrustSpeed: number;
    swingDamage: number;
    swingDamageType: DamageType;
    swingSpeed: number;
};

export type Languages = 'En' | 'Zh' | 'Ru' | 'De' | 'Fr' | 'It' | 'Es' | 'Pl' | 'Uk' | 'Ro' | 'Nl' | 'Tr' | 'El' | 'Hu' | 'Sv' | 'Cs' | 'Pt' | 'Sr' | 'Bg' | 'Hr' | 'Da' | 'Fi' | 'No' | 'Be' | 'Lv';

export type LineString = {
    factory: GeometryFactory;
    userData?: unknown;
    srid: number;
    precisionModel: PrecisionModel;
    readonly numGeometries: number;
    readonly isSimple: boolean;
    readonly isValid: boolean;
    readonly area: number;
    centroid: Point;
    interiorPoint: Point;
    pointOnSurface: Point;
    envelope: Geometry;
    envelopeInternal: Envelope;
    readonly isRectangle: boolean;
    readonly coordinates?: Array<Coordinate> | null;
    coordinateSequence: CoordinateSequence;
    coordinate: Coordinate;
    dimension: Dimension;
    boundaryDimension: Dimension;
    readonly isEmpty: boolean;
    readonly numPoints: number;
    startPoint: Point;
    endPoint: Point;
    readonly isClosed: boolean;
    readonly isRing: boolean;
    readonly geometryType?: string | null;
    ogcGeometryType: OgcGeometryType;
    readonly length: number;
    boundary: Geometry;
    readonly count: number;
};

export type LinearRing = {
    factory: GeometryFactory;
    userData?: unknown;
    srid: number;
    precisionModel: PrecisionModel;
    readonly numGeometries: number;
    readonly isSimple: boolean;
    readonly isValid: boolean;
    readonly area: number;
    centroid: Point;
    interiorPoint: Point;
    pointOnSurface: Point;
    envelope: Geometry;
    envelopeInternal: Envelope;
    readonly isRectangle: boolean;
    readonly coordinates?: Array<Coordinate> | null;
    coordinateSequence: CoordinateSequence;
    coordinate: Coordinate;
    dimension: Dimension;
    readonly isEmpty: boolean;
    readonly numPoints: number;
    startPoint: Point;
    endPoint: Point;
    readonly isRing: boolean;
    ogcGeometryType: OgcGeometryType;
    readonly length: number;
    boundary: Geometry;
    readonly count: number;
    boundaryDimension: Dimension;
    readonly isClosed: boolean;
    readonly geometryType?: string | null;
    readonly isCCW: boolean;
};

export type NotificationState = 'Unread' | 'Read';

export type NotificationType = 'UserRewardedToUser' | 'CharacterRewardedToUser' | 'ItemReturned' | 'ClanApplicationCreatedToUser' | 'ClanApplicationCreatedToOfficers' | 'ClanApplicationAcceptedToUser' | 'ClanApplicationDeclinedToUser' | 'ClanMemberRoleChangedToUser' | 'ClanMemberLeavedToLeader' | 'ClanMemberKickedToExMember' | 'ClanArmoryBorrowItemToLender' | 'ClanArmoryRemoveItemToBorrower';

export type NtsGeometryServices = {
    geometryOverlay: GeometryOverlay;
    coordinateEqualityComparer: CoordinateEqualityComparer;
    readonly defaultSRID: number;
    defaultCoordinateSequenceFactory: CoordinateSequenceFactory;
    defaultPrecisionModel: PrecisionModel;
};

export type OgcGeometryType = 'Point' | 'LineString' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'CircularString' | 'CompoundCurve' | 'CurvePolygon' | 'MultiCurve' | 'MultiSurface' | 'Curve' | 'Surface' | 'PolyhedralSurface' | 'TIN';

export type Ordinates = 'None' | 'Spatial1' | 'Spatial2' | 'XY' | 'Spatial3' | 'XYZ' | 'Spatial4' | 'Spatial5' | 'Spatial6' | 'Spatial7' | 'Spatial8' | 'Spatial9' | 'Spatial10' | 'Spatial11' | 'Spatial12' | 'Spatial13' | 'Spatial14' | 'Spatial15' | 'Spatial16' | 'AllSpatialOrdinates' | 'Measure1' | 'XYM' | 'XYZM' | 'Measure2' | 'Measure3' | 'Measure4' | 'Measure5' | 'Measure6' | 'Measure7' | 'Measure8' | 'Measure9' | 'Measure10' | 'Measure11' | 'Measure12' | 'Measure13' | 'Measure14' | 'Measure15' | 'Measure16' | 'AllMeasureOrdinates' | 'AllOrdinates';

export type PartyPublicViewModel = {
    id: number;
    user: UserPublicViewModel;
};

export type PartyStatus = 'Idle' | 'IdleInSettlement' | 'RecruitingInSettlement' | 'MovingToPoint' | 'FollowingParty' | 'MovingToSettlement' | 'MovingToAttackParty' | 'MovingToAttackSettlement' | 'InBattle';

export type PartyViewModel = {
    id: number;
    gold: number;
    troops: number;
    position: Point;
    status: PartyStatus;
    waypoints: Array<Geometry>;
    targetedParty: PartyVisibleViewModel;
    targetedSettlement: SettlementPublicViewModel;
    user: UserPublicViewModel;
};

export type PartyViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: PartyViewModel;
};

export type PartyVisibleViewModel = {
    id: number;
    troops: number;
    position: Point;
    user: UserPublicViewModel;
};

export type PatchNotes = {
    id: string;
    title: string;
    tagName: string;
    url: string;
    createdAt: Date;
};

export type PatchNotesIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<PatchNotes> | null;
};

export type Platform = 'Steam' | 'EpicGames' | 'Microsoft';

export type Point = {
    factory: GeometryFactory;
    userData?: unknown;
    srid: number;
    precisionModel: PrecisionModel;
    readonly numGeometries: number;
    readonly isSimple: boolean;
    readonly isValid: boolean;
    readonly area: number;
    readonly length: number;
    centroid: Point;
    interiorPoint: Point;
    pointOnSurface: Point;
    envelope: Geometry;
    envelopeInternal: Envelope;
    readonly isRectangle: boolean;
    coordinateSequence: CoordinateSequence;
    readonly coordinates?: Array<Coordinate> | null;
    readonly numPoints: number;
    readonly isEmpty: boolean;
    dimension: Dimension;
    boundaryDimension: Dimension;
    x: number;
    y: number;
    coordinate: Coordinate;
    readonly geometryType?: string | null;
    ogcGeometryType: OgcGeometryType;
    boundary: Geometry;
    z: number;
    m: number;
};

export type Polygon = {
    factory: GeometryFactory;
    userData?: unknown;
    srid: number;
    precisionModel: PrecisionModel;
    readonly numGeometries: number;
    readonly isSimple: boolean;
    readonly isValid: boolean;
    centroid: Point;
    interiorPoint: Point;
    pointOnSurface: Point;
    envelope: Geometry;
    envelopeInternal: Envelope;
    coordinate: Coordinate;
    readonly coordinates?: Array<Coordinate> | null;
    readonly numPoints: number;
    dimension: Dimension;
    boundaryDimension: Dimension;
    readonly isEmpty: boolean;
    exteriorRing: LineString;
    readonly numInteriorRings: number;
    readonly interiorRings?: Array<LineString> | null;
    readonly geometryType?: string | null;
    ogcGeometryType: OgcGeometryType;
    readonly area: number;
    readonly length: number;
    boundary: Geometry;
    readonly isRectangle: boolean;
    shell: LinearRing;
    holes?: Array<LinearRing> | null;
};

export type PrecisionModel = {
    readonly isFloating: boolean;
    readonly maximumSignificantDigits: number;
    scale: number;
    readonly gridSize: number;
    precisionModelType: PrecisionModels;
};

export type PrecisionModels = 'Floating' | 'FloatingSingle' | 'Fixed';

export type RefundItemCommand = {
    itemId: string;
    userId: number;
};

export type Region = 'Eu' | 'Na' | 'As' | 'Oc';

export type RespondClanInvitationCommand = {
    accept: boolean;
};

export type RespondToBattleFighterApplicationCommand = {
    partyId: number;
    fighterApplicationId: number;
    accept: boolean;
};

export type RespondToBattleMercenaryApplicationCommand = {
    partyId: number;
    mercenaryApplicationId: number;
    accept: boolean;
};

export type RestrictCommand = {
    restrictedUserId: number;
    duration: number;
    type: RestrictionType;
    reason: string;
    publicReason: string;
};

export type RestrictionPublicViewModel = {
    id: number;
    duration: number;
    reason: string;
    createdAt: Date;
};

export type RestrictionPublicViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: RestrictionPublicViewModel;
};

export type RestrictionType = 'All' | 'Join' | 'Chat';

export type RestrictionViewModel = {
    id: number;
    restrictedUser: UserPrivateViewModel;
    duration: number;
    type: RestrictionType;
    reason: string;
    publicReason: string;
    restrictedByUser: UserPublicViewModel;
    createdAt: Date;
};

export type RestrictionViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<RestrictionViewModel> | null;
};

export type RestrictionViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: RestrictionViewModel;
};

export type RewardCharacterCommand = {
    experience: number;
    autoRetire: boolean;
};

export type RewardUserCommand = {
    gold: number;
    heirloomPoints: number;
    itemId: string;
};

export type Role = 'User' | 'Moderator' | 'GameAdmin' | 'Admin';

export type SettingsViewModel = {
    discord: string;
    steam: string;
    patreon: string;
    github: string;
    reddit: string;
    modDb: string;
};

export type SettingsViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: SettingsViewModel;
};

export type SettlementPublicViewModel = {
    id: number;
    name: string;
    type: SettlementType;
    position: Point;
    culture: Culture;
    region: Region;
    troops: number;
    owner: UserPublicViewModel;
};

export type SettlementPublicViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<SettlementPublicViewModel> | null;
};

export type SettlementPublicViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: SettlementPublicViewModel;
};

export type SettlementType = 'Village' | 'Castle' | 'Town';

export type StrategusUpdate = {
    party: PartyViewModel;
    visibleParties: Array<PartyVisibleViewModel>;
    visibleSettlements: Array<SettlementPublicViewModel>;
    visibleBattles: Array<BattleViewModel>;
};

export type StrategusUpdateResult = {
    readonly errors: Array<_Error> | null;
    data: StrategusUpdate;
};

export type TerrainType = 'Barrier' | 'ThickForest' | 'SparseForest' | 'ShallowWater' | 'DeepWater';

export type TerrainViewModel = {
    id: number;
    type: TerrainType;
    boundary: Polygon;
};

export type TerrainViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<TerrainViewModel> | null;
};

export type TerrainViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: TerrainViewModel;
};

export type UpdateCharacterCommand = {
    name: string;
};

export type UpdateCharacterItemsCommand = {
    items: Array<EquippedItemIdViewModel>;
};

export type UpdateClanCommand = {
    tag: string;
    name: string;
    description: string;
    primaryColor: number;
    secondaryColor: number;
    bannerKey: string;
    region: Region;
    languages: Array<Languages>;
    discord: string | null;
    armoryTimeout: number;
};

export type UpdateClanMemberCommand = {
    role: ClanMemberRole;
};

export type UpdateGameUserResult = {
    user: GameUserViewModel;
    effectiveReward: GameUserEffectiveReward;
    repairedItems: Array<GameRepairedItem>;
};

export type UpdateGameUsersCommand = {
    updates: Array<GameUserUpdate>;
    key: string;
};

export type UpdateGameUsersResult = {
    updateResults: Array<UpdateGameUserResult>;
};

export type UpdateGameUsersResultResult = {
    readonly errors: Array<_Error> | null;
    data: UpdateGameUsersResult;
};

export type UpdatePartyStatusCommand = {
    partyId: number;
    status: PartyStatus;
    waypoints: Array<Geometry>;
    targetedPartyId: number;
    targetedSettlementId: number;
};

export type UpdateSettlementCommand = {
    partyId: number;
    settlementId: number;
    troops: number;
};

export type UpdateTerrainCommand = {
    id: number;
    boundary: Polygon;
};

export type UpdateUserCommand = {
    userId: number;
};

export type UpdateUserNoteCommand = {
    note: string;
};

export type UserClanViewModel = {
    clan: ClanViewModel;
    role: ClanMemberRole;
};

export type UserClanViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: UserClanViewModel;
};

export type UserItemViewModel = {
    id: number;
    userId: number;
    item: ItemViewModel;
    isBroken: boolean;
    createdAt: Date;
    isArmoryItem: boolean;
    isPersonal: boolean;
};

export type UserItemViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<UserItemViewModel> | null;
};

export type UserItemViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: UserItemViewModel;
};

export type UserNotificationMetadataEntitiesDictViewModel = {
    clans: Array<ClanPublicViewModel>;
    users: Array<UserPublicViewModel>;
    characters: Array<CharacterPublicViewModel>;
};

export type UserNotificationViewModel = {
    id: number;
    state: NotificationState;
    type: NotificationType;
    metadata: {
        [key: string]: string;
    };
    createdAt: Date;
};

export type UserNotificationViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: UserNotificationViewModel;
};

export type UserNotificationsWithDictViewModel = {
    notifications: Array<UserNotificationViewModel>;
    dict: UserNotificationMetadataEntitiesDictViewModel;
};

export type UserNotificationsWithDictViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: UserNotificationsWithDictViewModel;
};

export type UserPrivateViewModel = {
    id: number;
    platform: Platform;
    gold: number;
    heirloomPoints: number;
    experienceMultiplier: number;
    platformUserId: string;
    name: string;
    avatar: string | null;
    region: Region;
    updatedAt: Date;
    createdAt: Date;
    isDonor: boolean;
    note: string;
    activeCharacterId: number | null;
    clanMembership: UserClanViewModel;
};

export type UserPrivateViewModelArrayResult = {
    readonly errors: Array<_Error> | null;
    data: Array<UserPrivateViewModel> | null;
};

export type UserPrivateViewModelIListResult = {
    readonly errors: Array<_Error> | null;
    data: Array<UserPrivateViewModel> | null;
};

export type UserPrivateViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: UserPrivateViewModel;
};

export type UserPublicViewModel = {
    id: number;
    platform: Platform;
    platformUserId: string;
    name: string;
    avatar: string | null;
    region: Region;
    clanMembership: UserClanViewModel;
};

export type UserViewModel = {
    id: number;
    platform: Platform;
    platformUserId: string;
    name: string;
    gold: number;
    heirloomPoints: number;
    experienceMultiplier: number;
    role: Role;
    region: Region;
    isDonor: boolean;
    avatar: string | null;
    activeCharacterId: number | null;
    unreadNotificationsCount: number;
    clanMembership: UserClanViewModel;
};

export type UserViewModelResult = {
    readonly errors: Array<_Error> | null;
    data: UserViewModel;
};

export type WeaponClass = 'Undefined' | 'Dagger' | 'OneHandedSword' | 'TwoHandedSword' | 'OneHandedAxe' | 'TwoHandedAxe' | 'Mace' | 'Pick' | 'TwoHandedMace' | 'OneHandedPolearm' | 'TwoHandedPolearm' | 'LowGripPolearm' | 'Arrow' | 'Bolt' | 'Cartridge' | 'Bow' | 'Crossbow' | 'Stone' | 'Boulder' | 'ThrowingAxe' | 'ThrowingKnife' | 'Javelin' | 'Pistol' | 'Musket' | 'SmallShield' | 'LargeShield' | 'Banner';

export type WeaponFlags = 'MeleeWeapon' | 'RangedWeapon' | 'FirearmAmmo' | 'NotUsableWithOneHand' | 'NotUsableWithTwoHand' | 'WideGrip' | 'AttachAmmoToVisual' | 'Consumable' | 'HasHitPoints' | 'HasString' | 'StringHeldByHand' | 'UnloadWhenSheathed' | 'AffectsArea' | 'AffectsAreaBig' | 'Burning' | 'BonusAgainstShield' | 'CanPenetrateShield' | 'CantReloadOnHorseback' | 'AutoReload' | 'TwoHandIdleOnMount' | 'NoBlood' | 'PenaltyWithShield' | 'CanDismount' | 'CanHook' | 'CanKnockDown' | 'CanCrushThrough' | 'CanBlockRanged' | 'MissileWithPhysics' | 'MultiplePenetration' | 'LeavesTrail' | 'UseHandAsThrowBase' | 'AmmoBreaksOnBounceBack' | 'AmmoCanBreakOnBounceBack' | 'AmmoSticksWhenShot' | 'CanReloadOnHorseback' | 'CantUseOnHorseback';

export type ActivityLogViewModelIListResultWritable = {
    data: Array<ActivityLogViewModel> | null;
};

export type ActivityLogWithDictViewModelResultWritable = {
    data: ActivityLogWithDictViewModel;
};

export type BattleDetailedViewModelIListResultWritable = {
    data: Array<BattleDetailedViewModel> | null;
};

export type BattleFighterApplicationViewModelIListResultWritable = {
    data: Array<BattleFighterApplicationViewModel> | null;
};

export type BattleFighterApplicationViewModelResultWritable = {
    data: BattleFighterApplicationViewModel;
};

export type BattleFighterViewModelIListResultWritable = {
    data: Array<BattleFighterViewModel> | null;
};

export type BattleMercenaryApplicationViewModelIListResultWritable = {
    data: Array<BattleMercenaryApplicationViewModel> | null;
};

export type BattleMercenaryApplicationViewModelResultWritable = {
    data: BattleMercenaryApplicationViewModel;
};

export type BattleMercenaryViewModelIListResultWritable = {
    data: Array<BattleMercenaryViewModel> | null;
};

export type BattleViewModelResultWritable = {
    data: BattleViewModel;
};

export type CharacterCharacteristicsViewModelResultWritable = {
    data: CharacterCharacteristicsViewModel;
};

export type CharacterLimitationsViewModelResultWritable = {
    data: CharacterLimitationsViewModel;
};

export type CharacterPublicCompetitiveViewModelIListResultWritable = {
    data: Array<CharacterPublicCompetitiveViewModel> | null;
};

export type CharacterViewModelIListResultWritable = {
    data: Array<CharacterViewModel> | null;
};

export type CharacterViewModelResultWritable = {
    data: CharacterViewModel;
};

export type ClanArmoryBorrowedItemViewModelResultWritable = {
    data: ClanArmoryBorrowedItemViewModel;
};

export type ClanArmoryItemViewModelIListResultWritable = {
    data: Array<ClanArmoryItemViewModel> | null;
};

export type ClanArmoryItemViewModelResultWritable = {
    data: ClanArmoryItemViewModel;
};

export type ClanInvitationViewModelIListResultWritable = {
    data: Array<ClanInvitationViewModel> | null;
};

export type ClanInvitationViewModelResultWritable = {
    data: ClanInvitationViewModel;
};

export type ClanMemberViewModelIListResultWritable = {
    data: Array<ClanMemberViewModel> | null;
};

export type ClanMemberViewModelResultWritable = {
    data: ClanMemberViewModel;
};

export type ClanViewModelResultWritable = {
    data: ClanViewModel;
};

export type ClanWithMemberCountViewModelIListResultWritable = {
    data: Array<ClanWithMemberCountViewModel> | null;
};

export type CoordinateWritable = {
    x: number;
    y: number;
    z: number;
    m: number;
    coordinateValue: CoordinateWritable;
};

export type CoordinateSequenceWritable = {
    ordinates: Ordinates;
    first: CoordinateWritable;
    last: CoordinateWritable;
};

export type EnvelopeWritable = {
    centre: CoordinateWritable;
};

export type EquippedItemViewModelIListResultWritable = {
    data: Array<EquippedItemViewModel> | null;
};

export type GameModeCharacterStatisticsViewModelDictionaryResultWritable = {
    data: {
        CRPGBattle: CharacterStatisticsViewModel;
        CRPGConquest: CharacterStatisticsViewModel;
        CRPGDTV: CharacterStatisticsViewModel;
        CRPGDuel: CharacterStatisticsViewModel;
        CRPGSiege: CharacterStatisticsViewModel;
        CRPGTeamDeathmatch: CharacterStatisticsViewModel;
        CRPGSkirmish: CharacterStatisticsViewModel;
        CRPGUnknownGameMode: CharacterStatisticsViewModel;
        CRPGCaptain: CharacterStatisticsViewModel;
    } | null;
};

export type GameServerStatsResultWritable = {
    data: GameServerStats;
};

export type GameUserViewModelResultWritable = {
    data: GameUserViewModel;
};

export type GeometryWritable = {
    factory: GeometryFactoryWritable;
    userData?: unknown;
    srid: number;
    ogcGeometryType: OgcGeometryType;
    precisionModel: PrecisionModelWritable;
    coordinate: CoordinateWritable;
    centroid: PointWritable;
    interiorPoint: PointWritable;
    pointOnSurface: PointWritable;
    dimension: Dimension;
    boundary: GeometryWritable;
    boundaryDimension: Dimension;
    envelope: GeometryWritable;
    envelopeInternal: EnvelopeWritable;
};

export type GeometryFactoryWritable = {
    precisionModel: PrecisionModelWritable;
    coordinateSequenceFactory: CoordinateSequenceFactory;
    geometryServices: NtsGeometryServicesWritable;
};

export type ItemStackIListResultWritable = {
    data: Array<ItemStack> | null;
};

export type ItemStackResultWritable = {
    data: ItemStack;
};

export type ItemViewModelIListResultWritable = {
    data: Array<ItemViewModel> | null;
};

export type LineStringWritable = {
    factory: GeometryFactoryWritable;
    userData?: unknown;
    srid: number;
    precisionModel: PrecisionModelWritable;
    centroid: PointWritable;
    interiorPoint: PointWritable;
    pointOnSurface: PointWritable;
    envelope: GeometryWritable;
    envelopeInternal: EnvelopeWritable;
    coordinateSequence: CoordinateSequenceWritable;
    coordinate: CoordinateWritable;
    dimension: Dimension;
    boundaryDimension: Dimension;
    startPoint: PointWritable;
    endPoint: PointWritable;
    ogcGeometryType: OgcGeometryType;
    boundary: GeometryWritable;
};

export type LinearRingWritable = {
    factory: GeometryFactoryWritable;
    userData?: unknown;
    srid: number;
    precisionModel: PrecisionModelWritable;
    centroid: PointWritable;
    interiorPoint: PointWritable;
    pointOnSurface: PointWritable;
    envelope: GeometryWritable;
    envelopeInternal: EnvelopeWritable;
    coordinateSequence: CoordinateSequenceWritable;
    coordinate: CoordinateWritable;
    dimension: Dimension;
    startPoint: PointWritable;
    endPoint: PointWritable;
    ogcGeometryType: OgcGeometryType;
    boundary: GeometryWritable;
    boundaryDimension: Dimension;
};

export type NtsGeometryServicesWritable = {
    geometryOverlay: GeometryOverlay;
    coordinateEqualityComparer: CoordinateEqualityComparer;
    defaultCoordinateSequenceFactory: CoordinateSequenceFactory;
    defaultPrecisionModel: PrecisionModelWritable;
};

export type PartyViewModelResultWritable = {
    data: PartyViewModel;
};

export type PatchNotesIListResultWritable = {
    data: Array<PatchNotes> | null;
};

export type PointWritable = {
    factory: GeometryFactoryWritable;
    userData?: unknown;
    srid: number;
    precisionModel: PrecisionModelWritable;
    centroid: PointWritable;
    interiorPoint: PointWritable;
    pointOnSurface: PointWritable;
    envelope: GeometryWritable;
    envelopeInternal: EnvelopeWritable;
    coordinateSequence: CoordinateSequenceWritable;
    dimension: Dimension;
    boundaryDimension: Dimension;
    x: number;
    y: number;
    coordinate: CoordinateWritable;
    ogcGeometryType: OgcGeometryType;
    boundary: GeometryWritable;
    z: number;
    m: number;
};

export type PolygonWritable = {
    factory: GeometryFactoryWritable;
    userData?: unknown;
    srid: number;
    precisionModel: PrecisionModelWritable;
    centroid: PointWritable;
    interiorPoint: PointWritable;
    pointOnSurface: PointWritable;
    envelope: GeometryWritable;
    envelopeInternal: EnvelopeWritable;
    coordinate: CoordinateWritable;
    dimension: Dimension;
    boundaryDimension: Dimension;
    exteriorRing: LineStringWritable;
    ogcGeometryType: OgcGeometryType;
    boundary: GeometryWritable;
    shell: LinearRingWritable;
    holes?: Array<LinearRingWritable> | null;
};

export type PrecisionModelWritable = {
    scale: number;
    precisionModelType: PrecisionModels;
};

export type RestrictionPublicViewModelResultWritable = {
    data: RestrictionPublicViewModel;
};

export type RestrictionViewModelIListResultWritable = {
    data: Array<RestrictionViewModel> | null;
};

export type RestrictionViewModelResultWritable = {
    data: RestrictionViewModel;
};

export type SettingsViewModelResultWritable = {
    data: SettingsViewModel;
};

export type SettlementPublicViewModelIListResultWritable = {
    data: Array<SettlementPublicViewModel> | null;
};

export type SettlementPublicViewModelResultWritable = {
    data: SettlementPublicViewModel;
};

export type StrategusUpdateResultWritable = {
    data: StrategusUpdate;
};

export type TerrainViewModelIListResultWritable = {
    data: Array<TerrainViewModel> | null;
};

export type TerrainViewModelResultWritable = {
    data: TerrainViewModel;
};

export type UpdateGameUsersResultResultWritable = {
    data: UpdateGameUsersResult;
};

export type UserClanViewModelResultWritable = {
    data: UserClanViewModel;
};

export type UserItemViewModelIListResultWritable = {
    data: Array<UserItemViewModel> | null;
};

export type UserItemViewModelResultWritable = {
    data: UserItemViewModel;
};

export type UserNotificationViewModelResultWritable = {
    data: UserNotificationViewModel;
};

export type UserNotificationsWithDictViewModelResultWritable = {
    data: UserNotificationsWithDictViewModel;
};

export type UserPrivateViewModelArrayResultWritable = {
    data: Array<UserPrivateViewModel> | null;
};

export type UserPrivateViewModelIListResultWritable = {
    data: Array<UserPrivateViewModel> | null;
};

export type UserPrivateViewModelResultWritable = {
    data: UserPrivateViewModel;
};

export type UserViewModelResultWritable = {
    data: UserViewModel;
};

export type GetActivityLogsData = {
    body?: never;
    path?: never;
    query: {
        from: Date;
        to: Date;
        'userId[]'?: Array<number>;
        'type[]'?: Array<ActivityLogType>;
    };
    url: '/activity-logs';
};

export type GetActivityLogsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type GetActivityLogsResponses = {
    /**
     * Ok.
     */
    200: ActivityLogWithDictViewModelResult;
};

export type GetActivityLogsResponse = GetActivityLogsResponses[keyof GetActivityLogsResponses];

export type GetBattlesData = {
    body?: never;
    path?: never;
    query: {
        region: Region;
        'phase[]'?: Array<BattlePhase>;
    };
    url: '/Battles';
};

export type GetBattlesResponses = {
    /**
     * OK
     */
    200: BattleDetailedViewModelIListResult;
};

export type GetBattlesResponse = GetBattlesResponses[keyof GetBattlesResponses];

export type GetBattlesByBattleIdData = {
    body?: never;
    path: {
        battleId: number;
    };
    query?: never;
    url: '/Battles/{battleId}';
};

export type GetBattlesByBattleIdResponses = {
    /**
     * OK
     */
    200: BattleViewModelResult;
};

export type GetBattlesByBattleIdResponse = GetBattlesByBattleIdResponses[keyof GetBattlesByBattleIdResponses];

export type GetBattlesByBattleIdFightersData = {
    body?: never;
    path: {
        battleId: number;
    };
    query?: never;
    url: '/Battles/{battleId}/fighters';
};

export type GetBattlesByBattleIdFightersErrors = {
    /**
     * Bad request.
     */
    400: unknown;
};

export type GetBattlesByBattleIdFightersResponses = {
    /**
     * Ok.
     */
    200: BattleFighterViewModelIListResult;
};

export type GetBattlesByBattleIdFightersResponse = GetBattlesByBattleIdFightersResponses[keyof GetBattlesByBattleIdFightersResponses];

export type PostBattlesByBattleIdFightersData = {
    body?: never;
    path: {
        battleId: number;
    };
    query?: never;
    url: '/Battles/{battleId}/fighters';
};

export type PostBattlesByBattleIdFightersErrors = {
    /**
     * Too far from the battle, ...
     */
    400: unknown;
};

export type PostBattlesByBattleIdFightersResponses = {
    /**
     * Applied.
     */
    200: BattleFighterApplicationViewModelResult;
};

export type PostBattlesByBattleIdFightersResponse = PostBattlesByBattleIdFightersResponses[keyof PostBattlesByBattleIdFightersResponses];

export type GetBattlesByBattleIdFighterApplicationsData = {
    body?: never;
    path: {
        battleId: number;
    };
    query?: {
        'status[]'?: Array<BattleFighterApplicationStatus>;
    };
    url: '/Battles/{battleId}/fighter-applications';
};

export type GetBattlesByBattleIdFighterApplicationsErrors = {
    /**
     * Bad request.
     */
    400: unknown;
};

export type GetBattlesByBattleIdFighterApplicationsResponses = {
    /**
     * Ok.
     */
    200: BattleFighterApplicationViewModelIListResult;
};

export type GetBattlesByBattleIdFighterApplicationsResponse = GetBattlesByBattleIdFighterApplicationsResponses[keyof GetBattlesByBattleIdFighterApplicationsResponses];

export type PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseData = {
    body?: RespondToBattleFighterApplicationCommand;
    path: {
        battleId: number;
        applicationId: number;
    };
    query?: never;
    url: '/Battles/{battleId}/fighter-applications/{applicationId}/response';
};

export type PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseErrors = {
    /**
     * Bad request.
     */
    400: unknown;
};

export type PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponses = {
    /**
     * Ok.
     */
    200: BattleFighterApplicationViewModelResult;
};

export type PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponse = PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponses[keyof PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponses];

export type GetBattlesByBattleIdMercenariesData = {
    body?: never;
    path: {
        battleId: number;
    };
    query?: never;
    url: '/Battles/{battleId}/mercenaries';
};

export type GetBattlesByBattleIdMercenariesErrors = {
    /**
     * Bad request.
     */
    400: unknown;
};

export type GetBattlesByBattleIdMercenariesResponses = {
    /**
     * Ok.
     */
    200: BattleMercenaryViewModelIListResult;
};

export type GetBattlesByBattleIdMercenariesResponse = GetBattlesByBattleIdMercenariesResponses[keyof GetBattlesByBattleIdMercenariesResponses];

export type GetBattlesByBattleIdMercenaryApplicationsData = {
    body?: never;
    path: {
        battleId: number;
    };
    query?: {
        'status[]'?: Array<BattleMercenaryApplicationStatus>;
    };
    url: '/Battles/{battleId}/mercenary-applications';
};

export type GetBattlesByBattleIdMercenaryApplicationsErrors = {
    /**
     * Bad request.
     */
    400: unknown;
};

export type GetBattlesByBattleIdMercenaryApplicationsResponses = {
    /**
     * Ok.
     */
    200: BattleMercenaryApplicationViewModelIListResult;
};

export type GetBattlesByBattleIdMercenaryApplicationsResponse = GetBattlesByBattleIdMercenaryApplicationsResponses[keyof GetBattlesByBattleIdMercenaryApplicationsResponses];

export type PostBattlesByBattleIdMercenaryApplicationsData = {
    body?: ApplyAsMercenaryToBattleCommand;
    path: {
        battleId: number;
    };
    query?: never;
    url: '/Battles/{battleId}/mercenary-applications';
};

export type PostBattlesByBattleIdMercenaryApplicationsErrors = {
    /**
     * Bad request.
     */
    400: unknown;
};

export type PostBattlesByBattleIdMercenaryApplicationsResponses = {
    /**
     * Applied.
     */
    200: BattleMercenaryApplicationViewModelResult;
};

export type PostBattlesByBattleIdMercenaryApplicationsResponse = PostBattlesByBattleIdMercenaryApplicationsResponses[keyof PostBattlesByBattleIdMercenaryApplicationsResponses];

export type PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseData = {
    body?: RespondToBattleMercenaryApplicationCommand;
    path: {
        battleId: number;
        applicationId: number;
    };
    query?: never;
    url: '/Battles/{battleId}/mercenary-applications/{applicationId}/response';
};

export type PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseErrors = {
    /**
     * Bad request.
     */
    400: unknown;
};

export type PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponses = {
    /**
     * Ok.
     */
    200: BattleMercenaryApplicationViewModelResult;
};

export type PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponse = PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponses[keyof PutBattlesByBattleIdMercenaryApplicationsByApplicationIdResponseResponses];

export type GetClansByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/Clans/{id}';
};

export type GetClansByIdErrors = {
    /**
     * Clan was not found.
     */
    404: unknown;
};

export type GetClansByIdResponses = {
    /**
     * Ok.
     */
    200: ClanViewModelResult;
};

export type GetClansByIdResponse = GetClansByIdResponses[keyof GetClansByIdResponses];

export type GetClansByIdMembersData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/Clans/{id}/members';
};

export type GetClansByIdMembersErrors = {
    /**
     * Clan was not found.
     */
    404: unknown;
};

export type GetClansByIdMembersResponses = {
    /**
     * Ok.
     */
    200: ClanMemberViewModelIListResult;
};

export type GetClansByIdMembersResponse = GetClansByIdMembersResponses[keyof GetClansByIdMembersResponses];

export type DeleteClansByClanIdMembersByUserIdData = {
    body?: never;
    path: {
        clanId: number;
        userId: number;
    };
    query?: never;
    url: '/Clans/{clanId}/members/{userId}';
};

export type DeleteClansByClanIdMembersByUserIdErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type DeleteClansByClanIdMembersByUserIdResponses = {
    /**
     * OK
     */
    200: unknown;
    /**
     * Kicked or left.
     */
    204: void;
};

export type DeleteClansByClanIdMembersByUserIdResponse = DeleteClansByClanIdMembersByUserIdResponses[keyof DeleteClansByClanIdMembersByUserIdResponses];

export type PutClansByClanIdMembersByUserIdData = {
    /**
     * The entire member with the updated values.
     */
    body?: UpdateClanMemberCommand;
    path: {
        /**
         * Clan id.
         */
        clanId: number;
        /**
         * User id.
         */
        userId: number;
    };
    query?: never;
    url: '/Clans/{clanId}/members/{userId}';
};

export type PutClansByClanIdMembersByUserIdErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutClansByClanIdMembersByUserIdResponses = {
    /**
     * Updated.
     */
    200: ClanMemberViewModelResult;
};

export type PutClansByClanIdMembersByUserIdResponse = PutClansByClanIdMembersByUserIdResponses[keyof PutClansByClanIdMembersByUserIdResponses];

export type GetClansData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Clans';
};

export type GetClansResponses = {
    /**
     * Ok.
     */
    200: ClanWithMemberCountViewModelIListResult;
};

export type GetClansResponse = GetClansResponses[keyof GetClansResponses];

export type PostClansData = {
    /**
     * Clan info.
     */
    body?: CreateClanCommand;
    path?: never;
    query?: never;
    url: '/Clans';
};

export type PostClansErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PostClansResponses = {
    /**
     * OK
     */
    200: ClanViewModelResult;
};

export type PostClansResponse = PostClansResponses[keyof PostClansResponses];

export type PutClansByClanIdData = {
    /**
     * The clan update.
     */
    body?: UpdateClanCommand;
    path: {
        /**
         * Clan id.
         */
        clanId: number;
    };
    query?: never;
    url: '/Clans/{clanId}';
};

export type PutClansByClanIdErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutClansByClanIdResponses = {
    /**
     * Updated.
     */
    200: ClanViewModelResult;
};

export type PutClansByClanIdResponse = PutClansByClanIdResponses[keyof PutClansByClanIdResponses];

export type GetClansByClanIdInvitationsData = {
    body?: never;
    path: {
        clanId: number;
    };
    query?: {
        'type[]'?: Array<ClanInvitationType>;
        'status[]'?: Array<ClanInvitationStatus>;
    };
    url: '/Clans/{clanId}/invitations';
};

export type GetClansByClanIdInvitationsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type GetClansByClanIdInvitationsResponses = {
    /**
     * Ok.
     */
    200: ClanInvitationViewModelIListResult;
};

export type GetClansByClanIdInvitationsResponse = GetClansByClanIdInvitationsResponses[keyof GetClansByClanIdInvitationsResponses];

export type PostClansByClanIdInvitationsData = {
    body?: InviteClanMemberCommand;
    path: {
        clanId: number;
    };
    query?: never;
    url: '/Clans/{clanId}/invitations';
};

export type PostClansByClanIdInvitationsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PostClansByClanIdInvitationsResponses = {
    /**
     * OK
     */
    200: ClanInvitationViewModelResult;
    /**
     * Invitation created.
     */
    201: unknown;
};

export type PostClansByClanIdInvitationsResponse = PostClansByClanIdInvitationsResponses[keyof PostClansByClanIdInvitationsResponses];

export type PutClansByClanIdInvitationsByInvitationIdResponseData = {
    body?: RespondClanInvitationCommand;
    path: {
        clanId: number;
        invitationId: number;
    };
    query?: never;
    url: '/Clans/{clanId}/invitations/{invitationId}/response';
};

export type PutClansByClanIdInvitationsByInvitationIdResponseErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutClansByClanIdInvitationsByInvitationIdResponseResponses = {
    /**
     * Responded successfully.
     */
    200: ClanInvitationViewModelResult;
};

export type PutClansByClanIdInvitationsByInvitationIdResponseResponse = PutClansByClanIdInvitationsByInvitationIdResponseResponses[keyof PutClansByClanIdInvitationsByInvitationIdResponseResponses];

export type GetClansByClanIdArmoryData = {
    body?: never;
    path: {
        /**
         * Clan id.
         */
        clanId: number;
    };
    query?: never;
    url: '/Clans/{clanId}/armory';
};

export type GetClansByClanIdArmoryErrors = {
    /**
     * Clan was not found.
     */
    404: unknown;
};

export type GetClansByClanIdArmoryResponses = {
    /**
     * Ok.
     */
    200: ClanArmoryItemViewModelIListResult;
};

export type GetClansByClanIdArmoryResponse = GetClansByClanIdArmoryResponses[keyof GetClansByClanIdArmoryResponses];

export type PostClansByClanIdArmoryData = {
    /**
     * Item id.
     */
    body?: AddItemToClanArmoryCommand;
    path: {
        /**
         * Clan id.
         */
        clanId: number;
    };
    query?: never;
    url: '/Clans/{clanId}/armory';
};

export type PostClansByClanIdArmoryErrors = {
    /**
     * Bad request.
     */
    400: unknown;
    /**
     * Conflict.
     */
    409: unknown;
};

export type PostClansByClanIdArmoryResponses = {
    /**
     * OK
     */
    200: ClanArmoryItemViewModelResult;
    /**
     * Item added to clan armory.
     */
    201: unknown;
};

export type PostClansByClanIdArmoryResponse = PostClansByClanIdArmoryResponses[keyof PostClansByClanIdArmoryResponses];

export type DeleteClansByClanIdArmoryByUserItemIdData = {
    body?: never;
    path: {
        /**
         * Clan id.
         */
        clanId: number;
        /**
         * Item id.
         */
        userItemId: number;
    };
    query?: never;
    url: '/Clans/{clanId}/armory/{userItemId}';
};

export type DeleteClansByClanIdArmoryByUserItemIdErrors = {
    /**
     * Bad request.
     */
    400: unknown;
};

export type DeleteClansByClanIdArmoryByUserItemIdResponses = {
    /**
     * OK
     */
    200: unknown;
    /**
     * Item removed from clan armory.
     */
    204: void;
};

export type DeleteClansByClanIdArmoryByUserItemIdResponse = DeleteClansByClanIdArmoryByUserItemIdResponses[keyof DeleteClansByClanIdArmoryByUserItemIdResponses];

export type PutClansByClanIdArmoryByUserItemIdBorrowData = {
    body?: never;
    path: {
        /**
         * Clan id.
         */
        clanId: number;
        /**
         * Item id.
         */
        userItemId: number;
    };
    query?: never;
    url: '/Clans/{clanId}/armory/{userItemId}/borrow';
};

export type PutClansByClanIdArmoryByUserItemIdBorrowErrors = {
    /**
     * Bad request.
     */
    400: unknown;
};

export type PutClansByClanIdArmoryByUserItemIdBorrowResponses = {
    /**
     * Ok.
     */
    200: ClanArmoryBorrowedItemViewModelResult;
};

export type PutClansByClanIdArmoryByUserItemIdBorrowResponse = PutClansByClanIdArmoryByUserItemIdBorrowResponses[keyof PutClansByClanIdArmoryByUserItemIdBorrowResponses];

export type PutClansByClanIdArmoryByUserItemIdReturnData = {
    body?: never;
    path: {
        /**
         * Clan id.
         */
        clanId: number;
        /**
         * Item id.
         */
        userItemId: number;
    };
    query?: never;
    url: '/Clans/{clanId}/armory/{userItemId}/return';
};

export type PutClansByClanIdArmoryByUserItemIdReturnErrors = {
    /**
     * Bad request.
     */
    400: unknown;
};

export type PutClansByClanIdArmoryByUserItemIdReturnResponses = {
    /**
     * Ok.
     */
    200: unknown;
};

export type GetConnectAuthorizeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Connect/authorize';
};

export type GetConnectAuthorizeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostConnectAuthorizeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Connect/authorize';
};

export type PostConnectAuthorizeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostConnectTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Connect/token';
};

export type PostConnectTokenResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetConnectCallbackEpicGamesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Connect/callback-epic-games';
};

export type GetConnectCallbackEpicGamesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetConnectCallbackMicrosoftData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Connect/callback-microsoft';
};

export type GetConnectCallbackMicrosoftResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetConnectLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Connect/logout';
};

export type GetConnectLogoutResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetGameServerStatisticsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/game-server-statistics';
};

export type GetGameServerStatisticsResponses = {
    /**
     * OK
     */
    200: GameServerStatsResult;
};

export type GetGameServerStatisticsResponse = GetGameServerStatisticsResponses[keyof GetGameServerStatisticsResponses];

export type GetGamesUsersData = {
    body?: never;
    path?: never;
    query: {
        platform: Platform;
        platformUserId?: string;
        region: Region;
        instance?: string;
    };
    url: '/Games/users';
};

export type GetGamesUsersResponses = {
    /**
     * OK
     */
    200: GameUserViewModelResult;
};

export type GetGamesUsersResponse = GetGamesUsersResponses[keyof GetGamesUsersResponses];

export type PutGamesUsersData = {
    body?: UpdateGameUsersCommand;
    path?: never;
    query?: never;
    url: '/Games/users';
};

export type PutGamesUsersResponses = {
    /**
     * OK
     */
    200: UpdateGameUsersResultResult;
};

export type PutGamesUsersResponse = PutGamesUsersResponses[keyof PutGamesUsersResponses];

export type GetGamesTournamentUsersData = {
    body?: never;
    path?: never;
    query: {
        platform: Platform;
        platformUserId?: string;
    };
    url: '/Games/tournament-users';
};

export type GetGamesTournamentUsersResponses = {
    /**
     * OK
     */
    200: GameUserViewModelResult;
};

export type GetGamesTournamentUsersResponse = GetGamesTournamentUsersResponses[keyof GetGamesTournamentUsersResponses];

export type PostGamesActivityLogsData = {
    /**
     * The activity logs to insert.
     */
    body?: Array<ActivityLogViewModel>;
    path?: never;
    query?: never;
    url: '/Games/activity-logs';
};

export type PostGamesActivityLogsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PostGamesActivityLogsResponses = {
    /**
     * Inserted.
     */
    200: unknown;
};

export type GetGamesClansByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/Games/clans/{id}';
};

export type GetGamesClansByIdErrors = {
    /**
     * Clan was not found.
     */
    404: unknown;
};

export type GetGamesClansByIdResponses = {
    /**
     * Ok.
     */
    200: ClanViewModelResult;
};

export type GetGamesClansByIdResponse = GetGamesClansByIdResponses[keyof GetGamesClansByIdResponses];

export type PostGamesRestrictionsData = {
    body?: RestrictCommand;
    path?: never;
    query?: never;
    url: '/Games/restrictions';
};

export type PostGamesRestrictionsResponses = {
    /**
     * OK
     */
    200: RestrictionViewModelResult;
};

export type PostGamesRestrictionsResponse = PostGamesRestrictionsResponses[keyof PostGamesRestrictionsResponses];

export type GetItemsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Items';
};

export type GetItemsResponses = {
    /**
     * Ok.
     */
    200: ItemViewModelIListResult;
};

export type GetItemsResponse = GetItemsResponses[keyof GetItemsResponses];

export type GetItemsUpgradesByBaseIdData = {
    body?: never;
    path?: {
        baseId?: string;
    };
    query?: never;
    url: '/Items/upgrades/{baseId}';
};

export type GetItemsUpgradesByBaseIdResponses = {
    /**
     * OK
     */
    200: ItemViewModelIListResult;
};

export type GetItemsUpgradesByBaseIdResponse = GetItemsUpgradesByBaseIdResponses[keyof GetItemsUpgradesByBaseIdResponses];

export type PutItemsByIdEnableData = {
    /**
     * Enabling value.
     */
    body?: EnableItemCommand;
    path?: {
        /**
         * Item id.
         */
        id?: string;
    };
    query?: never;
    url: '/Items/{id}/enable';
};

export type PutItemsByIdEnableErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutItemsByIdEnableResponses = {
    /**
     * OK
     */
    200: unknown;
    /**
     * Updated.
     */
    204: void;
};

export type PutItemsByIdEnableResponse = PutItemsByIdEnableResponses[keyof PutItemsByIdEnableResponses];

export type PostItemsByIdRefundData = {
    /**
     * Value.
     */
    body?: RefundItemCommand;
    path?: {
        /**
         * Item id.
         */
        id?: string;
    };
    query?: never;
    url: '/Items/{id}/refund';
};

export type PostItemsByIdRefundErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PostItemsByIdRefundResponses = {
    /**
     * OK.
     */
    200: unknown;
};

export type GetLeaderboardLeaderboardData = {
    body?: never;
    path?: never;
    query?: {
        region?: Region;
        characterClass?: CharacterClass;
        gameMode?: GameMode;
    };
    url: '/Leaderboard/leaderboard';
};

export type GetLeaderboardLeaderboardResponses = {
    /**
     * Ok.
     */
    200: CharacterPublicCompetitiveViewModelIListResult;
};

export type GetLeaderboardLeaderboardResponse = GetLeaderboardLeaderboardResponses[keyof GetLeaderboardLeaderboardResponses];

export type GetPartiesSelfUpdateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Parties/self/update';
};

export type GetPartiesSelfUpdateErrors = {
    /**
     * User was not registered to strategus.
     */
    404: unknown;
};

export type GetPartiesSelfUpdateResponses = {
    /**
     * Ok.
     */
    200: StrategusUpdateResult;
};

export type GetPartiesSelfUpdateResponse = GetPartiesSelfUpdateResponses[keyof GetPartiesSelfUpdateResponses];

export type PostPartiesData = {
    body?: CreatePartyCommand;
    path?: never;
    query?: never;
    url: '/Parties';
};

export type PostPartiesErrors = {
    /**
     * Already registered.
     */
    400: unknown;
};

export type PostPartiesResponses = {
    /**
     * Registered.
     */
    201: PartyViewModelResult;
};

export type PostPartiesResponse = PostPartiesResponses[keyof PostPartiesResponses];

export type PutPartiesSelfStatusData = {
    body?: UpdatePartyStatusCommand;
    path?: never;
    query?: never;
    url: '/Parties/self/status';
};

export type PutPartiesSelfStatusResponses = {
    /**
     * Updated.
     */
    200: PartyViewModelResult;
};

export type PutPartiesSelfStatusResponse = PutPartiesSelfStatusResponses[keyof PutPartiesSelfStatusResponses];

export type PostPartiesSelfItemsData = {
    body?: BuySettlementItemCommand;
    path?: never;
    query?: never;
    url: '/Parties/self/items';
};

export type PostPartiesSelfItemsErrors = {
    /**
     * Too far from the settlement, item not available, ...
     */
    400: unknown;
};

export type PostPartiesSelfItemsResponses = {
    /**
     * Bought.
     */
    200: ItemStackResult;
};

export type PostPartiesSelfItemsResponse = PostPartiesSelfItemsResponses[keyof PostPartiesSelfItemsResponses];

export type GetPatchNotesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/patch-notes';
};

export type GetPatchNotesResponses = {
    /**
     * OK
     */
    200: PatchNotesIListResult;
};

export type GetPatchNotesResponse = GetPatchNotesResponses[keyof GetPatchNotesResponses];

export type GetRestrictionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Restrictions';
};

export type GetRestrictionsResponses = {
    /**
     * Ok.
     */
    200: RestrictionViewModelIListResult;
};

export type GetRestrictionsResponse = GetRestrictionsResponses[keyof GetRestrictionsResponses];

export type PostRestrictionsData = {
    /**
     * Restriction info.
     */
    body?: RestrictCommand;
    path?: never;
    query?: never;
    url: '/Restrictions';
};

export type PostRestrictionsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
    /**
     * User was not found.
     */
    404: unknown;
};

export type PostRestrictionsResponses = {
    /**
     * OK
     */
    200: RestrictionViewModelResult;
    /**
     * Restricted.
     */
    201: unknown;
};

export type PostRestrictionsResponse = PostRestrictionsResponses[keyof PostRestrictionsResponses];

export type GetSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Settings';
};

export type GetSettingsResponses = {
    /**
     * Ok.
     */
    200: SettingsViewModelResult;
};

export type GetSettingsResponse = GetSettingsResponses[keyof GetSettingsResponses];

export type PatchSettingsData = {
    body?: EditSettingsCommand;
    path?: never;
    query?: never;
    url: '/Settings';
};

export type PatchSettingsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PatchSettingsResponses = {
    /**
     * OK
     */
    200: SettingsViewModelResult;
    /**
     * Created.
     */
    201: unknown;
};

export type PatchSettingsResponse = PatchSettingsResponses[keyof PatchSettingsResponses];

export type GetSettlementsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Settlements';
};

export type GetSettlementsResponses = {
    /**
     * OK
     */
    200: SettlementPublicViewModelIListResult;
};

export type GetSettlementsResponse = GetSettlementsResponses[keyof GetSettlementsResponses];

export type GetSettlementsBySettlementIdData = {
    body?: never;
    path: {
        settlementId: number;
    };
    query?: never;
    url: '/Settlements/{settlementId}';
};

export type GetSettlementsBySettlementIdResponses = {
    /**
     * OK
     */
    200: SettlementPublicViewModelResult;
};

export type GetSettlementsBySettlementIdResponse = GetSettlementsBySettlementIdResponses[keyof GetSettlementsBySettlementIdResponses];

export type PostSettlementsBySettlementIdData = {
    body?: UpdateSettlementCommand;
    path: {
        settlementId: number;
    };
    query?: never;
    url: '/Settlements/{settlementId}';
};

export type PostSettlementsBySettlementIdResponses = {
    /**
     * OK
     */
    200: SettlementPublicViewModelResult;
};

export type PostSettlementsBySettlementIdResponse = PostSettlementsBySettlementIdResponses[keyof PostSettlementsBySettlementIdResponses];

export type GetSettlementsBySettlementIdItemsData = {
    body?: never;
    path: {
        settlementId: number;
    };
    query?: never;
    url: '/Settlements/{settlementId}/items';
};

export type GetSettlementsBySettlementIdItemsResponses = {
    /**
     * OK
     */
    200: ItemStackIListResult;
};

export type GetSettlementsBySettlementIdItemsResponse = GetSettlementsBySettlementIdItemsResponses[keyof GetSettlementsBySettlementIdItemsResponses];

export type PostSettlementsBySettlementIdItemsData = {
    body?: AddSettlementItemCommand;
    path: {
        settlementId: number;
    };
    query?: never;
    url: '/Settlements/{settlementId}/items';
};

export type PostSettlementsBySettlementIdItemsResponses = {
    /**
     * OK
     */
    200: ItemStackResult;
};

export type PostSettlementsBySettlementIdItemsResponse = PostSettlementsBySettlementIdItemsResponses[keyof PostSettlementsBySettlementIdItemsResponses];

export type GetSettlementsBySettlementIdShopItemsData = {
    body?: never;
    path: {
        settlementId: number;
    };
    query?: never;
    url: '/Settlements/{settlementId}/shop/items';
};

export type GetSettlementsBySettlementIdShopItemsResponses = {
    /**
     * OK
     */
    200: ItemViewModelIListResult;
};

export type GetSettlementsBySettlementIdShopItemsResponse = GetSettlementsBySettlementIdShopItemsResponses[keyof GetSettlementsBySettlementIdShopItemsResponses];

export type GetTerrainsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Terrains';
};

export type GetTerrainsResponses = {
    /**
     * OK
     */
    200: TerrainViewModelIListResult;
};

export type GetTerrainsResponse = GetTerrainsResponses[keyof GetTerrainsResponses];

export type PostTerrainsData = {
    body?: CreateTerrainCommand;
    path?: never;
    query?: never;
    url: '/Terrains';
};

export type PostTerrainsResponses = {
    /**
     * OK
     */
    200: TerrainViewModelResult;
};

export type PostTerrainsResponse = PostTerrainsResponses[keyof PostTerrainsResponses];

export type DeleteTerrainsByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/Terrains/{id}';
};

export type DeleteTerrainsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutTerrainsByIdData = {
    body?: UpdateTerrainCommand;
    path: {
        id: number;
    };
    query?: never;
    url: '/Terrains/{id}';
};

export type PutTerrainsByIdResponses = {
    /**
     * OK
     */
    200: TerrainViewModelResult;
};

export type PutTerrainsByIdResponse = PutTerrainsByIdResponses[keyof PutTerrainsByIdResponses];

export type GetUsersSearchData = {
    body?: never;
    path?: never;
    query?: {
        platform?: Platform;
        platformUserId?: string;
        name?: string;
    };
    url: '/Users/search';
};

export type GetUsersSearchErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type GetUsersSearchResponses = {
    /**
     * Ok.
     */
    200: UserPrivateViewModelArrayResult;
};

export type GetUsersSearchResponse = GetUsersSearchResponses[keyof GetUsersSearchResponses];

export type DeleteUsersSelfData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Users/self';
};

export type DeleteUsersSelfErrors = {
    /**
     * User not found.
     */
    404: unknown;
};

export type DeleteUsersSelfResponses = {
    /**
     * Deleted.
     */
    204: void;
};

export type DeleteUsersSelfResponse = DeleteUsersSelfResponses[keyof DeleteUsersSelfResponses];

export type GetUsersSelfData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Users/self';
};

export type GetUsersSelfResponses = {
    /**
     * OK
     */
    200: UserViewModelResult;
};

export type GetUsersSelfResponse = GetUsersSelfResponses[keyof GetUsersSelfResponses];

export type PutUsersSelfData = {
    /**
     * The user with the updated values.
     */
    body?: UpdateUserCommand;
    path?: never;
    query?: never;
    url: '/Users/self';
};

export type PutUsersSelfErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersSelfResponses = {
    /**
     * Updated.
     */
    200: UserViewModelResult;
};

export type PutUsersSelfResponse = PutUsersSelfResponses[keyof PutUsersSelfResponses];

export type GetUsersByUserIdData = {
    body?: never;
    path: {
        /**
         * The user id.
         */
        userId: number;
    };
    query?: never;
    url: '/Users/{userId}';
};

export type GetUsersByUserIdErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
    /**
     * User was not found.
     */
    404: unknown;
};

export type GetUsersByUserIdResponses = {
    /**
     * Ok.
     */
    200: UserPrivateViewModelResult;
};

export type GetUsersByUserIdResponse = GetUsersByUserIdResponses[keyof GetUsersByUserIdResponses];

export type PutUsersByUserIdNoteData = {
    /**
     * The user note update.
     */
    body?: UpdateUserNoteCommand;
    path: {
        /**
         * User id.
         */
        userId: number;
    };
    query?: never;
    url: '/Users/{userId}/note';
};

export type PutUsersByUserIdNoteErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersByUserIdNoteResponses = {
    /**
     * Updated.
     */
    200: UserPrivateViewModelResult;
};

export type PutUsersByUserIdNoteResponse = PutUsersByUserIdNoteResponses[keyof PutUsersByUserIdNoteResponses];

export type GetUsersByUserIdCharactersData = {
    body?: never;
    path: {
        /**
         * The user id.
         */
        userId: number;
    };
    query?: never;
    url: '/Users/{userId}/characters';
};

export type GetUsersByUserIdCharactersResponses = {
    /**
     * Ok.
     */
    200: CharacterViewModelIListResult;
};

export type GetUsersByUserIdCharactersResponse = GetUsersByUserIdCharactersResponses[keyof GetUsersByUserIdCharactersResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The user ids.
         */
        'id[]'?: Array<number>;
    };
    url: '/Users';
};

export type GetUsersErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type GetUsersResponses = {
    /**
     * Ok.
     */
    200: UserPrivateViewModelIListResult;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type GetUsersByIdRestrictionsData = {
    body?: never;
    path: {
        /**
         * The user id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/{id}/restrictions';
};

export type GetUsersByIdRestrictionsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
    /**
     * User was not found.
     */
    404: unknown;
};

export type GetUsersByIdRestrictionsResponses = {
    /**
     * Ok.
     */
    200: RestrictionViewModelIListResult;
};

export type GetUsersByIdRestrictionsResponse = GetUsersByIdRestrictionsResponses[keyof GetUsersByIdRestrictionsResponses];

export type GetUsersSelfRestrictionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Users/self/restriction';
};

export type GetUsersSelfRestrictionErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type GetUsersSelfRestrictionResponses = {
    /**
     * Ok.
     */
    200: RestrictionPublicViewModelResult;
};

export type GetUsersSelfRestrictionResponse = GetUsersSelfRestrictionResponses[keyof GetUsersSelfRestrictionResponses];

export type PutUsersByIdRewardsData = {
    /**
     * The reward.
     */
    body?: RewardUserCommand;
    path: {
        /**
         * User id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/{id}/rewards';
};

export type PutUsersByIdRewardsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersByIdRewardsResponses = {
    /**
     * Done.
     */
    200: UserViewModelResult;
};

export type PutUsersByIdRewardsResponse = PutUsersByIdRewardsResponses[keyof PutUsersByIdRewardsResponses];

export type DeleteUsersSelfCharactersByIdData = {
    body?: never;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}';
};

export type DeleteUsersSelfCharactersByIdErrors = {
    /**
     * Character not found.
     */
    404: unknown;
};

export type DeleteUsersSelfCharactersByIdResponses = {
    /**
     * Deleted.
     */
    204: void;
};

export type DeleteUsersSelfCharactersByIdResponse = DeleteUsersSelfCharactersByIdResponses[keyof DeleteUsersSelfCharactersByIdResponses];

export type GetUsersSelfCharactersByIdData = {
    body?: never;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}';
};

export type GetUsersSelfCharactersByIdErrors = {
    /**
     * Character not found.
     */
    404: unknown;
};

export type GetUsersSelfCharactersByIdResponses = {
    /**
     * Ok.
     */
    200: CharacterViewModelResult;
};

export type GetUsersSelfCharactersByIdResponse = GetUsersSelfCharactersByIdResponses[keyof GetUsersSelfCharactersByIdResponses];

export type PutUsersSelfCharactersByIdData = {
    /**
     * The entire character with the updated values.
     */
    body?: UpdateCharacterCommand;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}';
};

export type PutUsersSelfCharactersByIdErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersSelfCharactersByIdResponses = {
    /**
     * Updated.
     */
    200: CharacterViewModelResult;
};

export type PutUsersSelfCharactersByIdResponse = PutUsersSelfCharactersByIdResponses[keyof PutUsersSelfCharactersByIdResponses];

export type GetUsersSelfCharactersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Users/self/characters';
};

export type GetUsersSelfCharactersResponses = {
    /**
     * Ok.
     */
    200: CharacterViewModelIListResult;
};

export type GetUsersSelfCharactersResponse = GetUsersSelfCharactersResponses[keyof GetUsersSelfCharactersResponses];

export type GetUsersSelfCharactersByIdCharacteristicsData = {
    body?: never;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}/characteristics';
};

export type GetUsersSelfCharactersByIdCharacteristicsResponses = {
    /**
     * Ok.
     */
    200: CharacterCharacteristicsViewModelResult;
};

export type GetUsersSelfCharactersByIdCharacteristicsResponse = GetUsersSelfCharactersByIdCharacteristicsResponses[keyof GetUsersSelfCharactersByIdCharacteristicsResponses];

export type PutUsersSelfCharactersByIdCharacteristicsData = {
    /**
     * The character characteristics with the updated values.
     */
    body?: CharacterCharacteristicsViewModel;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}/characteristics';
};

export type PutUsersSelfCharactersByIdCharacteristicsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersSelfCharactersByIdCharacteristicsResponses = {
    /**
     * Updated.
     */
    200: CharacterCharacteristicsViewModelResult;
};

export type PutUsersSelfCharactersByIdCharacteristicsResponse = PutUsersSelfCharactersByIdCharacteristicsResponses[keyof PutUsersSelfCharactersByIdCharacteristicsResponses];

export type PutUsersCharactersCompetitiveRatingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Users/characters/competitive-ratings';
};

export type PutUsersCharactersCompetitiveRatingsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersCharactersCompetitiveRatingsResponses = {
    /**
     * Updated.
     */
    200: unknown;
};

export type PutUsersCharactersRespecializeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Users/characters/respecialize';
};

export type PutUsersCharactersRespecializeErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersCharactersRespecializeResponses = {
    /**
     * Updated.
     */
    200: unknown;
};

export type PutUsersSelfCharactersByIdCharacteristicsConvertData = {
    /**
     * The conversion to perform.
     */
    body?: ConvertCharacterCharacteristicsCommand;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}/characteristics/convert';
};

export type PutUsersSelfCharactersByIdCharacteristicsConvertErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersSelfCharactersByIdCharacteristicsConvertResponses = {
    /**
     * Conversion performed.
     */
    200: CharacterCharacteristicsViewModelResult;
};

export type PutUsersSelfCharactersByIdCharacteristicsConvertResponse = PutUsersSelfCharactersByIdCharacteristicsConvertResponses[keyof PutUsersSelfCharactersByIdCharacteristicsConvertResponses];

export type GetUsersSelfCharactersByIdItemsData = {
    body?: never;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}/items';
};

export type GetUsersSelfCharactersByIdItemsResponses = {
    /**
     * Ok.
     */
    200: EquippedItemViewModelIListResult;
};

export type GetUsersSelfCharactersByIdItemsResponse = GetUsersSelfCharactersByIdItemsResponses[keyof GetUsersSelfCharactersByIdItemsResponses];

export type PutUsersSelfCharactersByIdItemsData = {
    /**
     * Item slots that changed.
     */
    body?: UpdateCharacterItemsCommand;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}/items';
};

export type PutUsersSelfCharactersByIdItemsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersSelfCharactersByIdItemsResponses = {
    /**
     * Updated.
     */
    200: EquippedItemViewModelIListResult;
};

export type PutUsersSelfCharactersByIdItemsResponse = PutUsersSelfCharactersByIdItemsResponses[keyof PutUsersSelfCharactersByIdItemsResponses];

export type PutUsersSelfCharactersByIdActiveData = {
    /**
     * Activation value.
     */
    body?: ActivateCharacterCommand;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}/active';
};

export type PutUsersSelfCharactersByIdActiveErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersSelfCharactersByIdActiveResponses = {
    /**
     * OK
     */
    200: unknown;
    /**
     * Updated.
     */
    204: void;
};

export type PutUsersSelfCharactersByIdActiveResponse = PutUsersSelfCharactersByIdActiveResponses[keyof PutUsersSelfCharactersByIdActiveResponses];

export type GetUsersSelfCharactersByIdStatisticsData = {
    body?: never;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}/statistics';
};

export type GetUsersSelfCharactersByIdStatisticsResponses = {
    /**
     * Ok.
     */
    200: GameModeCharacterStatisticsViewModelDictionaryResult;
};

export type GetUsersSelfCharactersByIdStatisticsResponse = GetUsersSelfCharactersByIdStatisticsResponses[keyof GetUsersSelfCharactersByIdStatisticsResponses];

export type GetUsersSelfCharactersByIdEarningStatisticsData = {
    body?: never;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query: {
        /**
         * Start of the queried time period.
         */
        from: Date;
        /**
         * End of the queried time period. This parameter is optional.
         */
        to?: Date;
    };
    url: '/Users/self/characters/{id}/earning-statistics';
};

export type GetUsersSelfCharactersByIdEarningStatisticsResponses = {
    /**
     * Ok.
     */
    200: ActivityLogViewModelIListResult;
};

export type GetUsersSelfCharactersByIdEarningStatisticsResponse = GetUsersSelfCharactersByIdEarningStatisticsResponses[keyof GetUsersSelfCharactersByIdEarningStatisticsResponses];

export type GetUsersSelfCharactersByIdLimitationsData = {
    body?: never;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}/limitations';
};

export type GetUsersSelfCharactersByIdLimitationsResponses = {
    /**
     * Ok.
     */
    200: CharacterLimitationsViewModelResult;
};

export type GetUsersSelfCharactersByIdLimitationsResponse = GetUsersSelfCharactersByIdLimitationsResponses[keyof GetUsersSelfCharactersByIdLimitationsResponses];

export type PutUsersByUserIdCharactersByIdRetireData = {
    body?: never;
    path: {
        /**
         * User id of the character owner.
         */
        userId: number;
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/{userId}/characters/{id}/retire';
};

export type PutUsersByUserIdCharactersByIdRetireErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
    /**
     * Character not found.
     */
    404: unknown;
};

export type PutUsersByUserIdCharactersByIdRetireResponses = {
    /**
     * Character rating reset.
     */
    200: CharacterViewModelResult;
};

export type PutUsersByUserIdCharactersByIdRetireResponse = PutUsersByUserIdCharactersByIdRetireResponses[keyof PutUsersByUserIdCharactersByIdRetireResponses];

export type PutUsersSelfCharactersByIdRetireData = {
    body?: never;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}/retire';
};

export type PutUsersSelfCharactersByIdRetireErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
    /**
     * Character not found.
     */
    404: unknown;
};

export type PutUsersSelfCharactersByIdRetireResponses = {
    /**
     * Retired.
     */
    200: CharacterViewModelResult;
};

export type PutUsersSelfCharactersByIdRetireResponse = PutUsersSelfCharactersByIdRetireResponses[keyof PutUsersSelfCharactersByIdRetireResponses];

export type PutUsersSelfCharactersByIdRespecializeData = {
    body?: never;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}/respecialize';
};

export type PutUsersSelfCharactersByIdRespecializeErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
    /**
     * Character not found.
     */
    404: unknown;
};

export type PutUsersSelfCharactersByIdRespecializeResponses = {
    /**
     * Respecialized.
     */
    200: CharacterViewModelResult;
};

export type PutUsersSelfCharactersByIdRespecializeResponse = PutUsersSelfCharactersByIdRespecializeResponses[keyof PutUsersSelfCharactersByIdRespecializeResponses];

export type PutUsersSelfCharactersByIdTournamentData = {
    body?: never;
    path: {
        /**
         * Character id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/characters/{id}/tournament';
};

export type PutUsersSelfCharactersByIdTournamentErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersSelfCharactersByIdTournamentResponses = {
    /**
     * Done.
     */
    200: CharacterViewModelResult;
};

export type PutUsersSelfCharactersByIdTournamentResponse = PutUsersSelfCharactersByIdTournamentResponses[keyof PutUsersSelfCharactersByIdTournamentResponses];

export type PutUsersByUserIdCharactersByCharacterIdRewardsData = {
    /**
     * The reward.
     */
    body?: RewardCharacterCommand;
    path: {
        /**
         * User id.
         */
        userId: number;
        /**
         * Character id.
         */
        characterId: number;
    };
    query?: never;
    url: '/Users/{userId}/characters/{characterId}/rewards';
};

export type PutUsersByUserIdCharactersByCharacterIdRewardsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersByUserIdCharactersByCharacterIdRewardsResponses = {
    /**
     * Done.
     */
    200: CharacterViewModelResult;
};

export type PutUsersByUserIdCharactersByCharacterIdRewardsResponse = PutUsersByUserIdCharactersByCharacterIdRewardsResponses[keyof PutUsersByUserIdCharactersByCharacterIdRewardsResponses];

export type GetUsersSelfItemsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Users/self/items';
};

export type GetUsersSelfItemsResponses = {
    /**
     * OK
     */
    200: UserItemViewModelIListResult;
};

export type GetUsersSelfItemsResponse = GetUsersSelfItemsResponses[keyof GetUsersSelfItemsResponses];

export type PostUsersSelfItemsData = {
    /**
     * The item to buy.
     */
    body?: BuyItemCommand;
    path?: never;
    query?: never;
    url: '/Users/self/items';
};

export type PostUsersSelfItemsErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
    /**
     * Item was not found.
     */
    404: unknown;
};

export type PostUsersSelfItemsResponses = {
    /**
     * Bought.
     */
    201: UserItemViewModelResult;
};

export type PostUsersSelfItemsResponse = PostUsersSelfItemsResponses[keyof PostUsersSelfItemsResponses];

export type PutUsersSelfItemsByIdReforgeData = {
    body?: never;
    path: {
        /**
         * User item id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/items/{id}/reforge';
};

export type PutUsersSelfItemsByIdReforgeErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersSelfItemsByIdReforgeResponses = {
    /**
     * Reforged.
     */
    200: UserItemViewModelResult;
};

export type PutUsersSelfItemsByIdReforgeResponse = PutUsersSelfItemsByIdReforgeResponses[keyof PutUsersSelfItemsByIdReforgeResponses];

export type PutUsersSelfItemsByIdRepairData = {
    body?: never;
    path: {
        /**
         * User item id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/items/{id}/repair';
};

export type PutUsersSelfItemsByIdRepairErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersSelfItemsByIdRepairResponses = {
    /**
     * repaired.
     */
    200: UserItemViewModelResult;
};

export type PutUsersSelfItemsByIdRepairResponse = PutUsersSelfItemsByIdRepairResponses[keyof PutUsersSelfItemsByIdRepairResponses];

export type PutUsersSelfItemsByIdUpgradeData = {
    body?: never;
    path: {
        /**
         * User item id.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/items/{id}/upgrade';
};

export type PutUsersSelfItemsByIdUpgradeErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersSelfItemsByIdUpgradeResponses = {
    /**
     * Upgraded.
     */
    200: UserItemViewModelResult;
};

export type PutUsersSelfItemsByIdUpgradeResponse = PutUsersSelfItemsByIdUpgradeResponses[keyof PutUsersSelfItemsByIdUpgradeResponses];

export type DeleteUsersSelfItemsByIdData = {
    body?: never;
    path: {
        /**
         * The id of the user item to sell.
         */
        id: number;
    };
    query?: never;
    url: '/Users/self/items/{id}';
};

export type DeleteUsersSelfItemsByIdErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
    /**
     * Item was not found.
     */
    404: unknown;
};

export type DeleteUsersSelfItemsByIdResponses = {
    /**
     * Sold.
     */
    204: void;
};

export type DeleteUsersSelfItemsByIdResponse = DeleteUsersSelfItemsByIdResponses[keyof DeleteUsersSelfItemsByIdResponses];

export type GetUsersSelfClanData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Users/self/clan';
};

export type GetUsersSelfClanResponses = {
    /**
     * OK
     */
    200: UserClanViewModelResult;
};

export type GetUsersSelfClanResponse = GetUsersSelfClanResponses[keyof GetUsersSelfClanResponses];

export type GetUsersRewardRecentData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/reward-recent';
};

export type GetUsersRewardRecentResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetUsersSelfNotificationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Users/self/notifications';
};

export type GetUsersSelfNotificationsResponses = {
    /**
     * Ok.
     */
    200: UserNotificationsWithDictViewModelResult;
};

export type GetUsersSelfNotificationsResponse = GetUsersSelfNotificationsResponses[keyof GetUsersSelfNotificationsResponses];

export type DeleteUsersSelfNotificationsByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/Users/self/notifications/{id}';
};

export type DeleteUsersSelfNotificationsByIdErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
    /**
     * Notification was not found.
     */
    404: unknown;
};

export type DeleteUsersSelfNotificationsByIdResponses = {
    /**
     * Deleted.
     */
    204: void;
};

export type DeleteUsersSelfNotificationsByIdResponse = DeleteUsersSelfNotificationsByIdResponses[keyof DeleteUsersSelfNotificationsByIdResponses];

export type PutUsersSelfNotificationsByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/Users/self/notifications/{id}';
};

export type PutUsersSelfNotificationsByIdErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
    /**
     * Notification was not found.
     */
    404: unknown;
};

export type PutUsersSelfNotificationsByIdResponses = {
    /**
     * Read.
     */
    200: UserNotificationViewModelResult;
};

export type PutUsersSelfNotificationsByIdResponse = PutUsersSelfNotificationsByIdResponses[keyof PutUsersSelfNotificationsByIdResponses];

export type PutUsersSelfNotificationsReadAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Users/self/notifications/readAll';
};

export type PutUsersSelfNotificationsReadAllErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type PutUsersSelfNotificationsReadAllResponses = {
    /**
     * Read.
     */
    204: void;
};

export type PutUsersSelfNotificationsReadAllResponse = PutUsersSelfNotificationsReadAllResponses[keyof PutUsersSelfNotificationsReadAllResponses];

export type DeleteUsersSelfNotificationsDeleteAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Users/self/notifications/deleteAll';
};

export type DeleteUsersSelfNotificationsDeleteAllErrors = {
    /**
     * Bad Request.
     */
    400: unknown;
};

export type DeleteUsersSelfNotificationsDeleteAllResponses = {
    /**
     * Deleted.
     */
    204: void;
};

export type DeleteUsersSelfNotificationsDeleteAllResponse = DeleteUsersSelfNotificationsDeleteAllResponses[keyof DeleteUsersSelfNotificationsDeleteAllResponses];

{
  "openapi": "3.0.4",
  "info": {
    "title": "Crpg API",
    "version": "v1"
  },
  "paths": {
    "/activity-logs": {
      "get": {
        "tags": [
          "ActivityLogs"
        ],
        "summary": "Get activity logs. The result is limited too 1000 logs.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "userId[]",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "type[]",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ActivityLogType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityLogWithDictViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Battles": {
      "get": {
        "tags": [
          "Battles"
        ],
        "summary": "Get strategus battles.",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Region"
            }
          },
          {
            "name": "phase[]",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BattlePhase"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BattleDetailedViewModelIListResult"
                }
              }
            }
          }
        }
      }
    },
    "/Battles/{battleId}": {
      "get": {
        "tags": [
          "Battles"
        ],
        "summary": "Get strategus battle.",
        "parameters": [
          {
            "name": "battleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BattleViewModelResult"
                }
              }
            }
          }
        }
      }
    },
    "/Battles/{battleId}/fighters": {
      "get": {
        "tags": [
          "Battles"
        ],
        "summary": "Get battle fighters.",
        "parameters": [
          {
            "name": "battleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BattleFighterViewModelIListResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          }
        }
      },
      "post": {
        "tags": [
          "Battles"
        ],
        "summary": "Apply as a fighter to a battle.",
        "parameters": [
          {
            "name": "battleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Applied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BattleFighterApplicationViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Too far from the battle, ..."
          }
        }
      }
    },
    "/Battles/{battleId}/fighter-applications": {
      "get": {
        "tags": [
          "Battles"
        ],
        "summary": "Get battle fighter applications.",
        "parameters": [
          {
            "name": "battleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status[]",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BattleFighterApplicationStatus"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BattleFighterApplicationViewModelIListResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/Battles/{battleId}/fighter-applications/{applicationId}/response": {
      "put": {
        "tags": [
          "Battles"
        ],
        "summary": "Accept/Decline battle fighter application.",
        "parameters": [
          {
            "name": "battleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RespondToBattleFighterApplicationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BattleFighterApplicationViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/Battles/{battleId}/mercenaries": {
      "get": {
        "tags": [
          "Battles"
        ],
        "summary": "Get battle mercenaries.",
        "parameters": [
          {
            "name": "battleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BattleMercenaryViewModelIListResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/Battles/{battleId}/mercenary-applications": {
      "get": {
        "tags": [
          "Battles"
        ],
        "summary": "Get battle mercenary applications.",
        "parameters": [
          {
            "name": "battleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status[]",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BattleMercenaryApplicationStatus"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BattleMercenaryApplicationViewModelIListResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          }
        }
      },
      "post": {
        "tags": [
          "Battles"
        ],
        "summary": "Apply as a mercenary to a battle.",
        "parameters": [
          {
            "name": "battleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyAsMercenaryToBattleCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Applied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BattleMercenaryApplicationViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/Battles/{battleId}/mercenary-applications/{applicationId}/response": {
      "put": {
        "tags": [
          "Battles"
        ],
        "summary": "Accept/Decline battle mercenary application.",
        "parameters": [
          {
            "name": "battleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RespondToBattleMercenaryApplicationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BattleMercenaryApplicationViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/Clans/{id}": {
      "get": {
        "tags": [
          "Clans"
        ],
        "summary": "Gets a clan from its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanViewModelResult"
                }
              }
            }
          },
          "404": {
            "description": "Clan was not found."
          }
        }
      }
    },
    "/Clans/{id}/members": {
      "get": {
        "tags": [
          "Clans"
        ],
        "summary": "Gets the members of a clan.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanMemberViewModelIListResult"
                }
              }
            }
          },
          "404": {
            "description": "Clan was not found."
          }
        }
      }
    },
    "/Clans/{clanId}/members/{userId}": {
      "put": {
        "tags": [
          "Clans"
        ],
        "summary": "Update a clan member.",
        "parameters": [
          {
            "name": "clanId",
            "in": "path",
            "description": "Clan id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The entire member with the updated values.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClanMemberCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanMemberViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      },
      "delete": {
        "tags": [
          "Clans"
        ],
        "summary": "Kick a clan member of leave a clan.",
        "parameters": [
          {
            "name": "clanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Kicked or left."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Clans": {
      "get": {
        "tags": [
          "Clans"
        ],
        "summary": "Gets all clans.",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanWithMemberCountViewModelIListResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Clans"
        ],
        "summary": "Creates a clan.",
        "requestBody": {
          "description": "Clan info.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClanCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanViewModelResult"
                }
              }
            }
          },
          "201": {
            "description": "Created."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Clans/{clanId}": {
      "put": {
        "tags": [
          "Clans"
        ],
        "summary": "Updates a clan.",
        "parameters": [
          {
            "name": "clanId",
            "in": "path",
            "description": "Clan id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The clan update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClanCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Clans/{clanId}/invitations": {
      "get": {
        "tags": [
          "Clans"
        ],
        "summary": "Get users invited to the clan or users requesting to join the clan.",
        "parameters": [
          {
            "name": "clanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type[]",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ClanInvitationType"
              }
            }
          },
          {
            "name": "status[]",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ClanInvitationStatus"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanInvitationViewModelIListResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      },
      "post": {
        "tags": [
          "Clans"
        ],
        "summary": "Invite user to clan or request to join a clan.",
        "parameters": [
          {
            "name": "clanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteClanMemberCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanInvitationViewModelResult"
                }
              }
            }
          },
          "201": {
            "description": "Invitation created."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Clans/{clanId}/invitations/{invitationId}/response": {
      "put": {
        "tags": [
          "Clans"
        ],
        "summary": "Accept/Decline request/offer to join a clan.",
        "parameters": [
          {
            "name": "clanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invitationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RespondClanInvitationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Responded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanInvitationViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Clans/{clanId}/armory": {
      "get": {
        "tags": [
          "Clans"
        ],
        "summary": "Gets the armory items.",
        "parameters": [
          {
            "name": "clanId",
            "in": "path",
            "description": "Clan id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanArmoryItemViewModelIListResult"
                }
              }
            }
          },
          "404": {
            "description": "Clan was not found."
          }
        }
      },
      "post": {
        "tags": [
          "Clans"
        ],
        "summary": "Add an item to the armory.",
        "parameters": [
          {
            "name": "clanId",
            "in": "path",
            "description": "Clan id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Item id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddItemToClanArmoryCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanArmoryItemViewModelResult"
                }
              }
            }
          },
          "201": {
            "description": "Item added to clan armory."
          },
          "400": {
            "description": "Bad request."
          },
          "409": {
            "description": "Conflict."
          }
        }
      }
    },
    "/Clans/{clanId}/armory/{userItemId}": {
      "delete": {
        "tags": [
          "Clans"
        ],
        "summary": "Remove an item from the armory.",
        "parameters": [
          {
            "name": "clanId",
            "in": "path",
            "description": "Clan id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userItemId",
            "in": "path",
            "description": "Item id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Item removed from clan armory."
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/Clans/{clanId}/armory/{userItemId}/borrow": {
      "put": {
        "tags": [
          "Clans"
        ],
        "summary": "Borrow an item from the armory.",
        "parameters": [
          {
            "name": "clanId",
            "in": "path",
            "description": "Clan id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userItemId",
            "in": "path",
            "description": "Item id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanArmoryBorrowedItemViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/Clans/{clanId}/armory/{userItemId}/return": {
      "put": {
        "tags": [
          "Clans"
        ],
        "summary": "Return an item to the armory.",
        "parameters": [
          {
            "name": "clanId",
            "in": "path",
            "description": "Clan id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userItemId",
            "in": "path",
            "description": "Item id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok."
          },
          "400": {
            "description": "Bad request."
          }
        }
      }
    },
    "/Connect/authorize": {
      "get": {
        "tags": [
          "Connect"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Connect"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Connect/token": {
      "post": {
        "tags": [
          "Connect"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Connect/callback-epic-games": {
      "get": {
        "tags": [
          "Connect"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Connect/callback-microsoft": {
      "get": {
        "tags": [
          "Connect"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Connect/logout": {
      "get": {
        "tags": [
          "Connect"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/game-server-statistics": {
      "get": {
        "tags": [
          "GameServerStatistics"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameServerStatsResult"
                }
              }
            }
          }
        }
      }
    },
    "/Games/users": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Get or create user.",
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            }
          },
          {
            "name": "platformUserId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "region",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Region"
            }
          },
          {
            "name": "instance",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameUserViewModelResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Games"
        ],
        "summary": "Give reward to users and break or repair items.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGameUsersCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateGameUsersResultResult"
                }
              }
            }
          }
        }
      }
    },
    "/Games/tournament-users": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Get tournament user.",
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            }
          },
          {
            "name": "platformUserId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameUserViewModelResult"
                }
              }
            }
          }
        }
      }
    },
    "/Games/activity-logs": {
      "post": {
        "tags": [
          "Games"
        ],
        "summary": "Insert activity logs.",
        "requestBody": {
          "description": "The activity logs to insert.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityLogViewModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inserted."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Games/clans/{id}": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "Gets a clan from its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClanViewModelResult"
                }
              }
            }
          },
          "404": {
            "description": "Clan was not found."
          }
        }
      }
    },
    "/Games/restrictions": {
      "post": {
        "tags": [
          "Games"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestrictCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestrictionViewModelResult"
                }
              }
            }
          }
        }
      }
    },
    "/Items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Gets all enabled items of rank 0.",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemViewModelIListResult"
                }
              }
            }
          }
        }
      }
    },
    "/Items/upgrades/{baseId}": {
      "get": {
        "tags": [
          "Items"
        ],
        "parameters": [
          {
            "name": "baseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemViewModelIListResult"
                }
              }
            }
          }
        }
      }
    },
    "/Items/{id}/enable": {
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Enable/Disable item.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enabling value.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableItemCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Items/{id}/refund": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Refund item.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Value.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundItemCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Leaderboard/leaderboard": {
      "get": {
        "tags": [
          "Leaderboard"
        ],
        "summary": "Get top character competitive ratings.",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RegionNullable"
            }
          },
          {
            "name": "characterClass",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CharacterClassNullable"
            }
          },
          {
            "name": "gameMode",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GameModeNullable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterPublicCompetitiveViewModelIListResult"
                }
              }
            }
          }
        }
      }
    },
    "/Parties/self/update": {
      "get": {
        "tags": [
          "Parties"
        ],
        "summary": "Get an update of strategus for the current user.",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategusUpdateResult"
                }
              }
            }
          },
          "404": {
            "description": "User was not registered to strategus."
          }
        }
      }
    },
    "/Parties": {
      "post": {
        "tags": [
          "Parties"
        ],
        "summary": "Register user to strategus.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePartyCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartyViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Already registered."
          }
        }
      }
    },
    "/Parties/self/status": {
      "put": {
        "tags": [
          "Parties"
        ],
        "summary": "Update strategus party status.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePartyStatusCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartyViewModelResult"
                }
              }
            }
          }
        }
      }
    },
    "/Parties/self/items": {
      "post": {
        "tags": [
          "Parties"
        ],
        "summary": "Buy items from a settlement.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuySettlementItemCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bought.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemStackResult"
                }
              }
            }
          },
          "400": {
            "description": "Too far from the settlement, item not available, ..."
          }
        }
      }
    },
    "/patch-notes": {
      "get": {
        "tags": [
          "PatchNotes"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchNotesIListResult"
                }
              }
            }
          }
        }
      }
    },
    "/Restrictions": {
      "get": {
        "tags": [
          "Restrictions"
        ],
        "summary": "Get all restrictions.",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestrictionViewModelIListResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Restrictions"
        ],
        "summary": "Restrict a user. If a restriction of the same type already exists for the user, it is overriden. Use a duration\nof 0 to un-restrict.",
        "requestBody": {
          "description": "Restriction info.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestrictCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestrictionViewModelResult"
                }
              }
            }
          },
          "201": {
            "description": "Restricted."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "User was not found."
          }
        }
      }
    },
    "/Settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get settings.",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsViewModelResult"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Settings"
        ],
        "summary": "Edit setting.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditSettingsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsViewModelResult"
                }
              }
            }
          },
          "201": {
            "description": "Created."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Settlements": {
      "get": {
        "tags": [
          "Settlements"
        ],
        "summary": "Get Strategus settlements.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettlementPublicViewModelIListResult"
                }
              }
            }
          }
        }
      }
    },
    "/Settlements/{settlementId}": {
      "get": {
        "tags": [
          "Settlements"
        ],
        "summary": "Get settlement details by Id.",
        "parameters": [
          {
            "name": "settlementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettlementPublicViewModelResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Settlements"
        ],
        "summary": "Give (position count) or take (negative count) garrison troops from a settlement.",
        "parameters": [
          {
            "name": "settlementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettlementCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettlementPublicViewModelResult"
                }
              }
            }
          }
        }
      }
    },
    "/Settlements/{settlementId}/items": {
      "get": {
        "tags": [
          "Settlements"
        ],
        "summary": "Get garrison items from a settlement.",
        "parameters": [
          {
            "name": "settlementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemStackIListResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Settlements"
        ],
        "summary": "Give (position count) or take (negative count) garrison items from a settlement.",
        "parameters": [
          {
            "name": "settlementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSettlementItemCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemStackResult"
                }
              }
            }
          }
        }
      }
    },
    "/Settlements/{settlementId}/shop/items": {
      "get": {
        "tags": [
          "Settlements"
        ],
        "summary": "Get strategus settlement shop items.",
        "parameters": [
          {
            "name": "settlementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemViewModelIListResult"
                }
              }
            }
          }
        }
      }
    },
    "/Terrains": {
      "get": {
        "tags": [
          "Terrains"
        ],
        "summary": "Get Strategus map terrains.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TerrainViewModelIListResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Terrains"
        ],
        "summary": "Create terrain.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTerrainCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TerrainViewModelResult"
                }
              }
            }
          }
        }
      }
    },
    "/Terrains/{id}": {
      "put": {
        "tags": [
          "Terrains"
        ],
        "summary": "Update terrain.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTerrainCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TerrainViewModelResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Terrains"
        ],
        "summary": "Delete terrain by Id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Users/search": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Search user. name or the pair (platform, platformUserId)\nshould be not null.",
        "parameters": [
          {
            "name": "platform",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            }
          },
          {
            "name": "platformUserId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivateViewModelArrayResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/self": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets current user information.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update the current user.",
        "requestBody": {
          "description": "The user with the updated values.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes current user.",
        "responses": {
          "204": {
            "description": "Deleted."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/Users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivateViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "User was not found."
          }
        }
      }
    },
    "/Users/{userId}/note": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update the user note.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The user note update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserNoteCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivateViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/{userId}/characters": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets all characters by user id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterViewModelIListResult"
                }
              }
            }
          }
        }
      }
    },
    "/Users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by id.",
        "parameters": [
          {
            "name": "id[]",
            "in": "query",
            "description": "The user ids.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivateViewModelIListResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/{id}/restrictions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all restrictions for a user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestrictionViewModelIListResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "User was not found."
          }
        }
      }
    },
    "/Users/self/restriction": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get active restriction for a user.",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestrictionPublicViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/{id}/rewards": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Reward user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The reward.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewardUserCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Done.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/self/characters/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the specified current user's character.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterViewModelResult"
                }
              }
            }
          },
          "404": {
            "description": "Character not found."
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a character for the current user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The entire character with the updated values.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCharacterCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes the specified current user's character.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted."
          },
          "404": {
            "description": "Character not found."
          }
        }
      }
    },
    "/Users/self/characters": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets all current user's characters.",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterViewModelIListResult"
                }
              }
            }
          }
        }
      }
    },
    "/Users/self/characters/{id}/characteristics": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get character characteristics for the current user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterCharacteristicsViewModelResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates character characteristics for the current user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The character characteristics with the updated values.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterCharacteristicsViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterCharacteristicsViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/characters/competitive-ratings": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates every character competitive rating.",
        "responses": {
          "200": {
            "description": "Updated."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/characters/respecialize": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Respecializes every character.",
        "responses": {
          "200": {
            "description": "Updated."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/self/characters/{id}/characteristics/convert": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Convert character characteristics for the current user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The conversion to perform.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertCharacterCharacteristicsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Conversion performed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterCharacteristicsViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/self/characters/{id}/items": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get character items for the current user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EquippedItemViewModelIListResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a character's items for the current user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Item slots that changed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCharacterItemsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EquippedItemViewModelIListResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/self/characters/{id}/active": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Activate/deactivate character.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Activation value.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateCharacterCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Updated."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/self/characters/{id}/statistics": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get character statistics for the current user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameModeCharacterStatisticsViewModelDictionaryResult"
                }
              }
            }
          }
        }
      }
    },
    "/Users/self/characters/{id}/earning-statistics": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get character exp/gold stats for the current user.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start of the queried time period.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End of the queried time period. This parameter is optional.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityLogViewModelIListResult"
                }
              }
            }
          }
        }
      }
    },
    "/Users/self/characters/{id}/limitations": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get character limitations for the current user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterLimitationsViewModelResult"
                }
              }
            }
          }
        }
      }
    },
    "/Users/{userId}/characters/{id}/retire": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Resets a character rating.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id of the character owner.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Character rating reset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Character not found."
          }
        }
      }
    },
    "/Users/self/characters/{id}/retire": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Retires character.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Character not found."
          }
        }
      }
    },
    "/Users/self/characters/{id}/respecialize": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Respecializes character.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Respecialized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Character not found."
          }
        }
      }
    },
    "/Users/self/characters/{id}/tournament": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Set the character as tournament character.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Done.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/{userId}/characters/{characterId}/rewards": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Reward character.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "characterId",
            "in": "path",
            "description": "Character id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The reward.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewardCharacterCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Done.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/self/items": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets owned items.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserItemViewModelIListResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Buys item for the current user.",
        "requestBody": {
          "description": "The item to buy.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyItemCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Bought.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserItemViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Item was not found."
          }
        }
      }
    },
    "/Users/self/items/{id}/reforge": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Reforge item.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User item id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reforged.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserItemViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/self/items/{id}/repair": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Repair item.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User item id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "repaired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserItemViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/self/items/{id}/upgrade": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Upgrade item.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User item id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upgraded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserItemViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/self/items/{id}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Sells item for the current user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user item to sell.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Sold."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Item was not found."
          }
        }
      }
    },
    "/Users/self/clan": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets user clan or null.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserClanViewModelResult"
                }
              }
            }
          }
        }
      }
    },
    "/users/reward-recent": {
      "get": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/Users/self/notifications": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets user's notifications.",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotificationsWithDictViewModelResult"
                }
              }
            }
          }
        }
      }
    },
    "/Users/self/notifications/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Read user's notification.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Read.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotificationViewModelResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Notification was not found."
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user's notification.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Notification was not found."
          }
        }
      }
    },
    "/Users/self/notifications/readAll": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Read all user's notifications.",
        "responses": {
          "204": {
            "description": "Read."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    },
    "/Users/self/notifications/deleteAll": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete all user's notifications.",
        "responses": {
          "204": {
            "description": "Deleted."
          },
          "400": {
            "description": "Bad Request."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivateCharacterCommand": {
        "required": [
          "active",
          "characterId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "characterId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ActivityLogMetadataEntitiesDictViewModel": {
        "required": [
          "characters",
          "clans",
          "users"
        ],
        "type": "object",
        "properties": {
          "clans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClanPublicViewModel"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPublicViewModel"
            }
          },
          "characters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterPublicViewModel"
            }
          }
        },
        "additionalProperties": false
      },
      "ActivityLogType": {
        "enum": [
          "UserCreated",
          "UserDeleted",
          "UserRenamed",
          "UserRewarded",
          "ItemBought",
          "ItemSold",
          "ItemBroke",
          "ItemReforged",
          "ItemRepaired",
          "ItemUpgraded",
          "ItemReturned",
          "CharacterCreated",
          "CharacterDeleted",
          "CharacterRatingReset",
          "CharacterRespecialized",
          "CharacterRetired",
          "CharacterRewarded",
          "CharacterEarned",
          "ServerJoined",
          "ChatMessageSent",
          "TeamHit",
          "ClanCreated",
          "ClanDeleted",
          "ClanApplicationCreated",
          "ClanApplicationDeclined",
          "ClanApplicationAccepted",
          "ClanMemberKicked",
          "ClanMemberLeaved",
          "ClanMemberRoleEdited",
          "ClanArmoryAddItem",
          "ClanArmoryRemoveItem",
          "ClanArmoryReturnItem",
          "ClanArmoryBorrowItem"
        ],
        "type": "string"
      },
      "ActivityLogViewModel": {
        "required": [
          "createdAt",
          "id",
          "metadata",
          "type",
          "userId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/ActivityLogType"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ActivityLogViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityLogViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivityLogWithDictViewModel": {
        "required": [
          "activityLogs",
          "dict"
        ],
        "type": "object",
        "properties": {
          "activityLogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityLogViewModel"
            }
          },
          "dict": {
            "$ref": "#/components/schemas/ActivityLogMetadataEntitiesDictViewModel"
          }
        },
        "additionalProperties": false
      },
      "ActivityLogWithDictViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/ActivityLogWithDictViewModel"
          }
        },
        "additionalProperties": false
      },
      "AddItemToClanArmoryCommand": {
        "required": [
          "clanId",
          "userId",
          "userItemId"
        ],
        "type": "object",
        "properties": {
          "userItemId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "clanId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AddSettlementItemCommand": {
        "required": [
          "count",
          "itemId",
          "partyId",
          "settlementId"
        ],
        "type": "object",
        "properties": {
          "partyId": {
            "type": "integer",
            "format": "int32"
          },
          "settlementId": {
            "type": "integer",
            "format": "int32"
          },
          "itemId": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ApplyAsMercenaryToBattleCommand": {
        "required": [
          "battleId",
          "characterId",
          "note",
          "side",
          "userId",
          "wage"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "characterId": {
            "type": "integer",
            "format": "int32"
          },
          "battleId": {
            "type": "integer",
            "format": "int32"
          },
          "side": {
            "$ref": "#/components/schemas/BattleSide"
          },
          "wage": {
            "type": "integer",
            "format": "int32"
          },
          "note": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ArmorMaterialType": {
        "enum": [
          "Undefined",
          "Cloth",
          "Leather",
          "Chainmail",
          "Plate"
        ],
        "type": "string"
      },
      "BattleDetailedViewModel": {
        "required": [
          "attacker",
          "attackerTotalTroops",
          "createdAt",
          "defender",
          "defenderTotalTroops",
          "id",
          "phase",
          "position",
          "region"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "position": {
            "$ref": "#/components/schemas/Point"
          },
          "phase": {
            "$ref": "#/components/schemas/BattlePhase"
          },
          "attacker": {
            "$ref": "#/components/schemas/BattleFighterViewModel"
          },
          "attackerTotalTroops": {
            "type": "integer",
            "format": "int32"
          },
          "defender": {
            "$ref": "#/components/schemas/BattleFighterViewModel"
          },
          "defenderTotalTroops": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BattleDetailedViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BattleDetailedViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BattleFighterApplicationStatus": {
        "enum": [
          "Pending",
          "Declined",
          "Accepted"
        ],
        "type": "string"
      },
      "BattleFighterApplicationViewModel": {
        "required": [
          "id",
          "party",
          "side",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "party": {
            "$ref": "#/components/schemas/PartyVisibleViewModel"
          },
          "side": {
            "$ref": "#/components/schemas/BattleSide"
          },
          "status": {
            "$ref": "#/components/schemas/BattleFighterApplicationStatus"
          }
        },
        "additionalProperties": false
      },
      "BattleFighterApplicationViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BattleFighterApplicationViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BattleFighterApplicationViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/BattleFighterApplicationViewModel"
          }
        },
        "additionalProperties": false
      },
      "BattleFighterViewModel": {
        "required": [
          "commander",
          "id",
          "party",
          "settlement",
          "side"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "party": {
            "$ref": "#/components/schemas/PartyPublicViewModel"
          },
          "settlement": {
            "$ref": "#/components/schemas/SettlementPublicViewModel"
          },
          "side": {
            "$ref": "#/components/schemas/BattleSide"
          },
          "commander": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BattleFighterViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BattleFighterViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BattleMercenaryApplicationStatus": {
        "enum": [
          "Pending",
          "Declined",
          "Accepted"
        ],
        "type": "string"
      },
      "BattleMercenaryApplicationViewModel": {
        "required": [
          "character",
          "id",
          "note",
          "side",
          "status",
          "user",
          "wage"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "user": {
            "$ref": "#/components/schemas/UserPublicViewModel"
          },
          "character": {
            "$ref": "#/components/schemas/CharacterPublicViewModel"
          },
          "side": {
            "$ref": "#/components/schemas/BattleSide"
          },
          "wage": {
            "type": "integer",
            "format": "int32"
          },
          "note": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/BattleMercenaryApplicationStatus"
          }
        },
        "additionalProperties": false
      },
      "BattleMercenaryApplicationViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BattleMercenaryApplicationViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BattleMercenaryApplicationViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/BattleMercenaryApplicationViewModel"
          }
        },
        "additionalProperties": false
      },
      "BattleMercenaryViewModel": {
        "required": [
          "character",
          "id",
          "side",
          "user"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "user": {
            "$ref": "#/components/schemas/UserPublicViewModel"
          },
          "character": {
            "$ref": "#/components/schemas/CharacterPublicViewModel"
          },
          "side": {
            "$ref": "#/components/schemas/BattleSide"
          }
        },
        "additionalProperties": false
      },
      "BattleMercenaryViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BattleMercenaryViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BattlePhase": {
        "enum": [
          "Preparation",
          "Hiring",
          "Scheduled",
          "Live",
          "End"
        ],
        "type": "string"
      },
      "BattleSide": {
        "enum": [
          "Attacker",
          "Defender"
        ],
        "type": "string"
      },
      "BattleViewModel": {
        "required": [
          "createdAt",
          "id",
          "phase",
          "position",
          "region"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "position": {
            "$ref": "#/components/schemas/Point"
          },
          "phase": {
            "$ref": "#/components/schemas/BattlePhase"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BattleViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/BattleViewModel"
          }
        },
        "additionalProperties": false
      },
      "BuyItemCommand": {
        "required": [
          "itemId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BuySettlementItemCommand": {
        "required": [
          "itemCount",
          "itemId",
          "partyId",
          "settlementId"
        ],
        "type": "object",
        "properties": {
          "partyId": {
            "type": "integer",
            "format": "int32"
          },
          "itemId": {
            "type": "string"
          },
          "itemCount": {
            "type": "integer",
            "format": "int32"
          },
          "settlementId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CharacterAttributesViewModel": {
        "required": [
          "agility",
          "points",
          "strength"
        ],
        "type": "object",
        "properties": {
          "points": {
            "type": "integer",
            "format": "int32"
          },
          "strength": {
            "type": "integer",
            "format": "int32"
          },
          "agility": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CharacterCharacteristicConversion": {
        "enum": [
          "AttributesToSkills",
          "SkillsToAttributes"
        ],
        "type": "string"
      },
      "CharacterCharacteristicsViewModel": {
        "required": [
          "attributes",
          "skills",
          "weaponProficiencies"
        ],
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/CharacterAttributesViewModel"
          },
          "skills": {
            "$ref": "#/components/schemas/CharacterSkillsViewModel"
          },
          "weaponProficiencies": {
            "$ref": "#/components/schemas/CharacterWeaponProficienciesViewModel"
          }
        },
        "additionalProperties": false
      },
      "CharacterCharacteristicsViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/CharacterCharacteristicsViewModel"
          }
        },
        "additionalProperties": false
      },
      "CharacterClass": {
        "enum": [
          "Peasant",
          "Infantry",
          "ShockInfantry",
          "Skirmisher",
          "Crossbowman",
          "Archer",
          "Cavalry",
          "MountedArcher"
        ],
        "type": "string"
      },
      "CharacterClassNullable": {
        "enum": [
          "Peasant",
          "Infantry",
          "ShockInfantry",
          "Skirmisher",
          "Crossbowman",
          "Archer",
          "Cavalry",
          "MountedArcher",
          null
        ],
        "type": "string",
        "nullable": true
      },
      "CharacterLimitationsViewModel": {
        "required": [
          "lastRespecializeAt"
        ],
        "type": "object",
        "properties": {
          "lastRespecializeAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CharacterLimitationsViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/CharacterLimitationsViewModel"
          }
        },
        "additionalProperties": false
      },
      "CharacterPublicCompetitiveViewModel": {
        "required": [
          "class",
          "id",
          "level",
          "statistics",
          "user"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "class": {
            "$ref": "#/components/schemas/CharacterClass"
          },
          "statistics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterStatisticsViewModel"
            }
          },
          "user": {
            "$ref": "#/components/schemas/UserPublicViewModel"
          }
        },
        "additionalProperties": false
      },
      "CharacterPublicCompetitiveViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterPublicCompetitiveViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CharacterPublicViewModel": {
        "required": [
          "class",
          "id",
          "level",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "class": {
            "$ref": "#/components/schemas/CharacterClass"
          }
        },
        "additionalProperties": false
      },
      "CharacterRatingViewModel": {
        "required": [
          "competitiveValue",
          "deviation",
          "value",
          "volatility"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "deviation": {
            "type": "number",
            "format": "float"
          },
          "volatility": {
            "type": "number",
            "format": "float"
          },
          "competitiveValue": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "CharacterSkillsViewModel": {
        "required": [
          "athletics",
          "ironFlesh",
          "mountedArchery",
          "points",
          "powerDraw",
          "powerStrike",
          "powerThrow",
          "riding",
          "shield",
          "weaponMaster"
        ],
        "type": "object",
        "properties": {
          "points": {
            "type": "integer",
            "format": "int32"
          },
          "ironFlesh": {
            "type": "integer",
            "format": "int32"
          },
          "powerStrike": {
            "type": "integer",
            "format": "int32"
          },
          "powerDraw": {
            "type": "integer",
            "format": "int32"
          },
          "powerThrow": {
            "type": "integer",
            "format": "int32"
          },
          "athletics": {
            "type": "integer",
            "format": "int32"
          },
          "riding": {
            "type": "integer",
            "format": "int32"
          },
          "weaponMaster": {
            "type": "integer",
            "format": "int32"
          },
          "mountedArchery": {
            "type": "integer",
            "format": "int32"
          },
          "shield": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CharacterStatisticsViewModel": {
        "required": [
          "assists",
          "deaths",
          "gameMode",
          "kills",
          "playTime",
          "rating"
        ],
        "type": "object",
        "properties": {
          "kills": {
            "type": "integer",
            "format": "int32"
          },
          "deaths": {
            "type": "integer",
            "format": "int32"
          },
          "assists": {
            "type": "integer",
            "format": "int32"
          },
          "playTime": {
            "type": "string",
            "format": "date-span"
          },
          "gameMode": {
            "$ref": "#/components/schemas/GameMode"
          },
          "rating": {
            "$ref": "#/components/schemas/CharacterRatingViewModel"
          }
        },
        "additionalProperties": false
      },
      "CharacterViewModel": {
        "required": [
          "class",
          "experience",
          "forTournament",
          "generation",
          "id",
          "level",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "generation": {
            "type": "integer",
            "format": "int32"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "experience": {
            "type": "integer",
            "format": "int32"
          },
          "class": {
            "$ref": "#/components/schemas/CharacterClass"
          },
          "forTournament": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CharacterViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CharacterViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/CharacterViewModel"
          }
        },
        "additionalProperties": false
      },
      "CharacterWeaponProficienciesViewModel": {
        "required": [
          "bow",
          "crossbow",
          "oneHanded",
          "points",
          "polearm",
          "throwing",
          "twoHanded"
        ],
        "type": "object",
        "properties": {
          "points": {
            "type": "integer",
            "format": "int32"
          },
          "oneHanded": {
            "type": "integer",
            "format": "int32"
          },
          "twoHanded": {
            "type": "integer",
            "format": "int32"
          },
          "polearm": {
            "type": "integer",
            "format": "int32"
          },
          "bow": {
            "type": "integer",
            "format": "int32"
          },
          "throwing": {
            "type": "integer",
            "format": "int32"
          },
          "crossbow": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ClanArmoryBorrowedItemViewModel": {
        "required": [
          "borrowerUserId",
          "userItemId"
        ],
        "type": "object",
        "properties": {
          "borrowerUserId": {
            "type": "integer",
            "format": "int32"
          },
          "userItemId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ClanArmoryBorrowedItemViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/ClanArmoryBorrowedItemViewModel"
          }
        },
        "additionalProperties": false
      },
      "ClanArmoryItemViewModel": {
        "required": [
          "borrowerUserId",
          "item",
          "userId",
          "userItemId"
        ],
        "type": "object",
        "properties": {
          "userItemId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "borrowerUserId": {
            "type": "integer",
            "format": "int32"
          },
          "item": {
            "$ref": "#/components/schemas/ItemViewModel"
          }
        },
        "additionalProperties": false
      },
      "ClanArmoryItemViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClanArmoryItemViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClanArmoryItemViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/ClanArmoryItemViewModel"
          }
        },
        "additionalProperties": false
      },
      "ClanInvitationStatus": {
        "enum": [
          "Pending",
          "Declined",
          "Accepted"
        ],
        "type": "string"
      },
      "ClanInvitationType": {
        "enum": [
          "Request",
          "Offer"
        ],
        "type": "string"
      },
      "ClanInvitationViewModel": {
        "required": [
          "id",
          "invitee",
          "inviter",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "invitee": {
            "$ref": "#/components/schemas/UserPublicViewModel"
          },
          "inviter": {
            "$ref": "#/components/schemas/UserPublicViewModel"
          },
          "type": {
            "$ref": "#/components/schemas/ClanInvitationType"
          },
          "status": {
            "$ref": "#/components/schemas/ClanInvitationStatus"
          }
        },
        "additionalProperties": false
      },
      "ClanInvitationViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClanInvitationViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClanInvitationViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/ClanInvitationViewModel"
          }
        },
        "additionalProperties": false
      },
      "ClanMemberRole": {
        "enum": [
          "Member",
          "Officer",
          "Leader"
        ],
        "type": "string"
      },
      "ClanMemberViewModel": {
        "required": [
          "role",
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserPublicViewModel"
          },
          "role": {
            "$ref": "#/components/schemas/ClanMemberRole"
          }
        },
        "additionalProperties": false
      },
      "ClanMemberViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClanMemberViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClanMemberViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/ClanMemberViewModel"
          }
        },
        "additionalProperties": false
      },
      "ClanPublicViewModel": {
        "required": [
          "bannerKey",
          "id",
          "languages",
          "name",
          "primaryColor",
          "region",
          "secondaryColor",
          "tag"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "tag": {
            "type": "string"
          },
          "primaryColor": {
            "type": "integer",
            "format": "int32"
          },
          "secondaryColor": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "bannerKey": {
            "type": "string"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Languages"
            }
          }
        },
        "additionalProperties": false
      },
      "ClanViewModel": {
        "required": [
          "armoryTimeout",
          "bannerKey",
          "description",
          "id",
          "languages",
          "name",
          "primaryColor",
          "region",
          "secondaryColor",
          "tag"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "tag": {
            "type": "string"
          },
          "primaryColor": {
            "type": "integer",
            "format": "int32"
          },
          "secondaryColor": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "bannerKey": {
            "type": "string"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Languages"
            }
          },
          "discord": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "armoryTimeout": {
            "type": "string",
            "format": "date-span"
          }
        },
        "additionalProperties": false
      },
      "ClanViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/ClanViewModel"
          }
        },
        "additionalProperties": false
      },
      "ClanWithMemberCountViewModel": {
        "required": [
          "clan",
          "memberCount"
        ],
        "type": "object",
        "properties": {
          "clan": {
            "$ref": "#/components/schemas/ClanViewModel"
          },
          "memberCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ClanWithMemberCountViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClanWithMemberCountViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConvertCharacterCharacteristicsCommand": {
        "required": [
          "characterId",
          "conversion",
          "userId"
        ],
        "type": "object",
        "properties": {
          "characterId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "conversion": {
            "$ref": "#/components/schemas/CharacterCharacteristicConversion"
          }
        },
        "additionalProperties": false
      },
      "Coordinate": {
        "required": [
          "coordinateValue",
          "isValid",
          "m",
          "x",
          "y",
          "z"
        ],
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "format": "double"
          },
          "y": {
            "type": "number",
            "format": "double"
          },
          "z": {
            "type": "number",
            "format": "double"
          },
          "m": {
            "type": "number",
            "format": "double"
          },
          "coordinateValue": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CoordinateEqualityComparer": {
        "type": "object",
        "additionalProperties": false
      },
      "CoordinateSequence": {
        "required": [
          "count",
          "dimension",
          "first",
          "hasM",
          "hasZ",
          "last",
          "mOrdinateIndex",
          "measures",
          "ordinates",
          "spatial",
          "zOrdinateIndex"
        ],
        "type": "object",
        "properties": {
          "dimension": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "measures": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "spatial": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ordinates": {
            "$ref": "#/components/schemas/Ordinates"
          },
          "hasZ": {
            "type": "boolean",
            "readOnly": true
          },
          "hasM": {
            "type": "boolean",
            "readOnly": true
          },
          "zOrdinateIndex": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "mOrdinateIndex": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "first": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "last": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CoordinateSequenceFactory": {
        "required": [
          "ordinates"
        ],
        "type": "object",
        "properties": {
          "ordinates": {
            "$ref": "#/components/schemas/Ordinates"
          }
        },
        "additionalProperties": false
      },
      "CreateClanCommand": {
        "required": [
          "armoryTimeout",
          "bannerKey",
          "description",
          "languages",
          "name",
          "primaryColor",
          "region",
          "secondaryColor",
          "tag",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "primaryColor": {
            "type": "integer",
            "format": "int32"
          },
          "secondaryColor": {
            "type": "integer",
            "format": "int32"
          },
          "bannerKey": {
            "type": "string"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Languages"
            }
          },
          "discord": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "armoryTimeout": {
            "type": "string",
            "format": "date-span"
          }
        },
        "additionalProperties": false
      },
      "CreatePartyCommand": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateTerrainCommand": {
        "required": [
          "boundary",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/TerrainType"
          },
          "boundary": {
            "$ref": "#/components/schemas/Polygon"
          }
        },
        "additionalProperties": false
      },
      "Culture": {
        "enum": [
          "Neutral",
          "Aserai",
          "Battania",
          "Empire",
          "Khuzait",
          "Looters",
          "Sturgia",
          "Vlandia"
        ],
        "type": "string"
      },
      "DamageType": {
        "enum": [
          "Undefined",
          "Cut",
          "Pierce",
          "Blunt"
        ],
        "type": "string"
      },
      "Dimension": {
        "enum": [
          "Point",
          "Curve",
          "Surface",
          "Collapse",
          "Dontcare",
          "True",
          "False"
        ],
        "type": "string"
      },
      "EditSettingsCommand": {
        "type": "object",
        "properties": {
          "discord": {
            "type": "string",
            "nullable": true
          },
          "steam": {
            "type": "string",
            "nullable": true
          },
          "patreon": {
            "type": "string",
            "nullable": true
          },
          "github": {
            "type": "string",
            "nullable": true
          },
          "reddit": {
            "type": "string",
            "nullable": true
          },
          "modDb": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EnableItemCommand": {
        "required": [
          "enable",
          "itemId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string"
          },
          "enable": {
            "type": "boolean"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Envelope": {
        "required": [
          "area",
          "centre",
          "diameter",
          "height",
          "isNull",
          "maxExtent",
          "maxX",
          "maxY",
          "minExtent",
          "minX",
          "minY",
          "width"
        ],
        "type": "object",
        "properties": {
          "isNull": {
            "type": "boolean",
            "readOnly": true
          },
          "width": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "height": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "diameter": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "minX": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "maxX": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "minY": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "maxY": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "area": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "minExtent": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "maxExtent": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "centre": {
            "$ref": "#/components/schemas/Coordinate"
          }
        },
        "additionalProperties": false
      },
      "EquippedItemIdViewModel": {
        "required": [
          "slot"
        ],
        "type": "object",
        "properties": {
          "slot": {
            "$ref": "#/components/schemas/ItemSlot"
          },
          "userItemId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EquippedItemViewModel": {
        "required": [
          "slot",
          "userItem"
        ],
        "type": "object",
        "properties": {
          "slot": {
            "$ref": "#/components/schemas/ItemSlot"
          },
          "userItem": {
            "$ref": "#/components/schemas/UserItemViewModel"
          }
        },
        "additionalProperties": false
      },
      "EquippedItemViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EquippedItemViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Error": {
        "required": [
          "code",
          "source",
          "type"
        ],
        "type": "object",
        "properties": {
          "traceId": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ErrorType"
          },
          "code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/ErrorSource"
          },
          "stackTrace": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorCode": {
        "enum": [
          "ApplicationClosed",
          "ApplicationNotFound",
          "BattleInvalidPhase",
          "BattleNotFound",
          "BattleTooFar",
          "CharacterForTournament",
          "CharacterForTournamentNotFound",
          "CharacterGenerationRequirement",
          "CharacterLevelRequirementNotMet",
          "CharacterNotFound",
          "CharacterRecentlyCreated",
          "CharacteristicDecreased",
          "ClanInvitationClosed",
          "ClanInvitationNotFound",
          "ClanMemberRoleNotMet",
          "ClanNameAlreadyUsed",
          "ClanNeedLeader",
          "ClanNotFound",
          "ClanLeaderFound",
          "ClanTagAlreadyUsed",
          "Conflict",
          "FighterNotACommander",
          "InternalError",
          "InvalidField",
          "ItemAlreadyOwned",
          "ItemBadSlot",
          "ItemBroken",
          "ItemDisabled",
          "ItemNotBuyable",
          "ItemNotFound",
          "ItemNotOwned",
          "ItemNotReforgeable",
          "ItemNotSellable",
          "ItemNotUpgradable",
          "NotEnoughAttributePoints",
          "NotEnoughGold",
          "NotEnoughHeirloomPoints",
          "NotEnoughSkillPoints",
          "NotEnoughWeaponProficiencyPoints",
          "PartiesNotOnTheSameSide",
          "PartyFighter",
          "PartyInBattle",
          "PartyNotAFighter",
          "PartyNotEnoughTroops",
          "PartyNotFound",
          "PartyNotInASettlement",
          "PartyNotInSight",
          "PartyNotSettlementOwner",
          "SettlementNotFound",
          "SettlementTooFar",
          "SkillRequirementNotMet",
          "UserAlreadyInAClan",
          "UserAlreadyInTheClan",
          "UserAlreadyRegisteredToStrategus",
          "UserItemIsNotBroken",
          "UserItemMaxRankReached",
          "UserItemNotFound",
          "UserNotAClanMember",
          "UserNotFound",
          "UserNotificationNotFound",
          "UserNotInAClan",
          "UserRoleNotMet",
          "PersonalItemAlreadyExist",
          "SettingNotFound",
          "TerrainNotFound"
        ],
        "type": "string"
      },
      "ErrorSource": {
        "type": "object",
        "properties": {
          "pointer": {
            "type": "string",
            "nullable": true
          },
          "parameter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorType": {
        "enum": [
          "InternalError",
          "Forbidden",
          "Conflict",
          "NotFound",
          "Validation"
        ],
        "type": "string"
      },
      "GameCharacterViewModel": {
        "required": [
          "characteristics",
          "class",
          "equippedItems",
          "experience",
          "forTournament",
          "generation",
          "id",
          "level",
          "name",
          "statistics"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "generation": {
            "type": "integer",
            "format": "int32"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "experience": {
            "type": "integer",
            "format": "int32"
          },
          "class": {
            "$ref": "#/components/schemas/CharacterClass"
          },
          "forTournament": {
            "type": "boolean"
          },
          "characteristics": {
            "$ref": "#/components/schemas/CharacterCharacteristicsViewModel"
          },
          "statistics": {
            "$ref": "#/components/schemas/CharacterStatisticsViewModel"
          },
          "equippedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameEquippedItemViewModel"
            }
          }
        },
        "additionalProperties": false
      },
      "GameClanMemberViewModel": {
        "required": [
          "clanId",
          "role"
        ],
        "type": "object",
        "properties": {
          "clanId": {
            "type": "integer",
            "format": "int32"
          },
          "role": {
            "$ref": "#/components/schemas/ClanMemberRole"
          }
        },
        "additionalProperties": false
      },
      "GameEquippedItemViewModel": {
        "required": [
          "slot",
          "userItem"
        ],
        "type": "object",
        "properties": {
          "slot": {
            "$ref": "#/components/schemas/ItemSlot"
          },
          "userItem": {
            "$ref": "#/components/schemas/GameUserItemViewModel"
          }
        },
        "additionalProperties": false
      },
      "GameMode": {
        "enum": [
          "CRPGBattle",
          "CRPGConquest",
          "CRPGDTV",
          "CRPGDuel",
          "CRPGSiege",
          "CRPGTeamDeathmatch",
          "CRPGSkirmish",
          "CRPGUnknownGameMode",
          "CRPGCaptain"
        ],
        "type": "string"
      },
      "GameModeCharacterStatisticsViewModelDictionaryResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "required": [
              "CRPGBattle",
              "CRPGConquest",
              "CRPGDTV",
              "CRPGDuel",
              "CRPGSiege",
              "CRPGTeamDeathmatch",
              "CRPGSkirmish",
              "CRPGUnknownGameMode",
              "CRPGCaptain"
            ],
            "type": "object",
            "properties": {
              "CRPGBattle": {
                "$ref": "#/components/schemas/CharacterStatisticsViewModel"
              },
              "CRPGConquest": {
                "$ref": "#/components/schemas/CharacterStatisticsViewModel"
              },
              "CRPGDTV": {
                "$ref": "#/components/schemas/CharacterStatisticsViewModel"
              },
              "CRPGDuel": {
                "$ref": "#/components/schemas/CharacterStatisticsViewModel"
              },
              "CRPGSiege": {
                "$ref": "#/components/schemas/CharacterStatisticsViewModel"
              },
              "CRPGTeamDeathmatch": {
                "$ref": "#/components/schemas/CharacterStatisticsViewModel"
              },
              "CRPGSkirmish": {
                "$ref": "#/components/schemas/CharacterStatisticsViewModel"
              },
              "CRPGUnknownGameMode": {
                "$ref": "#/components/schemas/CharacterStatisticsViewModel"
              },
              "CRPGCaptain": {
                "$ref": "#/components/schemas/CharacterStatisticsViewModel"
              }
            },
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameModeNullable": {
        "enum": [
          "CRPGBattle",
          "CRPGConquest",
          "CRPGDTV",
          "CRPGDuel",
          "CRPGSiege",
          "CRPGTeamDeathmatch",
          "CRPGSkirmish",
          "CRPGUnknownGameMode",
          "CRPGCaptain",
          null
        ],
        "type": "string",
        "nullable": true
      },
      "GameRepairedItem": {
        "required": [
          "broke",
          "itemId",
          "repairCost"
        ],
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string"
          },
          "repairCost": {
            "type": "integer",
            "format": "int32"
          },
          "broke": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GameServerStats": {
        "required": [
          "regions",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "$ref": "#/components/schemas/GameStats"
          },
          "regions": {
            "required": [
              "Eu",
              "Na",
              "As",
              "Oc"
            ],
            "type": "object",
            "properties": {
              "Eu": {
                "required": [
                  "CRPGBattle",
                  "CRPGConquest",
                  "CRPGDTV",
                  "CRPGDuel",
                  "CRPGSiege",
                  "CRPGTeamDeathmatch",
                  "CRPGSkirmish",
                  "CRPGUnknownGameMode",
                  "CRPGCaptain"
                ],
                "type": "object",
                "properties": {
                  "CRPGBattle": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGConquest": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGDTV": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGDuel": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGSiege": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGTeamDeathmatch": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGSkirmish": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGUnknownGameMode": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGCaptain": {
                    "$ref": "#/components/schemas/GameStats"
                  }
                },
                "additionalProperties": false
              },
              "Na": {
                "required": [
                  "CRPGBattle",
                  "CRPGConquest",
                  "CRPGDTV",
                  "CRPGDuel",
                  "CRPGSiege",
                  "CRPGTeamDeathmatch",
                  "CRPGSkirmish",
                  "CRPGUnknownGameMode",
                  "CRPGCaptain"
                ],
                "type": "object",
                "properties": {
                  "CRPGBattle": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGConquest": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGDTV": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGDuel": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGSiege": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGTeamDeathmatch": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGSkirmish": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGUnknownGameMode": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGCaptain": {
                    "$ref": "#/components/schemas/GameStats"
                  }
                },
                "additionalProperties": false
              },
              "As": {
                "required": [
                  "CRPGBattle",
                  "CRPGConquest",
                  "CRPGDTV",
                  "CRPGDuel",
                  "CRPGSiege",
                  "CRPGTeamDeathmatch",
                  "CRPGSkirmish",
                  "CRPGUnknownGameMode",
                  "CRPGCaptain"
                ],
                "type": "object",
                "properties": {
                  "CRPGBattle": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGConquest": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGDTV": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGDuel": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGSiege": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGTeamDeathmatch": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGSkirmish": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGUnknownGameMode": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGCaptain": {
                    "$ref": "#/components/schemas/GameStats"
                  }
                },
                "additionalProperties": false
              },
              "Oc": {
                "required": [
                  "CRPGBattle",
                  "CRPGConquest",
                  "CRPGDTV",
                  "CRPGDuel",
                  "CRPGSiege",
                  "CRPGTeamDeathmatch",
                  "CRPGSkirmish",
                  "CRPGUnknownGameMode",
                  "CRPGCaptain"
                ],
                "type": "object",
                "properties": {
                  "CRPGBattle": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGConquest": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGDTV": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGDuel": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGSiege": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGTeamDeathmatch": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGSkirmish": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGUnknownGameMode": {
                    "$ref": "#/components/schemas/GameStats"
                  },
                  "CRPGCaptain": {
                    "$ref": "#/components/schemas/GameStats"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "GameServerStatsResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/GameServerStats"
          }
        },
        "additionalProperties": false
      },
      "GameStats": {
        "required": [
          "playingCount"
        ],
        "type": "object",
        "properties": {
          "playingCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GameUserDamagedItem": {
        "required": [
          "repairCost",
          "userItemId"
        ],
        "type": "object",
        "properties": {
          "userItemId": {
            "type": "integer",
            "format": "int32"
          },
          "repairCost": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GameUserEffectiveReward": {
        "required": [
          "experience",
          "gold",
          "levelUp"
        ],
        "type": "object",
        "properties": {
          "gold": {
            "type": "integer",
            "format": "int32"
          },
          "experience": {
            "type": "integer",
            "format": "int32"
          },
          "levelUp": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GameUserItemViewModel": {
        "required": [
          "id",
          "itemId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "itemId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GameUserReward": {
        "required": [
          "experience",
          "gold"
        ],
        "type": "object",
        "properties": {
          "gold": {
            "type": "integer",
            "format": "int32"
          },
          "experience": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GameUserUpdate": {
        "required": [
          "brokenItems",
          "characterId",
          "instance",
          "reward",
          "statistics",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "characterId": {
            "type": "integer",
            "format": "int32"
          },
          "reward": {
            "$ref": "#/components/schemas/GameUserReward"
          },
          "statistics": {
            "$ref": "#/components/schemas/CharacterStatisticsViewModel"
          },
          "brokenItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameUserDamagedItem"
            }
          },
          "instance": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GameUserViewModel": {
        "required": [
          "character",
          "clanMembership",
          "createdAt",
          "experienceMultiplier",
          "gold",
          "heirloomPoints",
          "id",
          "name",
          "platform",
          "platformUserId",
          "region",
          "restrictions",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "platform": {
            "$ref": "#/components/schemas/Platform"
          },
          "platformUserId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gold": {
            "type": "integer",
            "format": "int32"
          },
          "heirloomPoints": {
            "type": "integer",
            "format": "int32"
          },
          "experienceMultiplier": {
            "type": "number",
            "format": "float"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "character": {
            "$ref": "#/components/schemas/GameCharacterViewModel"
          },
          "restrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestrictionViewModel"
            }
          },
          "clanMembership": {
            "$ref": "#/components/schemas/GameClanMemberViewModel"
          }
        },
        "additionalProperties": false
      },
      "GameUserViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/GameUserViewModel"
          }
        },
        "additionalProperties": false
      },
      "Geometry": {
        "required": [
          "area",
          "boundary",
          "boundaryDimension",
          "centroid",
          "coordinate",
          "dimension",
          "envelope",
          "envelopeInternal",
          "factory",
          "interiorPoint",
          "isEmpty",
          "isRectangle",
          "isSimple",
          "isValid",
          "length",
          "numGeometries",
          "numPoints",
          "ogcGeometryType",
          "pointOnSurface",
          "precisionModel",
          "srid"
        ],
        "type": "object",
        "properties": {
          "factory": {
            "$ref": "#/components/schemas/GeometryFactory"
          },
          "userData": {
            "nullable": true
          },
          "srid": {
            "type": "integer",
            "format": "int32"
          },
          "geometryType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ogcGeometryType": {
            "$ref": "#/components/schemas/OgcGeometryType"
          },
          "precisionModel": {
            "$ref": "#/components/schemas/PrecisionModel"
          },
          "coordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coordinate"
            },
            "nullable": true,
            "readOnly": true
          },
          "numPoints": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "numGeometries": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isSimple": {
            "type": "boolean",
            "readOnly": true
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "isEmpty": {
            "type": "boolean",
            "readOnly": true
          },
          "area": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "length": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "centroid": {
            "$ref": "#/components/schemas/Point"
          },
          "interiorPoint": {
            "$ref": "#/components/schemas/Point"
          },
          "pointOnSurface": {
            "$ref": "#/components/schemas/Point"
          },
          "dimension": {
            "$ref": "#/components/schemas/Dimension"
          },
          "boundary": {
            "$ref": "#/components/schemas/Geometry"
          },
          "boundaryDimension": {
            "$ref": "#/components/schemas/Dimension"
          },
          "envelope": {
            "$ref": "#/components/schemas/Geometry"
          },
          "envelopeInternal": {
            "$ref": "#/components/schemas/Envelope"
          },
          "isRectangle": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GeometryFactory": {
        "required": [
          "coordinateSequenceFactory",
          "geometryServices",
          "precisionModel",
          "srid"
        ],
        "type": "object",
        "properties": {
          "precisionModel": {
            "$ref": "#/components/schemas/PrecisionModel"
          },
          "coordinateSequenceFactory": {
            "$ref": "#/components/schemas/CoordinateSequenceFactory"
          },
          "srid": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "geometryServices": {
            "$ref": "#/components/schemas/NtsGeometryServices"
          }
        },
        "additionalProperties": false
      },
      "GeometryOverlay": {
        "type": "object",
        "additionalProperties": false
      },
      "InviteClanMemberCommand": {
        "required": [
          "clanId",
          "inviteeId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "clanId": {
            "type": "integer",
            "format": "int32"
          },
          "inviteeId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ItemArmorComponentViewModel": {
        "required": [
          "armArmor",
          "bodyArmor",
          "familyType",
          "headArmor",
          "legArmor",
          "materialType"
        ],
        "type": "object",
        "properties": {
          "headArmor": {
            "type": "integer",
            "format": "int32"
          },
          "bodyArmor": {
            "type": "integer",
            "format": "int32"
          },
          "armArmor": {
            "type": "integer",
            "format": "int32"
          },
          "legArmor": {
            "type": "integer",
            "format": "int32"
          },
          "materialType": {
            "$ref": "#/components/schemas/ArmorMaterialType"
          },
          "familyType": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ItemFlags": {
        "enum": [
          "ForceAttachOffHandPrimaryItemBone",
          "ForceAttachOffHandSecondaryItemBone",
          "NotUsableByFemale",
          "NotUsableByMale",
          "DropOnWeaponChange",
          "DropOnAnyAction",
          "CannotBePickedUp",
          "CanBePickedUpFromCorpse",
          "QuickFadeOut",
          "WoodenAttack",
          "WoodenParry",
          "HeldInOffHand",
          "HasToBeHeldUp",
          "UseTeamColor",
          "Civilian",
          "DoNotScaleBodyAccordingToWeaponLength",
          "DoesNotHideChest",
          "NotStackable"
        ],
        "type": "string",
        "format": ""
      },
      "ItemMountComponentViewModel": {
        "required": [
          "bodyLength",
          "chargeDamage",
          "familyType",
          "hitPoints",
          "maneuver",
          "speed"
        ],
        "type": "object",
        "properties": {
          "bodyLength": {
            "type": "integer",
            "format": "int32"
          },
          "chargeDamage": {
            "type": "integer",
            "format": "int32"
          },
          "maneuver": {
            "type": "integer",
            "format": "int32"
          },
          "speed": {
            "type": "integer",
            "format": "int32"
          },
          "hitPoints": {
            "type": "integer",
            "format": "int32"
          },
          "familyType": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ItemSlot": {
        "enum": [
          "Head",
          "Shoulder",
          "Body",
          "Hand",
          "Leg",
          "MountHarness",
          "Mount",
          "Weapon0",
          "Weapon1",
          "Weapon2",
          "Weapon3",
          "WeaponExtra"
        ],
        "type": "string"
      },
      "ItemStack": {
        "required": [
          "count",
          "item"
        ],
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/ItemViewModel"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ItemStackIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemStack"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ItemStackResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/ItemStack"
          }
        },
        "additionalProperties": false
      },
      "ItemType": {
        "enum": [
          "Undefined",
          "HeadArmor",
          "ShoulderArmor",
          "BodyArmor",
          "HandArmor",
          "LegArmor",
          "MountHarness",
          "Mount",
          "Shield",
          "Bow",
          "Crossbow",
          "OneHandedWeapon",
          "TwoHandedWeapon",
          "Polearm",
          "Thrown",
          "Arrows",
          "Bolts",
          "Pistol",
          "Musket",
          "Bullets",
          "Banner"
        ],
        "type": "string"
      },
      "ItemViewModel": {
        "required": [
          "armor",
          "baseId",
          "createdAt",
          "culture",
          "enabled",
          "flags",
          "id",
          "mount",
          "name",
          "price",
          "rank",
          "requirement",
          "tier",
          "type",
          "weapons",
          "weight"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "baseId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "culture": {
            "$ref": "#/components/schemas/Culture"
          },
          "type": {
            "$ref": "#/components/schemas/ItemType"
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "tier": {
            "type": "number",
            "format": "float"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "requirement": {
            "type": "integer",
            "format": "int32"
          },
          "weight": {
            "type": "number",
            "format": "float"
          },
          "flags": {
            "$ref": "#/components/schemas/ItemFlags"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "armor": {
            "$ref": "#/components/schemas/ItemArmorComponentViewModel"
          },
          "mount": {
            "$ref": "#/components/schemas/ItemMountComponentViewModel"
          },
          "weapons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemWeaponComponentViewModel"
            }
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ItemViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ItemWeaponComponentViewModel": {
        "required": [
          "accuracy",
          "balance",
          "bodyArmor",
          "class",
          "flags",
          "handling",
          "itemUsage",
          "length",
          "missileSpeed",
          "stackAmount",
          "swingDamage",
          "swingDamageType",
          "swingSpeed",
          "thrustDamage",
          "thrustDamageType",
          "thrustSpeed"
        ],
        "type": "object",
        "properties": {
          "class": {
            "$ref": "#/components/schemas/WeaponClass"
          },
          "itemUsage": {
            "type": "string"
          },
          "accuracy": {
            "type": "integer",
            "format": "int32"
          },
          "missileSpeed": {
            "type": "integer",
            "format": "int32"
          },
          "stackAmount": {
            "type": "integer",
            "format": "int32"
          },
          "length": {
            "type": "integer",
            "format": "int32"
          },
          "balance": {
            "type": "number",
            "format": "float"
          },
          "handling": {
            "type": "integer",
            "format": "int32"
          },
          "bodyArmor": {
            "type": "integer",
            "format": "int32"
          },
          "flags": {
            "$ref": "#/components/schemas/WeaponFlags"
          },
          "thrustDamage": {
            "type": "integer",
            "format": "int32"
          },
          "thrustDamageType": {
            "$ref": "#/components/schemas/DamageType"
          },
          "thrustSpeed": {
            "type": "integer",
            "format": "int32"
          },
          "swingDamage": {
            "type": "integer",
            "format": "int32"
          },
          "swingDamageType": {
            "$ref": "#/components/schemas/DamageType"
          },
          "swingSpeed": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Languages": {
        "enum": [
          "En",
          "Zh",
          "Ru",
          "De",
          "Fr",
          "It",
          "Es",
          "Pl",
          "Uk",
          "Ro",
          "Nl",
          "Tr",
          "El",
          "Hu",
          "Sv",
          "Cs",
          "Pt",
          "Sr",
          "Bg",
          "Hr",
          "Da",
          "Fi",
          "No",
          "Be",
          "Lv"
        ],
        "type": "string"
      },
      "LineString": {
        "required": [
          "area",
          "boundary",
          "boundaryDimension",
          "centroid",
          "coordinate",
          "coordinateSequence",
          "count",
          "dimension",
          "endPoint",
          "envelope",
          "envelopeInternal",
          "factory",
          "interiorPoint",
          "isClosed",
          "isEmpty",
          "isRectangle",
          "isRing",
          "isSimple",
          "isValid",
          "length",
          "numGeometries",
          "numPoints",
          "ogcGeometryType",
          "pointOnSurface",
          "precisionModel",
          "srid",
          "startPoint"
        ],
        "type": "object",
        "properties": {
          "factory": {
            "$ref": "#/components/schemas/GeometryFactory"
          },
          "userData": {
            "nullable": true
          },
          "srid": {
            "type": "integer",
            "format": "int32"
          },
          "precisionModel": {
            "$ref": "#/components/schemas/PrecisionModel"
          },
          "numGeometries": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isSimple": {
            "type": "boolean",
            "readOnly": true
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "area": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "centroid": {
            "$ref": "#/components/schemas/Point"
          },
          "interiorPoint": {
            "$ref": "#/components/schemas/Point"
          },
          "pointOnSurface": {
            "$ref": "#/components/schemas/Point"
          },
          "envelope": {
            "$ref": "#/components/schemas/Geometry"
          },
          "envelopeInternal": {
            "$ref": "#/components/schemas/Envelope"
          },
          "isRectangle": {
            "type": "boolean",
            "readOnly": true
          },
          "coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coordinate"
            },
            "nullable": true,
            "readOnly": true
          },
          "coordinateSequence": {
            "$ref": "#/components/schemas/CoordinateSequence"
          },
          "coordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "dimension": {
            "$ref": "#/components/schemas/Dimension"
          },
          "boundaryDimension": {
            "$ref": "#/components/schemas/Dimension"
          },
          "isEmpty": {
            "type": "boolean",
            "readOnly": true
          },
          "numPoints": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "startPoint": {
            "$ref": "#/components/schemas/Point"
          },
          "endPoint": {
            "$ref": "#/components/schemas/Point"
          },
          "isClosed": {
            "type": "boolean",
            "readOnly": true
          },
          "isRing": {
            "type": "boolean",
            "readOnly": true
          },
          "geometryType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ogcGeometryType": {
            "$ref": "#/components/schemas/OgcGeometryType"
          },
          "length": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "boundary": {
            "$ref": "#/components/schemas/Geometry"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LinearRing": {
        "required": [
          "area",
          "boundary",
          "boundaryDimension",
          "centroid",
          "coordinate",
          "coordinateSequence",
          "count",
          "dimension",
          "endPoint",
          "envelope",
          "envelopeInternal",
          "factory",
          "interiorPoint",
          "isCCW",
          "isClosed",
          "isEmpty",
          "isRectangle",
          "isRing",
          "isSimple",
          "isValid",
          "length",
          "numGeometries",
          "numPoints",
          "ogcGeometryType",
          "pointOnSurface",
          "precisionModel",
          "srid",
          "startPoint"
        ],
        "type": "object",
        "properties": {
          "factory": {
            "$ref": "#/components/schemas/GeometryFactory"
          },
          "userData": {
            "nullable": true
          },
          "srid": {
            "type": "integer",
            "format": "int32"
          },
          "precisionModel": {
            "$ref": "#/components/schemas/PrecisionModel"
          },
          "numGeometries": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isSimple": {
            "type": "boolean",
            "readOnly": true
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "area": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "centroid": {
            "$ref": "#/components/schemas/Point"
          },
          "interiorPoint": {
            "$ref": "#/components/schemas/Point"
          },
          "pointOnSurface": {
            "$ref": "#/components/schemas/Point"
          },
          "envelope": {
            "$ref": "#/components/schemas/Geometry"
          },
          "envelopeInternal": {
            "$ref": "#/components/schemas/Envelope"
          },
          "isRectangle": {
            "type": "boolean",
            "readOnly": true
          },
          "coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coordinate"
            },
            "nullable": true,
            "readOnly": true
          },
          "coordinateSequence": {
            "$ref": "#/components/schemas/CoordinateSequence"
          },
          "coordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "dimension": {
            "$ref": "#/components/schemas/Dimension"
          },
          "isEmpty": {
            "type": "boolean",
            "readOnly": true
          },
          "numPoints": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "startPoint": {
            "$ref": "#/components/schemas/Point"
          },
          "endPoint": {
            "$ref": "#/components/schemas/Point"
          },
          "isRing": {
            "type": "boolean",
            "readOnly": true
          },
          "ogcGeometryType": {
            "$ref": "#/components/schemas/OgcGeometryType"
          },
          "length": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "boundary": {
            "$ref": "#/components/schemas/Geometry"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "boundaryDimension": {
            "$ref": "#/components/schemas/Dimension"
          },
          "isClosed": {
            "type": "boolean",
            "readOnly": true
          },
          "geometryType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isCCW": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "NotificationState": {
        "enum": [
          "Unread",
          "Read"
        ],
        "type": "string"
      },
      "NotificationType": {
        "enum": [
          "UserRewardedToUser",
          "CharacterRewardedToUser",
          "ItemReturned",
          "ClanApplicationCreatedToUser",
          "ClanApplicationCreatedToOfficers",
          "ClanApplicationAcceptedToUser",
          "ClanApplicationDeclinedToUser",
          "ClanMemberRoleChangedToUser",
          "ClanMemberLeavedToLeader",
          "ClanMemberKickedToExMember",
          "ClanArmoryBorrowItemToLender",
          "ClanArmoryRemoveItemToBorrower"
        ],
        "type": "string"
      },
      "NtsGeometryServices": {
        "required": [
          "coordinateEqualityComparer",
          "defaultCoordinateSequenceFactory",
          "defaultPrecisionModel",
          "defaultSRID",
          "geometryOverlay"
        ],
        "type": "object",
        "properties": {
          "geometryOverlay": {
            "$ref": "#/components/schemas/GeometryOverlay"
          },
          "coordinateEqualityComparer": {
            "$ref": "#/components/schemas/CoordinateEqualityComparer"
          },
          "defaultSRID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "defaultCoordinateSequenceFactory": {
            "$ref": "#/components/schemas/CoordinateSequenceFactory"
          },
          "defaultPrecisionModel": {
            "$ref": "#/components/schemas/PrecisionModel"
          }
        },
        "additionalProperties": false
      },
      "OgcGeometryType": {
        "enum": [
          "Point",
          "LineString",
          "Polygon",
          "MultiPoint",
          "MultiLineString",
          "MultiPolygon",
          "GeometryCollection",
          "CircularString",
          "CompoundCurve",
          "CurvePolygon",
          "MultiCurve",
          "MultiSurface",
          "Curve",
          "Surface",
          "PolyhedralSurface",
          "TIN"
        ],
        "type": "string"
      },
      "Ordinates": {
        "enum": [
          "None",
          "Spatial1",
          "Spatial1",
          "Spatial2",
          "Spatial2",
          "XY",
          "Spatial3",
          "Spatial3",
          "XYZ",
          "Spatial4",
          "Spatial5",
          "Spatial6",
          "Spatial7",
          "Spatial8",
          "Spatial9",
          "Spatial10",
          "Spatial11",
          "Spatial12",
          "Spatial13",
          "Spatial14",
          "Spatial15",
          "Spatial16",
          "AllSpatialOrdinates",
          "Measure1",
          "Measure1",
          "XYM",
          "XYZM",
          "Measure2",
          "Measure3",
          "Measure4",
          "Measure5",
          "Measure6",
          "Measure7",
          "Measure8",
          "Measure9",
          "Measure10",
          "Measure11",
          "Measure12",
          "Measure13",
          "Measure14",
          "Measure15",
          "Measure16",
          "AllMeasureOrdinates",
          "AllOrdinates"
        ],
        "type": "string",
        "format": ""
      },
      "PartyPublicViewModel": {
        "required": [
          "id",
          "user"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "user": {
            "$ref": "#/components/schemas/UserPublicViewModel"
          }
        },
        "additionalProperties": false
      },
      "PartyStatus": {
        "enum": [
          "Idle",
          "IdleInSettlement",
          "RecruitingInSettlement",
          "MovingToPoint",
          "FollowingParty",
          "MovingToSettlement",
          "MovingToAttackParty",
          "MovingToAttackSettlement",
          "InBattle"
        ],
        "type": "string"
      },
      "PartyViewModel": {
        "required": [
          "gold",
          "id",
          "position",
          "status",
          "targetedParty",
          "targetedSettlement",
          "troops",
          "user",
          "waypoints"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "gold": {
            "type": "integer",
            "format": "int32"
          },
          "troops": {
            "type": "integer",
            "format": "int32"
          },
          "position": {
            "$ref": "#/components/schemas/Point"
          },
          "status": {
            "$ref": "#/components/schemas/PartyStatus"
          },
          "waypoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Geometry"
            }
          },
          "targetedParty": {
            "$ref": "#/components/schemas/PartyVisibleViewModel"
          },
          "targetedSettlement": {
            "$ref": "#/components/schemas/SettlementPublicViewModel"
          },
          "user": {
            "$ref": "#/components/schemas/UserPublicViewModel"
          }
        },
        "additionalProperties": false
      },
      "PartyViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/PartyViewModel"
          }
        },
        "additionalProperties": false
      },
      "PartyVisibleViewModel": {
        "required": [
          "id",
          "position",
          "troops",
          "user"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "troops": {
            "type": "integer",
            "format": "int32"
          },
          "position": {
            "$ref": "#/components/schemas/Point"
          },
          "user": {
            "$ref": "#/components/schemas/UserPublicViewModel"
          }
        },
        "additionalProperties": false
      },
      "PatchNotes": {
        "required": [
          "createdAt",
          "id",
          "tagName",
          "title",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "tagName": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PatchNotesIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchNotes"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Platform": {
        "enum": [
          "Steam",
          "EpicGames",
          "Microsoft"
        ],
        "type": "string"
      },
      "Point": {
        "required": [
          "area",
          "boundary",
          "boundaryDimension",
          "centroid",
          "coordinate",
          "coordinateSequence",
          "dimension",
          "envelope",
          "envelopeInternal",
          "factory",
          "interiorPoint",
          "isEmpty",
          "isRectangle",
          "isSimple",
          "isValid",
          "length",
          "m",
          "numGeometries",
          "numPoints",
          "ogcGeometryType",
          "pointOnSurface",
          "precisionModel",
          "srid",
          "x",
          "y",
          "z"
        ],
        "type": "object",
        "properties": {
          "factory": {
            "$ref": "#/components/schemas/GeometryFactory"
          },
          "userData": {
            "nullable": true
          },
          "srid": {
            "type": "integer",
            "format": "int32"
          },
          "precisionModel": {
            "$ref": "#/components/schemas/PrecisionModel"
          },
          "numGeometries": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isSimple": {
            "type": "boolean",
            "readOnly": true
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "area": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "length": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "centroid": {
            "$ref": "#/components/schemas/Point"
          },
          "interiorPoint": {
            "$ref": "#/components/schemas/Point"
          },
          "pointOnSurface": {
            "$ref": "#/components/schemas/Point"
          },
          "envelope": {
            "$ref": "#/components/schemas/Geometry"
          },
          "envelopeInternal": {
            "$ref": "#/components/schemas/Envelope"
          },
          "isRectangle": {
            "type": "boolean",
            "readOnly": true
          },
          "coordinateSequence": {
            "$ref": "#/components/schemas/CoordinateSequence"
          },
          "coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coordinate"
            },
            "nullable": true,
            "readOnly": true
          },
          "numPoints": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isEmpty": {
            "type": "boolean",
            "readOnly": true
          },
          "dimension": {
            "$ref": "#/components/schemas/Dimension"
          },
          "boundaryDimension": {
            "$ref": "#/components/schemas/Dimension"
          },
          "x": {
            "type": "number",
            "format": "double"
          },
          "y": {
            "type": "number",
            "format": "double"
          },
          "coordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "geometryType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ogcGeometryType": {
            "$ref": "#/components/schemas/OgcGeometryType"
          },
          "boundary": {
            "$ref": "#/components/schemas/Geometry"
          },
          "z": {
            "type": "number",
            "format": "double"
          },
          "m": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Polygon": {
        "required": [
          "area",
          "boundary",
          "boundaryDimension",
          "centroid",
          "coordinate",
          "dimension",
          "envelope",
          "envelopeInternal",
          "exteriorRing",
          "factory",
          "interiorPoint",
          "isEmpty",
          "isRectangle",
          "isSimple",
          "isValid",
          "length",
          "numGeometries",
          "numInteriorRings",
          "numPoints",
          "ogcGeometryType",
          "pointOnSurface",
          "precisionModel",
          "shell",
          "srid"
        ],
        "type": "object",
        "properties": {
          "factory": {
            "$ref": "#/components/schemas/GeometryFactory"
          },
          "userData": {
            "nullable": true
          },
          "srid": {
            "type": "integer",
            "format": "int32"
          },
          "precisionModel": {
            "$ref": "#/components/schemas/PrecisionModel"
          },
          "numGeometries": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isSimple": {
            "type": "boolean",
            "readOnly": true
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "centroid": {
            "$ref": "#/components/schemas/Point"
          },
          "interiorPoint": {
            "$ref": "#/components/schemas/Point"
          },
          "pointOnSurface": {
            "$ref": "#/components/schemas/Point"
          },
          "envelope": {
            "$ref": "#/components/schemas/Geometry"
          },
          "envelopeInternal": {
            "$ref": "#/components/schemas/Envelope"
          },
          "coordinate": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coordinate"
            },
            "nullable": true,
            "readOnly": true
          },
          "numPoints": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "dimension": {
            "$ref": "#/components/schemas/Dimension"
          },
          "boundaryDimension": {
            "$ref": "#/components/schemas/Dimension"
          },
          "isEmpty": {
            "type": "boolean",
            "readOnly": true
          },
          "exteriorRing": {
            "$ref": "#/components/schemas/LineString"
          },
          "numInteriorRings": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "interiorRings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineString"
            },
            "nullable": true,
            "readOnly": true
          },
          "geometryType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ogcGeometryType": {
            "$ref": "#/components/schemas/OgcGeometryType"
          },
          "area": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "length": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "boundary": {
            "$ref": "#/components/schemas/Geometry"
          },
          "isRectangle": {
            "type": "boolean",
            "readOnly": true
          },
          "shell": {
            "$ref": "#/components/schemas/LinearRing"
          },
          "holes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinearRing"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PrecisionModel": {
        "required": [
          "gridSize",
          "isFloating",
          "maximumSignificantDigits",
          "precisionModelType",
          "scale"
        ],
        "type": "object",
        "properties": {
          "isFloating": {
            "type": "boolean",
            "readOnly": true
          },
          "maximumSignificantDigits": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "scale": {
            "type": "number",
            "format": "double"
          },
          "gridSize": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "precisionModelType": {
            "$ref": "#/components/schemas/PrecisionModels"
          }
        },
        "additionalProperties": false
      },
      "PrecisionModels": {
        "enum": [
          "Floating",
          "FloatingSingle",
          "Fixed"
        ],
        "type": "string"
      },
      "RefundItemCommand": {
        "required": [
          "itemId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Region": {
        "enum": [
          "Eu",
          "Na",
          "As",
          "Oc"
        ],
        "type": "string"
      },
      "RegionNullable": {
        "enum": [
          "Eu",
          "Na",
          "As",
          "Oc",
          null
        ],
        "type": "string",
        "nullable": true
      },
      "RespondClanInvitationCommand": {
        "required": [
          "accept",
          "clanId",
          "clanInvitationId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "clanId": {
            "type": "integer",
            "format": "int32"
          },
          "clanInvitationId": {
            "type": "integer",
            "format": "int32"
          },
          "accept": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RespondToBattleFighterApplicationCommand": {
        "required": [
          "accept",
          "fighterApplicationId",
          "partyId"
        ],
        "type": "object",
        "properties": {
          "partyId": {
            "type": "integer",
            "format": "int32"
          },
          "fighterApplicationId": {
            "type": "integer",
            "format": "int32"
          },
          "accept": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RespondToBattleMercenaryApplicationCommand": {
        "required": [
          "accept",
          "mercenaryApplicationId",
          "partyId"
        ],
        "type": "object",
        "properties": {
          "partyId": {
            "type": "integer",
            "format": "int32"
          },
          "mercenaryApplicationId": {
            "type": "integer",
            "format": "int32"
          },
          "accept": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RestrictCommand": {
        "required": [
          "duration",
          "publicReason",
          "reason",
          "restrictedByUserId",
          "restrictedUserId",
          "type"
        ],
        "type": "object",
        "properties": {
          "restrictedUserId": {
            "type": "integer",
            "format": "int32"
          },
          "duration": {
            "type": "string",
            "format": "date-span"
          },
          "type": {
            "$ref": "#/components/schemas/RestrictionType"
          },
          "reason": {
            "type": "string"
          },
          "publicReason": {
            "type": "string"
          },
          "restrictedByUserId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RestrictionPublicViewModel": {
        "required": [
          "createdAt",
          "duration",
          "id",
          "reason"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "duration": {
            "type": "string",
            "format": "date-span"
          },
          "reason": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "RestrictionPublicViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/RestrictionPublicViewModel"
          }
        },
        "additionalProperties": false
      },
      "RestrictionType": {
        "enum": [
          "All",
          "Join",
          "Chat"
        ],
        "type": "string"
      },
      "RestrictionViewModel": {
        "required": [
          "createdAt",
          "duration",
          "id",
          "publicReason",
          "reason",
          "restrictedByUser",
          "restrictedUser",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "restrictedUser": {
            "$ref": "#/components/schemas/UserPrivateViewModel"
          },
          "duration": {
            "type": "string",
            "format": "date-span"
          },
          "type": {
            "$ref": "#/components/schemas/RestrictionType"
          },
          "reason": {
            "type": "string"
          },
          "publicReason": {
            "type": "string"
          },
          "restrictedByUser": {
            "$ref": "#/components/schemas/UserPublicViewModel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "RestrictionViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestrictionViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RestrictionViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/RestrictionViewModel"
          }
        },
        "additionalProperties": false
      },
      "RewardCharacterCommand": {
        "required": [
          "actorUserId",
          "autoRetire",
          "characterId",
          "experience",
          "userId"
        ],
        "type": "object",
        "properties": {
          "characterId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "actorUserId": {
            "type": "integer",
            "format": "int32"
          },
          "experience": {
            "type": "integer",
            "format": "int32"
          },
          "autoRetire": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RewardUserCommand": {
        "required": [
          "actorUserId",
          "gold",
          "heirloomPoints",
          "itemId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "actorUserId": {
            "type": "integer",
            "format": "int32"
          },
          "gold": {
            "type": "integer",
            "format": "int32"
          },
          "heirloomPoints": {
            "type": "integer",
            "format": "int32"
          },
          "itemId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Role": {
        "enum": [
          "User",
          "Moderator",
          "GameAdmin",
          "Admin"
        ],
        "type": "string"
      },
      "SettingsViewModel": {
        "required": [
          "discord",
          "github",
          "modDb",
          "patreon",
          "reddit",
          "steam"
        ],
        "type": "object",
        "properties": {
          "discord": {
            "type": "string"
          },
          "steam": {
            "type": "string"
          },
          "patreon": {
            "type": "string"
          },
          "github": {
            "type": "string"
          },
          "reddit": {
            "type": "string"
          },
          "modDb": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SettingsViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/SettingsViewModel"
          }
        },
        "additionalProperties": false
      },
      "SettlementPublicViewModel": {
        "required": [
          "culture",
          "id",
          "name",
          "owner",
          "position",
          "region",
          "troops",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SettlementType"
          },
          "position": {
            "$ref": "#/components/schemas/Point"
          },
          "culture": {
            "$ref": "#/components/schemas/Culture"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "troops": {
            "type": "integer",
            "format": "int32"
          },
          "owner": {
            "$ref": "#/components/schemas/UserPublicViewModel"
          }
        },
        "additionalProperties": false
      },
      "SettlementPublicViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettlementPublicViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SettlementPublicViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/SettlementPublicViewModel"
          }
        },
        "additionalProperties": false
      },
      "SettlementType": {
        "enum": [
          "Village",
          "Castle",
          "Town"
        ],
        "type": "string"
      },
      "StrategusUpdate": {
        "required": [
          "party",
          "visibleBattles",
          "visibleParties",
          "visibleSettlements"
        ],
        "type": "object",
        "properties": {
          "party": {
            "$ref": "#/components/schemas/PartyViewModel"
          },
          "visibleParties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyVisibleViewModel"
            }
          },
          "visibleSettlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettlementPublicViewModel"
            }
          },
          "visibleBattles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BattleViewModel"
            }
          }
        },
        "additionalProperties": false
      },
      "StrategusUpdateResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/StrategusUpdate"
          }
        },
        "additionalProperties": false
      },
      "TerrainType": {
        "enum": [
          "Barrier",
          "ThickForest",
          "SparseForest",
          "ShallowWater",
          "DeepWater"
        ],
        "type": "string"
      },
      "TerrainViewModel": {
        "required": [
          "boundary",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/TerrainType"
          },
          "boundary": {
            "$ref": "#/components/schemas/Polygon"
          }
        },
        "additionalProperties": false
      },
      "TerrainViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerrainViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TerrainViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/TerrainViewModel"
          }
        },
        "additionalProperties": false
      },
      "UpdateCharacterCommand": {
        "required": [
          "characterId",
          "name",
          "userId"
        ],
        "type": "object",
        "properties": {
          "characterId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateCharacterItemsCommand": {
        "required": [
          "characterId",
          "items",
          "userId"
        ],
        "type": "object",
        "properties": {
          "characterId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EquippedItemIdViewModel"
            }
          }
        },
        "additionalProperties": false
      },
      "UpdateClanCommand": {
        "required": [
          "armoryTimeout",
          "bannerKey",
          "clanId",
          "description",
          "languages",
          "name",
          "primaryColor",
          "region",
          "secondaryColor",
          "tag",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "clanId": {
            "type": "integer",
            "format": "int32"
          },
          "tag": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "primaryColor": {
            "type": "integer",
            "format": "int32"
          },
          "secondaryColor": {
            "type": "integer",
            "format": "int32"
          },
          "bannerKey": {
            "type": "string"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Languages"
            }
          },
          "discord": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "armoryTimeout": {
            "type": "string",
            "format": "date-span"
          }
        },
        "additionalProperties": false
      },
      "UpdateClanMemberCommand": {
        "required": [
          "clanId",
          "memberId",
          "role",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "clanId": {
            "type": "integer",
            "format": "int32"
          },
          "memberId": {
            "type": "integer",
            "format": "int32"
          },
          "role": {
            "$ref": "#/components/schemas/ClanMemberRole"
          }
        },
        "additionalProperties": false
      },
      "UpdateGameUserResult": {
        "required": [
          "effectiveReward",
          "repairedItems",
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/GameUserViewModel"
          },
          "effectiveReward": {
            "$ref": "#/components/schemas/GameUserEffectiveReward"
          },
          "repairedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameRepairedItem"
            }
          }
        },
        "additionalProperties": false
      },
      "UpdateGameUsersCommand": {
        "required": [
          "key",
          "updates"
        ],
        "type": "object",
        "properties": {
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameUserUpdate"
            }
          },
          "key": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "UpdateGameUsersResult": {
        "required": [
          "updateResults"
        ],
        "type": "object",
        "properties": {
          "updateResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateGameUserResult"
            }
          }
        },
        "additionalProperties": false
      },
      "UpdateGameUsersResultResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/UpdateGameUsersResult"
          }
        },
        "additionalProperties": false
      },
      "UpdatePartyStatusCommand": {
        "required": [
          "partyId",
          "status",
          "targetedPartyId",
          "targetedSettlementId",
          "waypoints"
        ],
        "type": "object",
        "properties": {
          "partyId": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/PartyStatus"
          },
          "waypoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Geometry"
            }
          },
          "targetedPartyId": {
            "type": "integer",
            "format": "int32"
          },
          "targetedSettlementId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpdateSettlementCommand": {
        "required": [
          "partyId",
          "settlementId",
          "troops"
        ],
        "type": "object",
        "properties": {
          "partyId": {
            "type": "integer",
            "format": "int32"
          },
          "settlementId": {
            "type": "integer",
            "format": "int32"
          },
          "troops": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpdateTerrainCommand": {
        "required": [
          "boundary",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "boundary": {
            "$ref": "#/components/schemas/Polygon"
          }
        },
        "additionalProperties": false
      },
      "UpdateUserCommand": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpdateUserNoteCommand": {
        "required": [
          "note",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "note": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserClanViewModel": {
        "required": [
          "clan",
          "role"
        ],
        "type": "object",
        "properties": {
          "clan": {
            "$ref": "#/components/schemas/ClanViewModel"
          },
          "role": {
            "$ref": "#/components/schemas/ClanMemberRole"
          }
        },
        "additionalProperties": false
      },
      "UserClanViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/UserClanViewModel"
          }
        },
        "additionalProperties": false
      },
      "UserItemViewModel": {
        "required": [
          "createdAt",
          "id",
          "isArmoryItem",
          "isBroken",
          "isPersonal",
          "item",
          "userId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "item": {
            "$ref": "#/components/schemas/ItemViewModel"
          },
          "isBroken": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "isArmoryItem": {
            "type": "boolean"
          },
          "isPersonal": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserItemViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserItemViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserItemViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/UserItemViewModel"
          }
        },
        "additionalProperties": false
      },
      "UserNotificationMetadataEntitiesDictViewModel": {
        "required": [
          "characters",
          "clans",
          "users"
        ],
        "type": "object",
        "properties": {
          "clans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClanPublicViewModel"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPublicViewModel"
            }
          },
          "characters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CharacterPublicViewModel"
            }
          }
        },
        "additionalProperties": false
      },
      "UserNotificationViewModel": {
        "required": [
          "createdAt",
          "id",
          "metadata",
          "state",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "$ref": "#/components/schemas/NotificationState"
          },
          "type": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UserNotificationViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/UserNotificationViewModel"
          }
        },
        "additionalProperties": false
      },
      "UserNotificationsWithDictViewModel": {
        "required": [
          "dict",
          "notifications"
        ],
        "type": "object",
        "properties": {
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNotificationViewModel"
            }
          },
          "dict": {
            "$ref": "#/components/schemas/UserNotificationMetadataEntitiesDictViewModel"
          }
        },
        "additionalProperties": false
      },
      "UserNotificationsWithDictViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/UserNotificationsWithDictViewModel"
          }
        },
        "additionalProperties": false
      },
      "UserPrivateViewModel": {
        "required": [
          "clanMembership",
          "createdAt",
          "experienceMultiplier",
          "gold",
          "heirloomPoints",
          "id",
          "isDonor",
          "name",
          "note",
          "platform",
          "platformUserId",
          "region",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "platform": {
            "$ref": "#/components/schemas/Platform"
          },
          "gold": {
            "type": "integer",
            "format": "int32"
          },
          "heirloomPoints": {
            "type": "integer",
            "format": "int32"
          },
          "experienceMultiplier": {
            "type": "number",
            "format": "float"
          },
          "platformUserId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "isDonor": {
            "type": "boolean"
          },
          "note": {
            "type": "string"
          },
          "activeCharacterId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "clanMembership": {
            "$ref": "#/components/schemas/UserClanViewModel"
          }
        },
        "additionalProperties": false
      },
      "UserPrivateViewModelArrayResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPrivateViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserPrivateViewModelIListResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPrivateViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserPrivateViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/UserPrivateViewModel"
          }
        },
        "additionalProperties": false
      },
      "UserPublicViewModel": {
        "required": [
          "clanMembership",
          "id",
          "name",
          "platform",
          "platformUserId",
          "region"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "platform": {
            "$ref": "#/components/schemas/Platform"
          },
          "platformUserId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "clanMembership": {
            "$ref": "#/components/schemas/UserClanViewModel"
          }
        },
        "additionalProperties": false
      },
      "UserViewModel": {
        "required": [
          "clanMembership",
          "experienceMultiplier",
          "gold",
          "heirloomPoints",
          "id",
          "isDonor",
          "name",
          "platform",
          "platformUserId",
          "region",
          "role",
          "unreadNotificationsCount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "platform": {
            "$ref": "#/components/schemas/Platform"
          },
          "platformUserId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gold": {
            "type": "integer",
            "format": "int32"
          },
          "heirloomPoints": {
            "type": "integer",
            "format": "int32"
          },
          "experienceMultiplier": {
            "type": "number",
            "format": "float"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "isDonor": {
            "type": "boolean"
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "activeCharacterId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "unreadNotificationsCount": {
            "type": "integer",
            "format": "int32"
          },
          "clanMembership": {
            "$ref": "#/components/schemas/UserClanViewModel"
          }
        },
        "additionalProperties": false
      },
      "UserViewModelResult": {
        "required": [
          "data",
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "$ref": "#/components/schemas/UserViewModel"
          }
        },
        "additionalProperties": false
      },
      "WeaponClass": {
        "enum": [
          "Undefined",
          "Dagger",
          "OneHandedSword",
          "TwoHandedSword",
          "OneHandedAxe",
          "TwoHandedAxe",
          "Mace",
          "Pick",
          "TwoHandedMace",
          "OneHandedPolearm",
          "TwoHandedPolearm",
          "LowGripPolearm",
          "Arrow",
          "Bolt",
          "Cartridge",
          "Bow",
          "Crossbow",
          "Stone",
          "Boulder",
          "ThrowingAxe",
          "ThrowingKnife",
          "Javelin",
          "Pistol",
          "Musket",
          "SmallShield",
          "LargeShield",
          "Banner"
        ],
        "type": "string"
      },
      "WeaponFlags": {
        "enum": [
          "MeleeWeapon",
          "RangedWeapon",
          "FirearmAmmo",
          "NotUsableWithOneHand",
          "NotUsableWithTwoHand",
          "WideGrip",
          "AttachAmmoToVisual",
          "Consumable",
          "HasHitPoints",
          "HasString",
          "StringHeldByHand",
          "UnloadWhenSheathed",
          "AffectsArea",
          "AffectsAreaBig",
          "Burning",
          "BonusAgainstShield",
          "CanPenetrateShield",
          "CantReloadOnHorseback",
          "AutoReload",
          "TwoHandIdleOnMount",
          "NoBlood",
          "PenaltyWithShield",
          "CanDismount",
          "CanHook",
          "CanKnockDown",
          "CanCrushThrough",
          "CanBlockRanged",
          "MissileWithPhysics",
          "MultiplePenetration",
          "LeavesTrail",
          "UseHandAsThrowBase",
          "AmmoBreaksOnBounceBack",
          "AmmoCanBreakOnBounceBack",
          "AmmoSticksWhenShot"
        ],
        "type": "string",
        "format": ""
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}

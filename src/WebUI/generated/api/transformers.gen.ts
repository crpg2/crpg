// This file is auto-generated by @hey-api/openapi-ts

import type { GetActivityLogsResponse, GetBattlesByBattleIdResponse, GetBattlesResponse, GetClansByClanIdArmoryResponse, GetGamesTournamentUsersResponse, GetGamesUsersResponse, GetItemsResponse, GetItemsUpgradesByBaseIdResponse, GetPartiesSelfUpdateResponse, GetPatchNotesResponse, GetRestrictionsResponse, GetSettlementsBySettlementIdItemsResponse, GetSettlementsBySettlementIdShopItemsResponse, GetUsersByIdRestrictionsResponse, GetUsersByUserIdResponse, GetUsersResponse, GetUsersSearchResponse, GetUsersSelfCharactersByIdEarningStatisticsResponse, GetUsersSelfCharactersByIdItemsResponse, GetUsersSelfCharactersByIdLimitationsResponse, GetUsersSelfItemsResponse, GetUsersSelfNotificationsResponse, GetUsersSelfRestrictionResponse, PostGamesRestrictionsResponse, PostPartiesSelfItemsResponse, PostSettlementsBySettlementIdItemsResponse, PostUsersSelfItemsResponse, PutGamesUsersResponse, PutUsersByUserIdNoteResponse, PutUsersSelfCharactersByIdItemsResponse, PutUsersSelfItemsByIdReforgeResponse, PutUsersSelfItemsByIdRepairResponse, PutUsersSelfItemsByIdUpgradeResponse, PutUsersSelfNotificationsByIdResponse } from './types.gen';

export const getActivityLogsResponseTransformer = async (data: any): Promise<GetActivityLogsResponse> => {
    data = activityLogWithDictViewModelResultSchemaResponseTransformer(data);
    return data;
};

const activityLogWithDictViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = activityLogWithDictViewModelSchemaResponseTransformer(data.data);
    return data;
};

const activityLogWithDictViewModelSchemaResponseTransformer = (data: any) => {
    data.activityLogs = data.activityLogs.map((item: any) => {
        return activityLogViewModelSchemaResponseTransformer(item);
    });
    return data;
};

const activityLogViewModelSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getBattlesResponseTransformer = async (data: any): Promise<GetBattlesResponse> => {
    data = battleDetailedViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const battleDetailedViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return battleDetailedViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

const battleDetailedViewModelSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    if (data.scheduledFor) {
        data.scheduledFor = new Date(data.scheduledFor);
    }
    return data;
};

export const getBattlesByBattleIdResponseTransformer = async (data: any): Promise<GetBattlesByBattleIdResponse> => {
    data = battleDetailedViewModelResultSchemaResponseTransformer(data);
    return data;
};

const battleDetailedViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = battleDetailedViewModelSchemaResponseTransformer(data.data);
    return data;
};

export const getClansByClanIdArmoryResponseTransformer = async (data: any): Promise<GetClansByClanIdArmoryResponse> => {
    data = clanArmoryItemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const clanArmoryItemViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return clanArmoryItemViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

const clanArmoryItemViewModelSchemaResponseTransformer = (data: any) => {
    data.item = itemViewModelSchemaResponseTransformer(data.item);
    return data;
};

const itemViewModelSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getGamesUsersResponseTransformer = async (data: any): Promise<GetGamesUsersResponse> => {
    data = gameUserViewModelResultSchemaResponseTransformer(data);
    return data;
};

const gameUserViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = gameUserViewModelSchemaResponseTransformer(data.data);
    return data;
};

const gameUserViewModelSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.restrictions = data.restrictions.map((item: any) => {
        return restrictionViewModelSchemaResponseTransformer(item);
    });
    return data;
};

const restrictionViewModelSchemaResponseTransformer = (data: any) => {
    data.restrictedUser = userPrivateViewModelSchemaResponseTransformer(data.restrictedUser);
    data.createdAt = new Date(data.createdAt);
    return data;
};

const userPrivateViewModelSchemaResponseTransformer = (data: any) => {
    data.updatedAt = new Date(data.updatedAt);
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const putGamesUsersResponseTransformer = async (data: any): Promise<PutGamesUsersResponse> => {
    data = updateGameUsersResultResultSchemaResponseTransformer(data);
    return data;
};

const updateGameUsersResultResultSchemaResponseTransformer = (data: any) => {
    data.data = updateGameUsersResultSchemaResponseTransformer(data.data);
    return data;
};

const updateGameUsersResultSchemaResponseTransformer = (data: any) => {
    data.updateResults = data.updateResults.map((item: any) => {
        return updateGameUserResultSchemaResponseTransformer(item);
    });
    return data;
};

const updateGameUserResultSchemaResponseTransformer = (data: any) => {
    data.user = gameUserViewModelSchemaResponseTransformer(data.user);
    return data;
};

export const getGamesTournamentUsersResponseTransformer = async (data: any): Promise<GetGamesTournamentUsersResponse> => {
    data = gameUserViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const postGamesRestrictionsResponseTransformer = async (data: any): Promise<PostGamesRestrictionsResponse> => {
    data = restrictionViewModelResultSchemaResponseTransformer(data);
    return data;
};

const restrictionViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = restrictionViewModelSchemaResponseTransformer(data.data);
    return data;
};

export const getItemsResponseTransformer = async (data: any): Promise<GetItemsResponse> => {
    data = itemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const itemViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return itemViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getItemsUpgradesByBaseIdResponseTransformer = async (data: any): Promise<GetItemsUpgradesByBaseIdResponse> => {
    data = itemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

export const getPartiesSelfUpdateResponseTransformer = async (data: any): Promise<GetPartiesSelfUpdateResponse> => {
    data = strategusUpdateResultSchemaResponseTransformer(data);
    return data;
};

const strategusUpdateResultSchemaResponseTransformer = (data: any) => {
    data.data = strategusUpdateSchemaResponseTransformer(data.data);
    return data;
};

const strategusUpdateSchemaResponseTransformer = (data: any) => {
    data.visibleBattles = data.visibleBattles.map((item: any) => {
        return battleViewModelSchemaResponseTransformer(item);
    });
    return data;
};

const battleViewModelSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const postPartiesSelfItemsResponseTransformer = async (data: any): Promise<PostPartiesSelfItemsResponse> => {
    data = itemStackResultSchemaResponseTransformer(data);
    return data;
};

const itemStackResultSchemaResponseTransformer = (data: any) => {
    data.data = itemStackSchemaResponseTransformer(data.data);
    return data;
};

const itemStackSchemaResponseTransformer = (data: any) => {
    data.item = itemViewModelSchemaResponseTransformer(data.item);
    return data;
};

export const getPatchNotesResponseTransformer = async (data: any): Promise<GetPatchNotesResponse> => {
    data = patchNotesIListResultSchemaResponseTransformer(data);
    return data;
};

const patchNotesIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return patchNotesSchemaResponseTransformer(item);
        });
    }
    return data;
};

const patchNotesSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getRestrictionsResponseTransformer = async (data: any): Promise<GetRestrictionsResponse> => {
    data = restrictionViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const restrictionViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return restrictionViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getSettlementsBySettlementIdItemsResponseTransformer = async (data: any): Promise<GetSettlementsBySettlementIdItemsResponse> => {
    data = itemStackIListResultSchemaResponseTransformer(data);
    return data;
};

const itemStackIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return itemStackSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const postSettlementsBySettlementIdItemsResponseTransformer = async (data: any): Promise<PostSettlementsBySettlementIdItemsResponse> => {
    data = itemStackResultSchemaResponseTransformer(data);
    return data;
};

export const getSettlementsBySettlementIdShopItemsResponseTransformer = async (data: any): Promise<GetSettlementsBySettlementIdShopItemsResponse> => {
    data = itemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

export const getUsersSearchResponseTransformer = async (data: any): Promise<GetUsersSearchResponse> => {
    data = userPrivateViewModelArrayResultSchemaResponseTransformer(data);
    return data;
};

const userPrivateViewModelArrayResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return userPrivateViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getUsersByUserIdResponseTransformer = async (data: any): Promise<GetUsersByUserIdResponse> => {
    data = userPrivateViewModelResultSchemaResponseTransformer(data);
    return data;
};

const userPrivateViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = userPrivateViewModelSchemaResponseTransformer(data.data);
    return data;
};

export const putUsersByUserIdNoteResponseTransformer = async (data: any): Promise<PutUsersByUserIdNoteResponse> => {
    data = userPrivateViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const getUsersResponseTransformer = async (data: any): Promise<GetUsersResponse> => {
    data = userPrivateViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const userPrivateViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return userPrivateViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getUsersByIdRestrictionsResponseTransformer = async (data: any): Promise<GetUsersByIdRestrictionsResponse> => {
    data = restrictionViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

export const getUsersSelfRestrictionResponseTransformer = async (data: any): Promise<GetUsersSelfRestrictionResponse> => {
    data = restrictionPublicViewModelResultSchemaResponseTransformer(data);
    return data;
};

const restrictionPublicViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = restrictionPublicViewModelSchemaResponseTransformer(data.data);
    return data;
};

const restrictionPublicViewModelSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getUsersSelfCharactersByIdItemsResponseTransformer = async (data: any): Promise<GetUsersSelfCharactersByIdItemsResponse> => {
    data = equippedItemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const equippedItemViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return equippedItemViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

const equippedItemViewModelSchemaResponseTransformer = (data: any) => {
    data.userItem = userItemViewModelSchemaResponseTransformer(data.userItem);
    return data;
};

const userItemViewModelSchemaResponseTransformer = (data: any) => {
    data.item = itemViewModelSchemaResponseTransformer(data.item);
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const putUsersSelfCharactersByIdItemsResponseTransformer = async (data: any): Promise<PutUsersSelfCharactersByIdItemsResponse> => {
    data = equippedItemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

export const getUsersSelfCharactersByIdEarningStatisticsResponseTransformer = async (data: any): Promise<GetUsersSelfCharactersByIdEarningStatisticsResponse> => {
    data = activityLogViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const activityLogViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return activityLogViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getUsersSelfCharactersByIdLimitationsResponseTransformer = async (data: any): Promise<GetUsersSelfCharactersByIdLimitationsResponse> => {
    data = characterLimitationsViewModelResultSchemaResponseTransformer(data);
    return data;
};

const characterLimitationsViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = characterLimitationsViewModelSchemaResponseTransformer(data.data);
    return data;
};

const characterLimitationsViewModelSchemaResponseTransformer = (data: any) => {
    data.lastRespecializeAt = new Date(data.lastRespecializeAt);
    return data;
};

export const getUsersSelfItemsResponseTransformer = async (data: any): Promise<GetUsersSelfItemsResponse> => {
    data = userItemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const userItemViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return userItemViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const postUsersSelfItemsResponseTransformer = async (data: any): Promise<PostUsersSelfItemsResponse> => {
    data = userItemViewModelResultSchemaResponseTransformer(data);
    return data;
};

const userItemViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = userItemViewModelSchemaResponseTransformer(data.data);
    return data;
};

export const putUsersSelfItemsByIdReforgeResponseTransformer = async (data: any): Promise<PutUsersSelfItemsByIdReforgeResponse> => {
    data = userItemViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const putUsersSelfItemsByIdRepairResponseTransformer = async (data: any): Promise<PutUsersSelfItemsByIdRepairResponse> => {
    data = userItemViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const putUsersSelfItemsByIdUpgradeResponseTransformer = async (data: any): Promise<PutUsersSelfItemsByIdUpgradeResponse> => {
    data = userItemViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const getUsersSelfNotificationsResponseTransformer = async (data: any): Promise<GetUsersSelfNotificationsResponse> => {
    data = userNotificationsWithDictViewModelResultSchemaResponseTransformer(data);
    return data;
};

const userNotificationsWithDictViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = userNotificationsWithDictViewModelSchemaResponseTransformer(data.data);
    return data;
};

const userNotificationsWithDictViewModelSchemaResponseTransformer = (data: any) => {
    data.notifications = data.notifications.map((item: any) => {
        return userNotificationViewModelSchemaResponseTransformer(item);
    });
    return data;
};

const userNotificationViewModelSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const putUsersSelfNotificationsByIdResponseTransformer = async (data: any): Promise<PutUsersSelfNotificationsByIdResponse> => {
    data = userNotificationViewModelResultSchemaResponseTransformer(data);
    return data;
};

const userNotificationViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = userNotificationViewModelSchemaResponseTransformer(data.data);
    return data;
};

// This file is auto-generated by @hey-api/openapi-ts

import type { GetActivityLogsResponse, GetBattlesByBattleIdFighterApplicationsResponse, GetBattlesByBattleIdFightersResponse, GetBattlesByBattleIdResponse, GetBattlesResponse, GetClansByClanIdArmoryResponse, GetGamesTournamentUsersResponse, GetGamesUsersResponse, GetItemsResponse, GetItemsUpgradesByBaseIdResponse, GetPartiesSelfUpdateResponse, GetPatchNotesResponse, GetRestrictionsResponse, GetSettlementsBySettlementIdItemsResponse, GetSettlementsBySettlementIdResponse, GetSettlementsBySettlementIdShopItemsResponse, GetSettlementsResponse, GetTerrainsResponse, GetUsersByIdRestrictionsResponse, GetUsersByUserIdResponse, GetUsersResponse, GetUsersSearchResponse, GetUsersSelfCharactersByIdEarningStatisticsResponse, GetUsersSelfCharactersByIdItemsResponse, GetUsersSelfCharactersByIdLimitationsResponse, GetUsersSelfItemsResponse, GetUsersSelfNotificationsResponse, GetUsersSelfRestrictionResponse, PostBattlesByBattleIdFightersResponse, PostGamesRestrictionsResponse, PostPartiesResponse, PostPartiesSelfItemsResponse, PostSettlementsBySettlementIdItemsResponse, PostSettlementsBySettlementIdResponse, PostTerrainsResponse, PostUsersSelfItemsResponse, PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponse, PutGamesUsersResponse, PutPartiesSelfStatusResponse, PutTerrainsByIdResponse, PutUsersByUserIdNoteResponse, PutUsersSelfCharactersByIdItemsResponse, PutUsersSelfItemsByIdReforgeResponse, PutUsersSelfItemsByIdRepairResponse, PutUsersSelfItemsByIdUpgradeResponse, PutUsersSelfNotificationsByIdResponse } from './types.gen';

export const getActivityLogsResponseTransformer = async (data: any): Promise<GetActivityLogsResponse> => {
    data = activityLogWithDictViewModelResultSchemaResponseTransformer(data);
    return data;
};

const activityLogWithDictViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = activityLogWithDictViewModelSchemaResponseTransformer(data.data);
    return data;
};

const activityLogWithDictViewModelSchemaResponseTransformer = (data: any) => {
    data.activityLogs = data.activityLogs.map((item: any) => {
        return activityLogViewModelSchemaResponseTransformer(item);
    });
    return data;
};

const activityLogViewModelSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getBattlesResponseTransformer = async (data: any): Promise<GetBattlesResponse> => {
    data = battleDetailedViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const battleDetailedViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return battleDetailedViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

const battleDetailedViewModelSchemaResponseTransformer = (data: any) => {
    data.position = pointSchemaResponseTransformer(data.position);
    data.attacker = battleFighterViewModelSchemaResponseTransformer(data.attacker);
    data.defender = battleFighterViewModelSchemaResponseTransformer(data.defender);
    data.createdAt = new Date(data.createdAt);
    return data;
};

const pointSchemaResponseTransformer = (data: any) => {
    data.factory = geometryFactorySchemaResponseTransformer(data.factory);
    data.centroid = pointSchemaResponseTransformer(data.centroid);
    data.interiorPoint = pointSchemaResponseTransformer(data.interiorPoint);
    data.pointOnSurface = pointSchemaResponseTransformer(data.pointOnSurface);
    data.envelope = geometrySchemaResponseTransformer(data.envelope);
    data.envelopeInternal = envelopeSchemaResponseTransformer(data.envelopeInternal);
    data.coordinateSequence = coordinateSequenceSchemaResponseTransformer(data.coordinateSequence);
    if (data.coordinates) {
        data.coordinates = data.coordinates.map((item: any) => {
            return coordinateSchemaResponseTransformer(item);
        });
    }
    data.coordinate = coordinateSchemaResponseTransformer(data.coordinate);
    data.boundary = geometrySchemaResponseTransformer(data.boundary);
    return data;
};

const geometryFactorySchemaResponseTransformer = (data: any) => {
    data.elevationModel = elevationModelSchemaResponseTransformer(data.elevationModel);
    data.geometryServices = ntsGeometryServicesSchemaResponseTransformer(data.geometryServices);
    return data;
};

const elevationModelSchemaResponseTransformer = (data: any) => {
    data.extent = envelopeSchemaResponseTransformer(data.extent);
    return data;
};

const envelopeSchemaResponseTransformer = (data: any) => {
    data.centre = coordinateSchemaResponseTransformer(data.centre);
    return data;
};

const coordinateSchemaResponseTransformer = (data: any) => {
    data.coordinateValue = coordinateSchemaResponseTransformer(data.coordinateValue);
    return data;
};

const ntsGeometryServicesSchemaResponseTransformer = (data: any) => {
    data.defaultElevationModel = elevationModelSchemaResponseTransformer(data.defaultElevationModel);
    return data;
};

const geometrySchemaResponseTransformer = (data: any) => {
    data.factory = geometryFactorySchemaResponseTransformer(data.factory);
    data.coordinate = coordinateSchemaResponseTransformer(data.coordinate);
    if (data.coordinates) {
        data.coordinates = data.coordinates.map((item: any) => {
            return coordinateSchemaResponseTransformer(item);
        });
    }
    data.centroid = pointSchemaResponseTransformer(data.centroid);
    data.interiorPoint = pointSchemaResponseTransformer(data.interiorPoint);
    data.pointOnSurface = pointSchemaResponseTransformer(data.pointOnSurface);
    data.boundary = geometrySchemaResponseTransformer(data.boundary);
    data.envelope = geometrySchemaResponseTransformer(data.envelope);
    data.envelopeInternal = envelopeSchemaResponseTransformer(data.envelopeInternal);
    return data;
};

const coordinateSequenceSchemaResponseTransformer = (data: any) => {
    data.first = coordinateSchemaResponseTransformer(data.first);
    data.last = coordinateSchemaResponseTransformer(data.last);
    return data;
};

const battleFighterViewModelSchemaResponseTransformer = (data: any) => {
    data.settlement = settlementPublicViewModelSchemaResponseTransformer(data.settlement);
    return data;
};

const settlementPublicViewModelSchemaResponseTransformer = (data: any) => {
    data.position = pointSchemaResponseTransformer(data.position);
    return data;
};

export const getBattlesByBattleIdResponseTransformer = async (data: any): Promise<GetBattlesByBattleIdResponse> => {
    data = battleViewModelResultSchemaResponseTransformer(data);
    return data;
};

const battleViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = battleViewModelSchemaResponseTransformer(data.data);
    return data;
};

const battleViewModelSchemaResponseTransformer = (data: any) => {
    data.position = pointSchemaResponseTransformer(data.position);
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getBattlesByBattleIdFightersResponseTransformer = async (data: any): Promise<GetBattlesByBattleIdFightersResponse> => {
    data = battleFighterViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const battleFighterViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return battleFighterViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const postBattlesByBattleIdFightersResponseTransformer = async (data: any): Promise<PostBattlesByBattleIdFightersResponse> => {
    data = battleFighterApplicationViewModelResultSchemaResponseTransformer(data);
    return data;
};

const battleFighterApplicationViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = battleFighterApplicationViewModelSchemaResponseTransformer(data.data);
    return data;
};

const battleFighterApplicationViewModelSchemaResponseTransformer = (data: any) => {
    data.party = partyVisibleViewModelSchemaResponseTransformer(data.party);
    return data;
};

const partyVisibleViewModelSchemaResponseTransformer = (data: any) => {
    data.position = pointSchemaResponseTransformer(data.position);
    return data;
};

export const getBattlesByBattleIdFighterApplicationsResponseTransformer = async (data: any): Promise<GetBattlesByBattleIdFighterApplicationsResponse> => {
    data = battleFighterApplicationViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const battleFighterApplicationViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return battleFighterApplicationViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const putBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponseTransformer = async (data: any): Promise<PutBattlesByBattleIdFighterApplicationsByApplicationIdResponseResponse> => {
    data = battleFighterApplicationViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const getClansByClanIdArmoryResponseTransformer = async (data: any): Promise<GetClansByClanIdArmoryResponse> => {
    data = clanArmoryItemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const clanArmoryItemViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return clanArmoryItemViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

const clanArmoryItemViewModelSchemaResponseTransformer = (data: any) => {
    data.item = itemViewModelSchemaResponseTransformer(data.item);
    return data;
};

const itemViewModelSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getGamesUsersResponseTransformer = async (data: any): Promise<GetGamesUsersResponse> => {
    data = gameUserViewModelResultSchemaResponseTransformer(data);
    return data;
};

const gameUserViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = gameUserViewModelSchemaResponseTransformer(data.data);
    return data;
};

const gameUserViewModelSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    data.restrictions = data.restrictions.map((item: any) => {
        return restrictionViewModelSchemaResponseTransformer(item);
    });
    return data;
};

const restrictionViewModelSchemaResponseTransformer = (data: any) => {
    data.restrictedUser = userPrivateViewModelSchemaResponseTransformer(data.restrictedUser);
    data.createdAt = new Date(data.createdAt);
    return data;
};

const userPrivateViewModelSchemaResponseTransformer = (data: any) => {
    data.updatedAt = new Date(data.updatedAt);
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const putGamesUsersResponseTransformer = async (data: any): Promise<PutGamesUsersResponse> => {
    data = updateGameUsersResultResultSchemaResponseTransformer(data);
    return data;
};

const updateGameUsersResultResultSchemaResponseTransformer = (data: any) => {
    data.data = updateGameUsersResultSchemaResponseTransformer(data.data);
    return data;
};

const updateGameUsersResultSchemaResponseTransformer = (data: any) => {
    data.updateResults = data.updateResults.map((item: any) => {
        return updateGameUserResultSchemaResponseTransformer(item);
    });
    return data;
};

const updateGameUserResultSchemaResponseTransformer = (data: any) => {
    data.user = gameUserViewModelSchemaResponseTransformer(data.user);
    return data;
};

export const getGamesTournamentUsersResponseTransformer = async (data: any): Promise<GetGamesTournamentUsersResponse> => {
    data = gameUserViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const postGamesRestrictionsResponseTransformer = async (data: any): Promise<PostGamesRestrictionsResponse> => {
    data = restrictionViewModelResultSchemaResponseTransformer(data);
    return data;
};

const restrictionViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = restrictionViewModelSchemaResponseTransformer(data.data);
    return data;
};

export const getItemsResponseTransformer = async (data: any): Promise<GetItemsResponse> => {
    data = itemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const itemViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return itemViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getItemsUpgradesByBaseIdResponseTransformer = async (data: any): Promise<GetItemsUpgradesByBaseIdResponse> => {
    data = itemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

export const getPartiesSelfUpdateResponseTransformer = async (data: any): Promise<GetPartiesSelfUpdateResponse> => {
    data = strategusUpdateResultSchemaResponseTransformer(data);
    return data;
};

const strategusUpdateResultSchemaResponseTransformer = (data: any) => {
    data.data = strategusUpdateSchemaResponseTransformer(data.data);
    return data;
};

const strategusUpdateSchemaResponseTransformer = (data: any) => {
    data.party = partyViewModelSchemaResponseTransformer(data.party);
    data.visibleParties = data.visibleParties.map((item: any) => {
        return partyVisibleViewModelSchemaResponseTransformer(item);
    });
    data.visibleSettlements = data.visibleSettlements.map((item: any) => {
        return settlementPublicViewModelSchemaResponseTransformer(item);
    });
    data.visibleBattles = data.visibleBattles.map((item: any) => {
        return battleViewModelSchemaResponseTransformer(item);
    });
    return data;
};

const partyViewModelSchemaResponseTransformer = (data: any) => {
    data.position = pointSchemaResponseTransformer(data.position);
    data.waypoints = data.waypoints.map((item: any) => {
        return geometrySchemaResponseTransformer(item);
    });
    data.targetedParty = partyVisibleViewModelSchemaResponseTransformer(data.targetedParty);
    data.targetedSettlement = settlementPublicViewModelSchemaResponseTransformer(data.targetedSettlement);
    return data;
};

export const postPartiesResponseTransformer = async (data: any): Promise<PostPartiesResponse> => {
    data = partyViewModelResultSchemaResponseTransformer(data);
    return data;
};

const partyViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = partyViewModelSchemaResponseTransformer(data.data);
    return data;
};

export const putPartiesSelfStatusResponseTransformer = async (data: any): Promise<PutPartiesSelfStatusResponse> => {
    data = partyViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const postPartiesSelfItemsResponseTransformer = async (data: any): Promise<PostPartiesSelfItemsResponse> => {
    data = itemStackResultSchemaResponseTransformer(data);
    return data;
};

const itemStackResultSchemaResponseTransformer = (data: any) => {
    data.data = itemStackSchemaResponseTransformer(data.data);
    return data;
};

const itemStackSchemaResponseTransformer = (data: any) => {
    data.item = itemViewModelSchemaResponseTransformer(data.item);
    return data;
};

export const getPatchNotesResponseTransformer = async (data: any): Promise<GetPatchNotesResponse> => {
    data = patchNotesIListResultSchemaResponseTransformer(data);
    return data;
};

const patchNotesIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return patchNotesSchemaResponseTransformer(item);
        });
    }
    return data;
};

const patchNotesSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getRestrictionsResponseTransformer = async (data: any): Promise<GetRestrictionsResponse> => {
    data = restrictionViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const restrictionViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return restrictionViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getSettlementsResponseTransformer = async (data: any): Promise<GetSettlementsResponse> => {
    data = settlementPublicViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const settlementPublicViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return settlementPublicViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getSettlementsBySettlementIdResponseTransformer = async (data: any): Promise<GetSettlementsBySettlementIdResponse> => {
    data = settlementPublicViewModelResultSchemaResponseTransformer(data);
    return data;
};

const settlementPublicViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = settlementPublicViewModelSchemaResponseTransformer(data.data);
    return data;
};

export const postSettlementsBySettlementIdResponseTransformer = async (data: any): Promise<PostSettlementsBySettlementIdResponse> => {
    data = settlementPublicViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const getSettlementsBySettlementIdItemsResponseTransformer = async (data: any): Promise<GetSettlementsBySettlementIdItemsResponse> => {
    data = itemStackIListResultSchemaResponseTransformer(data);
    return data;
};

const itemStackIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return itemStackSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const postSettlementsBySettlementIdItemsResponseTransformer = async (data: any): Promise<PostSettlementsBySettlementIdItemsResponse> => {
    data = itemStackResultSchemaResponseTransformer(data);
    return data;
};

export const getSettlementsBySettlementIdShopItemsResponseTransformer = async (data: any): Promise<GetSettlementsBySettlementIdShopItemsResponse> => {
    data = itemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

export const getTerrainsResponseTransformer = async (data: any): Promise<GetTerrainsResponse> => {
    data = terrainViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const terrainViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return terrainViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

const terrainViewModelSchemaResponseTransformer = (data: any) => {
    data.boundary = polygonSchemaResponseTransformer(data.boundary);
    return data;
};

const polygonSchemaResponseTransformer = (data: any) => {
    data.factory = geometryFactorySchemaResponseTransformer(data.factory);
    data.centroid = pointSchemaResponseTransformer(data.centroid);
    data.interiorPoint = pointSchemaResponseTransformer(data.interiorPoint);
    data.pointOnSurface = pointSchemaResponseTransformer(data.pointOnSurface);
    data.envelope = geometrySchemaResponseTransformer(data.envelope);
    data.envelopeInternal = envelopeSchemaResponseTransformer(data.envelopeInternal);
    data.coordinate = coordinateSchemaResponseTransformer(data.coordinate);
    if (data.coordinates) {
        data.coordinates = data.coordinates.map((item: any) => {
            return coordinateSchemaResponseTransformer(item);
        });
    }
    data.exteriorRing = lineStringSchemaResponseTransformer(data.exteriorRing);
    if (data.interiorRings) {
        data.interiorRings = data.interiorRings.map((item: any) => {
            return lineStringSchemaResponseTransformer(item);
        });
    }
    data.boundary = geometrySchemaResponseTransformer(data.boundary);
    data.shell = linearRingSchemaResponseTransformer(data.shell);
    if (data.holes) {
        data.holes = data.holes.map((item: any) => {
            return linearRingSchemaResponseTransformer(item);
        });
    }
    return data;
};

const lineStringSchemaResponseTransformer = (data: any) => {
    data.factory = geometryFactorySchemaResponseTransformer(data.factory);
    data.centroid = pointSchemaResponseTransformer(data.centroid);
    data.interiorPoint = pointSchemaResponseTransformer(data.interiorPoint);
    data.pointOnSurface = pointSchemaResponseTransformer(data.pointOnSurface);
    data.envelope = geometrySchemaResponseTransformer(data.envelope);
    data.envelopeInternal = envelopeSchemaResponseTransformer(data.envelopeInternal);
    if (data.coordinates) {
        data.coordinates = data.coordinates.map((item: any) => {
            return coordinateSchemaResponseTransformer(item);
        });
    }
    data.coordinateSequence = coordinateSequenceSchemaResponseTransformer(data.coordinateSequence);
    data.coordinate = coordinateSchemaResponseTransformer(data.coordinate);
    data.startPoint = pointSchemaResponseTransformer(data.startPoint);
    data.endPoint = pointSchemaResponseTransformer(data.endPoint);
    data.boundary = geometrySchemaResponseTransformer(data.boundary);
    return data;
};

const linearRingSchemaResponseTransformer = (data: any) => {
    data.factory = geometryFactorySchemaResponseTransformer(data.factory);
    data.centroid = pointSchemaResponseTransformer(data.centroid);
    data.interiorPoint = pointSchemaResponseTransformer(data.interiorPoint);
    data.pointOnSurface = pointSchemaResponseTransformer(data.pointOnSurface);
    data.envelope = geometrySchemaResponseTransformer(data.envelope);
    data.envelopeInternal = envelopeSchemaResponseTransformer(data.envelopeInternal);
    if (data.coordinates) {
        data.coordinates = data.coordinates.map((item: any) => {
            return coordinateSchemaResponseTransformer(item);
        });
    }
    data.coordinateSequence = coordinateSequenceSchemaResponseTransformer(data.coordinateSequence);
    data.coordinate = coordinateSchemaResponseTransformer(data.coordinate);
    data.startPoint = pointSchemaResponseTransformer(data.startPoint);
    data.endPoint = pointSchemaResponseTransformer(data.endPoint);
    data.boundary = geometrySchemaResponseTransformer(data.boundary);
    return data;
};

export const postTerrainsResponseTransformer = async (data: any): Promise<PostTerrainsResponse> => {
    data = terrainViewModelResultSchemaResponseTransformer(data);
    return data;
};

const terrainViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = terrainViewModelSchemaResponseTransformer(data.data);
    return data;
};

export const putTerrainsByIdResponseTransformer = async (data: any): Promise<PutTerrainsByIdResponse> => {
    data = terrainViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const getUsersSearchResponseTransformer = async (data: any): Promise<GetUsersSearchResponse> => {
    data = userPrivateViewModelArrayResultSchemaResponseTransformer(data);
    return data;
};

const userPrivateViewModelArrayResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return userPrivateViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getUsersByUserIdResponseTransformer = async (data: any): Promise<GetUsersByUserIdResponse> => {
    data = userPrivateViewModelResultSchemaResponseTransformer(data);
    return data;
};

const userPrivateViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = userPrivateViewModelSchemaResponseTransformer(data.data);
    return data;
};

export const putUsersByUserIdNoteResponseTransformer = async (data: any): Promise<PutUsersByUserIdNoteResponse> => {
    data = userPrivateViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const getUsersResponseTransformer = async (data: any): Promise<GetUsersResponse> => {
    data = userPrivateViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const userPrivateViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return userPrivateViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getUsersByIdRestrictionsResponseTransformer = async (data: any): Promise<GetUsersByIdRestrictionsResponse> => {
    data = restrictionViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

export const getUsersSelfRestrictionResponseTransformer = async (data: any): Promise<GetUsersSelfRestrictionResponse> => {
    data = restrictionPublicViewModelResultSchemaResponseTransformer(data);
    return data;
};

const restrictionPublicViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = restrictionPublicViewModelSchemaResponseTransformer(data.data);
    return data;
};

const restrictionPublicViewModelSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const getUsersSelfCharactersByIdItemsResponseTransformer = async (data: any): Promise<GetUsersSelfCharactersByIdItemsResponse> => {
    data = equippedItemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const equippedItemViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return equippedItemViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

const equippedItemViewModelSchemaResponseTransformer = (data: any) => {
    data.userItem = userItemViewModelSchemaResponseTransformer(data.userItem);
    return data;
};

const userItemViewModelSchemaResponseTransformer = (data: any) => {
    data.item = itemViewModelSchemaResponseTransformer(data.item);
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const putUsersSelfCharactersByIdItemsResponseTransformer = async (data: any): Promise<PutUsersSelfCharactersByIdItemsResponse> => {
    data = equippedItemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

export const getUsersSelfCharactersByIdEarningStatisticsResponseTransformer = async (data: any): Promise<GetUsersSelfCharactersByIdEarningStatisticsResponse> => {
    data = activityLogViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const activityLogViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return activityLogViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getUsersSelfCharactersByIdLimitationsResponseTransformer = async (data: any): Promise<GetUsersSelfCharactersByIdLimitationsResponse> => {
    data = characterLimitationsViewModelResultSchemaResponseTransformer(data);
    return data;
};

const characterLimitationsViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = characterLimitationsViewModelSchemaResponseTransformer(data.data);
    return data;
};

const characterLimitationsViewModelSchemaResponseTransformer = (data: any) => {
    data.lastRespecializeAt = new Date(data.lastRespecializeAt);
    return data;
};

export const getUsersSelfItemsResponseTransformer = async (data: any): Promise<GetUsersSelfItemsResponse> => {
    data = userItemViewModelIListResultSchemaResponseTransformer(data);
    return data;
};

const userItemViewModelIListResultSchemaResponseTransformer = (data: any) => {
    if (data.data) {
        data.data = data.data.map((item: any) => {
            return userItemViewModelSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const postUsersSelfItemsResponseTransformer = async (data: any): Promise<PostUsersSelfItemsResponse> => {
    data = userItemViewModelResultSchemaResponseTransformer(data);
    return data;
};

const userItemViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = userItemViewModelSchemaResponseTransformer(data.data);
    return data;
};

export const putUsersSelfItemsByIdReforgeResponseTransformer = async (data: any): Promise<PutUsersSelfItemsByIdReforgeResponse> => {
    data = userItemViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const putUsersSelfItemsByIdRepairResponseTransformer = async (data: any): Promise<PutUsersSelfItemsByIdRepairResponse> => {
    data = userItemViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const putUsersSelfItemsByIdUpgradeResponseTransformer = async (data: any): Promise<PutUsersSelfItemsByIdUpgradeResponse> => {
    data = userItemViewModelResultSchemaResponseTransformer(data);
    return data;
};

export const getUsersSelfNotificationsResponseTransformer = async (data: any): Promise<GetUsersSelfNotificationsResponse> => {
    data = userNotificationsWithDictViewModelResultSchemaResponseTransformer(data);
    return data;
};

const userNotificationsWithDictViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = userNotificationsWithDictViewModelSchemaResponseTransformer(data.data);
    return data;
};

const userNotificationsWithDictViewModelSchemaResponseTransformer = (data: any) => {
    data.notifications = data.notifications.map((item: any) => {
        return userNotificationViewModelSchemaResponseTransformer(item);
    });
    return data;
};

const userNotificationViewModelSchemaResponseTransformer = (data: any) => {
    data.createdAt = new Date(data.createdAt);
    return data;
};

export const putUsersSelfNotificationsByIdResponseTransformer = async (data: any): Promise<PutUsersSelfNotificationsByIdResponse> => {
    data = userNotificationViewModelResultSchemaResponseTransformer(data);
    return data;
};

const userNotificationViewModelResultSchemaResponseTransformer = (data: any) => {
    data.data = userNotificationViewModelSchemaResponseTransformer(data.data);
    return data;
};
